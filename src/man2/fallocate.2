.\" Copyright (c) 2007 Silicon Graphics, Inc. All Rights Reserved
.\" Written by Dave Chinner <dgc@sgi.com>
.\" May be distributed as per GNU General Public License version 2.
.\"
.\" 2011-09-19: Added FALLOC_FL_PUNCH_HOLE
.\" 2011-09-19: Substantial restructuring of the page
.\"
.\"*******************************************************************
.\"
.\" This file was generated with po4a. Translate the source file.
.\"
.\"*******************************************************************
.TH FALLOCATE 2 2012\-04\-23 Linux "Руководство программиста Linux"
.SH ИМЯ
fallocate \- управляет пространством файла
.SH ОБЗОР
.nf
\fB#define _GNU_SOURCE\fP             /* Смотрите feature_test_macros(7) */
\fB#include <fcntl.h>\fP

\fBint fallocate(int \fP\fIfd\fP\fB, int \fP\fImode\fP\fB, off_t \fP\fIoffset\fP\fB, off_t \fP\fIlen\fP\fB);\fP
.fi
.SH ОПИСАНИЕ
Это непереносимый системный вызов, существующий только в Linux. В POSIX.1
есть переносимый метод, обеспечивающий выделения пространства под файл
(см. \fBposix_fallocate\fP(3)).

\fBfallocate\fP() позволяет вызывающему напрямую управлять выделенным дисковым
пространством файла, на который указывает \fIfd\fP, определённого байтового
диапазона, начинающегося с \fIoffset\fP и имеющего длину \fIlen\fP байт.

В аргументе \fImode\fP задаётся операция, выполняемая над указанным
диапазоном. Детали о поддерживаемых операциях представлены в подразделах
далее.
.SS "Выделение дискового пространства"
Операция по умолчанию (т.е., значение \fImode\fP равно нулю) выделяет и
инициализирует нулями место на диске в диапазоне, задаваемом \fIoffset\fP и
\fIlen\fP. Размер файла (полученный через \fBstat\fP(2)) будет изменён, если
\fIoffset\fP+\fIlen\fP больше чем размер файла. Такое поведение по умолчанию очень
напоминает поведение библиотечной функции \fBposix_fallocate\fP(3), и служит
для оптимальной реализации этой функции.

После успешного завершения вызова последующие операции записи в диапазон,
указанный \fIoffset\fP и \fIlen\fP, гарантированно не завершатся с ошибкой из\-за
нехватки места на диске.

Если в \fImode\fP указан флаг \fBFALLOC_FL_KEEP_SIZE\fP, то поведение по умолчанию
почти то же, но размер файла не изменяется даже если \fIoffset\fP+\fIlen\fP больше
чем размер файла. Предварительное заполнение нулями блоков за концом файла
полезно для оптимизации дополнительной нагрузки.
.PP
Так как выделение выполняется кусками размером с блок, \fBfallocate\fP() может
выделить больший диапазон дискового пространства, чем было указано.
.SS "Освобождение файлового пространства"
Указание флага \fBFALLOC_FL_PUNCH_HOLE\fP flag (доступен, начиная с Linux
2.6.38) в \fImode\fP освобождает пространство (т.е., создаёт дыру) в диапазоне
начиная с \fIoffset\fP и до \fIlen\fP байт. Внутри заданного диапазона, частичные
блоки файловой системы заполняются нулями, а полные блоки файловой системы
удаляются из файла.  После успешного завершения вызова, последующие операции
чтения из этого диапазона вернут нули.

Флаг \fBFALLOC_FL_PUNCH_HOLE\fP должен быть сложен (OR) с флагом
\fBFALLOC_FL_KEEP_SIZE\fP в \fImode\fP; другими словами, даже когда пробивание
(punching) выходит за конец файла, размер файла (получаемый с помощью
\fBstat\fP(2)) остаётся неизменным.

Не все файловые системы поддерживают \fBFALLOC_FL_PUNCH_HOLE\fP; если файловая
система не поддерживает эту операцию, то возвращается ошибка.
.SH "ВОЗВРАЩАЕМОЕ ЗНАЧЕНИЕ"
При успешном выполнении функции \fBfallocate\fP() возвращается 0. В случае
ошибки возвращается \-1.
.SH ОШИБКИ
.TP 
\fBEBADF\fP
\fIfd\fP не является допустимым файловым дескриптором или не открыт на запись.
.TP 
\fBEFBIG\fP
Сумма \fIoffset\fP+\fIlen\fP превышает максимальный размер файла.
.TP 
\fBEINTR\fP
При выполнении поступил сигнал.
.TP 
\fBEINVAL\fP
.\" FIXME (raise a kernel bug) Probably the len==0 case should be
.\" a no-op, rather than an error. That would be consistent with
.\" similar APIs for the len==0 case.
.\" See "Re: [PATCH] fallocate.2: add FALLOC_FL_PUNCH_HOLE flag definition"
.\" 21 Sep 2012
.\" http://thread.gmane.org/gmane.linux.file-systems/48331/focus=1193526
\fIoffset\fP меньше 0, или \fIlen\fP меньше или равна 0.
.TP 
\fBEIO\fP
При чтении или записи в файловую систему произошла ошибка ввода\-вывода.
.TP 
\fBENODEV\fP
\fIfd\fP не указывает на обычный файл или каталог. (Если \fIfd\fP \(em канал или
FIFO, то возникнет другая ошибка.)
.TP 
\fBENOSPC\fP
Недостаточно дискового пространства на устройстве, на котором расположен
файл, указанный в \fIfd\fP.
.TP 
\fBENOSYS\fP
В данном ядре вызов \fBfallocate\fP() не реализован.
.TP 
\fBEOPNOTSUPP\fP
Файловая система с файлом, на который указывает \fIfd\fP, не поддерживает
данную операцию; или значение \fImode\fP не поддерживается файловой системой, в
которой находится файл, на который указывает \fIfd\fP.
.TP 
\fBEPERM\fP
Файл, на который ссылается \fIfd\fP, помечен как неизменяемый (immutable)
(см. \fBchattr\fP(1)). Или: в \fImode\fP указан флаг \fBFALLOC_FL_PUNCH_HOLE\fP и
файл, на который ссылается \fIfd\fP, помечена как только для добавления
(см. \fBchattr\fP(1)).
.TP 
\fBESPIPE\fP
Значение \fIfd\fP указывает на канал или FIFO.
.SH ВЕРСИИ
\fBfallocate\fP() доступен в Linux начиная с ядра 2.6.23. Поддержка в glibc
добавлена в версии 2.10.
.SH "СООТВЕТСТВИЕ СТАНДАРТАМ"
\fBfallocate\fP() есть только в Linux.
.SH "СМОТРИТЕ ТАКЖЕ"
\fBftruncate\fP(2), \fBposix_fadvise\fP(3), \fBposix_fallocate\fP(3)

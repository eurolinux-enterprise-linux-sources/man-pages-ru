.\" Copyright (C) 2003 Free Software Foundation, Inc.
.\" This file is distributed according to the GNU General Public License.
.\" See the file COPYING in the top level source directory for details.
.\"
.\" ..
.\"*******************************************************************
.\"
.\" This file was generated with po4a. Translate the source file.
.\"
.\"*******************************************************************
.TH IO_DESTROY 2 2012\-05\-08 Linux "Руководство программиста Linux"
.SH ИМЯ
io_destroy \- уничтожает асинхронный контекст ввода\-вывода
.SH ОБЗОР
.nf
\fB#include <linux/aio_abi.h>\fP          /* определяет необходимые типы */

\fBint io_destroy(aio_context_t \fP\fIctx_id\fP\fB);\fP
.fi
.SH ОПИСАНИЕ
.PP
Системный вызов \fBio_destroy\fP() удаляет асинхронный контекст ввода\-вывода,
указанный в \fIctx_id\fP, из списка контекстов ввода\-вывода и затем уничтожает
его. Также он может отменить любые невыполненные асинхронные действия
ввода\-вывода над \fIctx_id\fP и заблокировать его по завершении.
.SH "ВОЗВРАЩАЕМОЕ ЗНАЧЕНИЕ"
В случае успешного завершения \fBio_destroy\fP() возвращает 0. В случае ошибки
смотрите ЗАМЕЧАНИЯ.
.SH ОШИБКИ
.TP 
\fBEFAULT\fP
Указанный контекст некорректен.
.TP 
\fBEINVAL\fP
Некорректен контекст AIO, указанный \fIctx_id\fP.
.TP 
\fBENOSYS\fP
\fBio_destroy\fP() не реализован для этой архитектуры.
.SH ВЕРСИИ
.PP
Асинхронные системные вызовы ввода\-вывода впервые появились в Linux 2.5.
.SH "СООТВЕТСТВИЕ СТАНДАРТАМ"
.PP
Вызов \fBio_destroy\fP() есть только в Linux, и он не должно использоваться в
переносимых программах.
.SH ЗАМЕЧАНИЯ
.\" http://git.fedorahosted.org/git/?p=libaio.git
В glibc нет обёрточной функции для данного системного вызова. Вы можете
вызвать его с помощью \fBsyscall\fP(2). Но лучше воспользоваться обёрточной
функцией \fBio_destroy\fP() из библиотеки \fIlibaio\fP.

.\" But glibc is confused, since <libaio.h> uses 'io_context_t' to declare
.\" the system call.
Заметим, что в обёрточной функции \fIlibaio\fP используется другой тип
(\fIio_context_t\fP) аргумента \fIctx_id\fP. Также заметим, что \fIlibaio\fP не
следует соглашениям обычной библиотеки C для возврата ошибок: при ошибке она
возвращает отрицательный номер ошибки (из списка в разделе ОШИБКИ). Если
системный вызов вызывается с помощью \fBsyscall\fP(2), то возвращаемое значение
следует обычным соглашениям для указания на ошибку: возвращается \-1 и в
\fIerrno\fP записывается (положительное) значение возникшей ошибки.
.SH "СМОТРИТЕ ТАКЖЕ"
\fBio_cancel\fP(2), \fBio_getevents\fP(2), \fBio_setup\fP(2), \fBio_submit\fP(2),
\fBaio\fP(7)
.\" .SH AUTHOR
.\" Kent Yoder.

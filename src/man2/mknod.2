.\" Hey Emacs! This file is -*- nroff -*- source.
.\"
.\" This manpage is Copyright (C) 1992 Drew Eckhardt;
.\"                               1993 Michael Haardt
.\"                               1993,1994 Ian Jackson.
.\" You may distribute it under the terms of the GNU General
.\" Public License. It comes with NO WARRANTY.
.\"
.\" Modified 1996-08-18 by urs
.\" Modified 2003-04-23 by Michael Kerrisk
.\" Modified 2004-06-23 by Michael Kerrisk <mtk.manpages@gmail.com>
.\"
.\"*******************************************************************
.\"
.\" This file was generated with po4a. Translate the source file.
.\"
.\"*******************************************************************
.TH MKNOD 2 2010\-09\-20 Linux "Руководство программиста Linux"
.SH ИМЯ
mknod \- создает специальный или обычный файл
.SH ОБЗОР
.nf
\fB#include <sys/types.h>\fP
\fB#include <sys/stat.h>\fP
\fB#include <fcntl.h>\fP
\fB#include <unistd.h>\fP
.sp
\fBint mknod(const char *\fP\fIpathname\fP\fB, mode_t \fP\fImode\fP\fB, dev_t \fP\fIdev\fP\fB);\fP
.fi
.sp
.in -4n
Требования макроса тестирования свойств для glibc
(см. \fBfeature_test_macros\fP(7)):
.in
.sp
\fBmknod\fP():
.ad l
.RS 4
_BSD_SOURCE || _SVID_SOURCE || _XOPEN_SOURCE\ >=\ 500 || _XOPEN_SOURCE\ &&\ _XOPEN_SOURCE_EXTENDED
.RE
.ad
.SH ОПИСАНИЕ
Системный вызов \fBmknod\fP() создаёт запись (node) в файловой системе (обычный
файл, файл устройства или именованный канал) с именем \fIpathname\fP и
атрибутами, заданными в \fImode\fP и \fIdev\fP.

Аргумент \fImode\fP задает как права доступа, так и тип создаваемой записи. В
этом параметре содержится битовая комбинация (используя побитовое логическое
сложение OR) одного из нижеперечисленных типов файлов и прав доступа для
новой записи.

При изменении прав доступа учитывается значение \fIumask\fP процесса: права
доступа создаваемой записи становятся равны \fI(mode & ~umask)\fP.

.\" (S_IFSOCK since Linux 1.2.4)
Тип файла должно быть одним из: \fBS_IFREG\fP (обычный файл, создаётся пустым),
\fBS_IFCHR\fP (специальный символьный файл), \fBS_IFBLK\fP (специальный блочный
файл), \fBS_IFIFO\fP (именованный канал) или \fBS_IFSOCK\fP (доменный сокет
UNIX). Тип файла со значением 0 соответствует типу \fBS_IFREG\fP.

Если тип файла равен \fBS_IFCHR\fP или \fBS_IFBLK\fP, то в \fIdev\fP задаётся
основной и вспомогательный номера создаваемого специального файла устройства
(\fBmakedev\fP(3) может оказаться полезной при создании значения для \fIdev\fP); в
остальных случаях аргумент игнорируется.

Если \fIpathname\fP уже существует, или является символьной ссылкой, то вызов
завершается с ошибкой \fBEEXIST\fP.

Созданный файл будет принадлежать ID эффективного владельца процесса. Если в
правах доступа к каталогу, в котором находится файл, установлен бит
set\-group\-ID, или если файловая система смонтирована с семантикой групп BSD,
то новый файл унаследует группу\-владельца от своего родительского каталога;
в противном случае группой\-владельцем станет ID эффективной группы процесса.
.SH "ВОЗВРАЩАЕМОЕ ЗНАЧЕНИЕ"
При успешном выполнении функции \fBmknod\fP() возвращается 0. В случае ошибки
возвращается \-1, а \fIerrno\fP устанавливается в соответствующее значение.
.SH ОШИБКИ
.TP 
\fBEACCES\fP
У процесса нет прав на запись в родительский каталог, или в одном из
каталогов в \fIpathname\fP не разрешён поиск (см. также \fBpath_resolution\fP(7)).
.TP 
\fBEEXIST\fP
\fIpathname\fP уже существует. В этом случае \fIpathname\fP может быть символьной
ссылкой, повисшей или нет.
.TP 
\fBEFAULT\fP
Аргумент \fIpathname\fP указывает за пределы доступного адресного пространства.
.TP 
\fBEINVAL\fP
В аргументе \fImode\fP указано значение, отличное от значения для обычного
файла, специального файла устройства, FIFO или сокета.
.TP 
\fBELOOP\fP
Во время определения \fIpathname\fP встретилось слишком много символьных
ссылок.
.TP 
\fBENAMETOOLONG\fP
\fIpathname\fP слишком длинен.
.TP 
\fBENOENT\fP
Один из каталогов в \fIpathname\fP не существует или является повисшей
символьной ссылкой.
.TP 
\fBENOMEM\fP
Недостаточное количество памяти ядра.
.TP 
\fBENOSPC\fP
На устройстве, содержащем \fIpathname\fP, нет места для создания нового
элемента.
.TP 
\fBENOTDIR\fP
Компонент пути, использованный как каталог в \fIpathname\fP, в действительности
таковым не является.
.TP 
\fBEPERM\fP
.\" For UNIX domain sockets and regular files, EPERM is only returned in
.\" Linux 2.2 and earlier; in Linux 2.4 and later, unprivileged can
.\" use mknod() to make these files.
В аргументе \fImode\fP запрошено создание чего\-то, отличного от обычного файла,
специального файла устройства, FIFO (именованного канала) или доменного
сокета UNIX, и у вызвавшего процесса нет прав (Linux: не имеет мандата
\fBCAP_MKNOD\fP); также завершается, если файловая система, содержащая
\fIpathname\fP, не поддерживает тип запрашиваемой ноды.
.TP 
\fBEROFS\fP
\fIpathname\fP находится на файловой системе, доступной только для чтения.
.SH "СООТВЕТСТВИЕ СТАНДАРТАМ"
.\" The Linux version differs from the SVr4 version in that it
.\" does not require root permission to create pipes, also in that no
.\" EMULTIHOP, ENOLINK, or EINTR error is documented.
SVr4, 4.4BSD, POSIX.1\-2001 (смотрите далее).
.SH ЗАМЕЧАНИЯ
В POSIX.1\-2001 сказано: "Единственный способ, которым можно использовать
\fBmknod\fP() в переносимых программах это создание специального файла
FIFO. Если значение \fImode\fP не равно \fBS_IFIFO\fP или \fIdev\fP не равно 0, то
поведение \fBmknod\fP() не определено." Однако, в настоящее время никогда не
используйте \fBmknod\fP() для этой цели; вместо этого используйте функцию
\fBmkfifo\fP(3), которая создана специально для этого.

.\" and one should make UNIX domain sockets with socket(2) and bind(2).
В Linux этот вызов не может использоваться для создания каталогов. Для
создания каталогов есть системный вызов \fBmkdir\fP(2).

В протоколе, по которому работает NFS, содержится множество
недоработок. Некоторые из них влияют на \fBmknod\fP().
.SH "СМОТРИТЕ ТАКЖЕ"
\fBchmod\fP(2), \fBchown\fP(2), \fBfcntl\fP(2), \fBmkdir\fP(2), \fBmknodat\fP(2),
\fBmount\fP(2), \fBsocket\fP(2), \fBstat\fP(2), \fBumask\fP(2), \fBunlink\fP(2),
\fBmakedev\fP(3), \fBmkfifo\fP(3), \fBpath_resolution\fP(7)

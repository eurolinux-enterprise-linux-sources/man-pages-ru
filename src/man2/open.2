.\" Hey Emacs! This file is -*- nroff -*- source.
.\"
.\" This manpage is Copyright (C) 1992 Drew Eckhardt;
.\"                               1993 Michael Haardt, Ian Jackson.
.\"
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one
.\" 
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\" 
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.

.\"
.\" Modified Wed Jul 21 22:42:16 1993 by Rik Faith (faith@cs.unc.edu)
.\" Modified Sun Aug 21 18:18:14 1994: Michael Haardt's NFS diffs were
.\"          applied by hand (faith@cs.unc.edu).
.\" Modified Sat Apr 13 16:25:28 1996 by Andries Brouwer (aeb@cwi.nl)
.\" Modified Mon May 13 00:53:52 1996: added symbolic constants
.\"          as sent by Thomas Koenig
.\" Modified Fri Dec 20 16:06:45 1996 by Michael Haardt: More NFS details
.\" Modified Fri Feb 19 15:08:34 1999 by Andries Brouwer (aeb@cwi.nl)
.\" Modified 981128 by Joseph S. Myers <jsm28@hermes.cam.ac.uk>
.\" Modified Thu Jun  3 19:29:06 1999 by Michael Haardt: NFS lock optimisation
.TH OPEN 2 "June 3, 1999" "Linux" "Системные вызовы"
.SH НАЗВАНИЕ
open, creat \-\- открыть и, вероятно, создать файл или устройство
.SH КРАТКАЯ СВОДКА
.nf
.B #include <sys/types.h>
.B #include <sys/stat.h>
.B #include <fcntl.h>
.sp
.BI "int open(const char *" pathname ", int " flags );
.BI "int open(const char *" pathname ", int " flags ", mode_t " mode );
.BI "int creat(const char *" pathname ", mode_t " mode );
.fi
.SH ОПИСАНИЕ
Системный вызов
.B open
превращает имя файла в дескриптор файла (небольшое неотрицательное
число, используемое при последующем вводе-выводе, например, с 
.BR read ", " write ",  и т. п."
Если системный вызов завершается успешно, возвращенный файловый
дескриптор является самым маленьким дескриптором, который еще не
открыт процессом.  В результате этого вызова появляется новый открытый 
файл, не разделяемый ни с каким процессом (разделяемые открытые файлы
могут возникнуть в результате системного вызова
.BR fork (2).
Новый файловый дескриптор будет оставаться открытым при выполнении
функции
.BR exec (2)
(смотри описание
.BR fcntl (2)).
Указатель в файле устанавливается в начало.

Параметр
.IR flags "\~--"
это 
.BR O_RDONLY ", " O_WRONLY " или " O_RDWR ","
задающие, соответственно, открытие файла только для чтения, только для 
записи и для чтения и записи, которые можно комбинировать с помощью
логического ИЛИ с нулем или более нижеследующих флагов:
.TP 0.8i
.B O_CREAT
Если файл не существует, то он будет создан.
Владелец (uid) файла устанавливается в фактический идентификатор
владельца процесса.  Группа (gid) устанавливается либо в фактический
идентификатор группы процесса или же в идентификатор группы
родительского каталога (зависит от типа файловой системы и флагов
программы mount, а также прав доступа к родительскому каталогу.  См.,
например, флаги
.I bsdgroups
и
.I sysvgroups
в файловой системе ext2, которые описаны в
.BR mount (8)).
.TP
.B O_EXCL
Если используется совместно с 
.BR O_CREAT ,
то если файл уже существует, то
.B open
завершится с ошибкой.  В этом контексте символьная ссылка существует,
независимо от того, куда она указывает.
.B O_EXCL
не работает на файловых системах NFS, а в программах, полагающихся на
этот флаг для реализации блокировки, возникнет race condition.
Решение для атомарной блокировки с помощью файла: создать файл с
уникальным именем на той же самой файловой системе (это имя может
содержать, например, имя машины и идентификатор процесса),
использовать
.BR link (2),
чтобы создать ссылку на файл блокировки.  Если \fBlink()\fP возвращает
0, значит, блокировка была успешной. В противном случае используйте
.BR stat (2),
чтобы убедиться, что количество ссылок на уникальный файл возросло до
двух, что опять означает, что блокировка была успешной.
.TP
.B O_NOCTTY
Если
.I pathname
ссылается на терминальное устройство \(em см.
.BR tty (4),
\(em то оно не станет контролирующим терминалом процесса, даже если у
этого процесса нет такового.
.TP
.B O_TRUNC
Если файл уже существует, является обычным файлом, а режим открытия
позволяет запись (то бишь это O_RDWR или O_WRONLY), то он будет
обрезан до нулевой длины.
Если файл является FIFO или устройством терминала, то флаг O_TRUNC
игнорируется.  В противном случае действие O_TRUNC не описано.  (На
многих версиях Linux этот флаг будет игнорирован; на других версиях
будет возвращена ошибка.)
.TP
.B O_APPEND
Файл открывается в режиме добавления.  Перед каждым
.BR write ,
файловый указатель перемещается в конец файла, как если бы
использовался
.BR lseek .
.B O_APPEND
может привести к повреждению файлов на файловой системе NFS, если
несколько процессов одновременно добавляют данные в один файл.  Это
происходит из-за того, что NFS не поддерживает добавление в файл,
поэтому ядро на машине-клиенте должно эмулировать эту поддержку, что
не может быть выполнено без race condition.
.TP
.BR O_NONBLOCK " или " O_NDELAY
Если возможно, то файл открывается в неблокирующем режиме. Ни
.BR open ,
ни другие последующие операции над возвращенным дескриптором файла не
заставят вызывающий процесс ждать.  Работа с каналами FIFO также
описана в
.BR fifo (4).
Этот режим не обязан как-либо действовать на файлы, не являющиеся
FIFO.
.TP
.B O_SYNC
Файл открывается в режиме синхронного ввода-вывода.  Все вызовы
.BR write
для соответствующего дескриптора файла блокируют вызывающий процесс до 
тех пор, пока данные не будут физически записаны оборудованием, на
котором находится файл.  
.I Однако же, смотри в разделе ОГРАНИЧЕНИЯ.
.TP
.B O_NOFOLLOW
Если \fIpathname\fR -- это символическая ссылка, то
.B open
завершается с кодом ошибки.  Это расширение из FreeBSD, которое было
добавлено в Linux в версии 2.1.126.  Все прочие символические ссылки
в имени будут обработаны как обычно.  Заголовочные файлы из glibc
2.0.100 и позже содержат определение этого флага; \fIядра с версиями
меньше, чем 2.1.126, игнорируют этот флаг\fR.
.TP
.B O_DIRECTORY
Если \fIpathname\fR не является каталогом, то
.B open
завершится с кодом ошибки.  Этот флаг используется только в Linux, и
был добавлен в ядре 2.1.126, чтобы избежать проблем с атаками типа
"отказ обслуживания", если 
.BR opendir (2)
был вызван с каналом FIFO или ленточным устройством.  Этот флаг не
следует использовать вне реализации
.BR opendir .
.TP
.B O_LARGEFILE
На 32-битных системах, поддерживающих Большие Файловые Системы, этот
флаг позволяет открывать файлы, длина которых не помещается в 31 бит.
.PP
Некоторые из вышеописанных флагов могут быть изменены после открытия
файла с помощью
.BR fctnl .

Аргумент
.I mode
задает права доступа, которые используются в случае создания нового файла.
Они модифицируются обычным способом, используя
.B umask
процесса:  права доступа свежесозданного файла равны
.BR "(mode & ~umask)" .
Заметьте, что этот режим доступа относится только к последующим
обращениям к свежесозданному файлу; системный вызов
.BR open ,
который создает новый файл только для чтения, вполне может вернуть
файловый дескриптор для чтения/записи.
.PP
Нижеследующие символические константы можно использовать в
.IR mode :
.TP
.B S_IRWXU
00700 пользователь (владелец файла) имеет права чтения, записи и
выполнения.
.TP
.B S_IRUSR (S_IREAD)
00400 пользователь имеет право чтения
.TP
.B S_IWUSR (S_IWRITE)
00200 пользователь имеет право записи
.TP
.B S_IXUSR (S_IEXEC)
00100 пользователь имеет право выполнения
.TP
.B S_IRWXG
00070 группа имеет права чтения, записи и выполнения
.TP
.B S_IRGRP
00040 группа имеет право чтения
.TP
.B S_IWGRP
00020 группа имеет право записи
.TP
.B S_IXGRP
00010 группа имеет право выполнения
.TP
.B S_IRWXO
00007 все остальные имеют права чтения, записи и выполнения
.TP
.B S_IROTH
00004 все остальные имеют право чтения
.TP
.B S_IWOTH
00002 все остальные имеют право записи
.TP
.B S_IXOTH
00001 все остальные имеют право выполнения
.PP
.I mode
всегда должен быть указан при использовании
.BR O_CREAT ,
во всех остальных случаях этот параметр игнорируется.

.B creat
эквивалентен
.B open
с 
.IR flags ,
равными 
.BR "O_CREAT | O_WRONLY | O_TRUNC" .
.SH "ВОЗВРАЩАЕМОЕ ЗНАЧЕНИЕ"
.BR open " и " creat
возвращают новый дескриптор файла, или \-1, если произошла ошибка (в
этом случае
.I errno
устанавливается должным образом). Заметьте, что
.B open
может открывать файлы устройств, но
.B creat
не может создавать их -- используйте для этого
.BR mknod (2).
.LP
На файловых системах NFS с включенным преобразованием идентификаторов
пользователей
.B open
может вернуть файловый дескриптор, но, например,
.BR read (2)
вернет ошибку
.BR EACCES .
Это из-за того, что клиент выполняет
.BR open ,
проверяя права доступа, но преобразование идентификаторов производится 
сервером при запросах на чтение и запись.

Если файл только что создан, его atime, ctime и mtime, а также ctime и
mtime родительского каталога, установлены в текущее время,
В противном случае если файл модифицирован из-за флага O_TRUNC, его
поля ctime и mtime устанавливаются в текущее время.
.SH ОШИБКИ
.TP 0.8i
.B EEXIST
.I pathname
уже существует, и были использованы
.BR O_CREAT " и " O_EXCL .
.TP
.B EISDIR
.I pathname
ссылается на каталог, а тип доступа подразумевает запись.
.TP
.B EACCES
Запрошенный доступ к файлу не разрешен, или же один из каталогов в
.I pathname
не позволяет поиск (выполнение), или же файл еще не существует, а
доступ для записи в родительский каталог не разрешен.
error_ENAMETOOLONG(pathname)
error_ENOENT(pathname)
.TP
.B ENOTDIR
Компонент, использованный как каталог в
.IR pathname ,
таковым не является, или был указан флаг
.BR O_DIRECTORY ,
а
.I pathname
не является каталогом.
.TP
.B ENXIO
Установлены
.BR "O_NONBLOCK | O_WRONLY" ,
файл является каналом FIFO, но нет процессов, которые открыли этот
канал для чтения.  Возможно также, что файл является файлом
устройства, но соответствующее устройство не установлено.
.TP
.B ENODEV
.I pathname
ссылается на файл устройства, но соответствующего устройства не
существует.
(Это ошибка в ядре Linux: должен возвращаться ENXIO.)
.TP
.B EROFS
.I pathname
ссылается на файл, находящийся на файловой системе, смонтированной
только для чтения, и был запрошен доступ для записи.
.TP
.B ETXTBSY
.I pathname
ссылается на исполняемый файл, который в настоящее время исполняется,
и был запрошен доступ для записи.
error_EFAULT(pathname)
.TP
.B ELOOP
Слишком много символических ссылок было пройдено при обнаружении
.IR pathname ,
или был указан флаг
.BR O_NOFOLLOW ,
а 
.I pathname
является символической ссылкой.
.TP
.B ENOSPC
.I pathname
нужно было создать на устройстве, на котором не было места для нового
файла.
error_ENOMEM
.TP
.B EMFILE
Процесс уже открыл максимально допустимое количество файлов.
.TP
.B ENFILE
Достигнут предел на максимальное общее количество файлов, открытых в
системе.
.SH "СООТВЕТСТВИЕ СТАНДАРТАМ"
SVr4, SVID, POSIX, X/OPEN, BSD 4.3
Флаги
.B O_NOFOLLOW
и
.B O_DIRECTORY
специфичны для Linux.  Для того, чтобы получить их определение, может
потребоваться определить (через #define) символ
.BR _GNU_SOURCE .
.SH ОГРАНИЧЕНИЯ
В протоколе, на котором работает NFS, существует множество
недоработок, в числе прочего, оказывающих влияние на
.BR O_SYNC " и " O_NDELAY .

POSIX предоставляет три разных варианта синхронного ввода-вывода,
соответствующего флагам
.BR O_SYNC ", " O_DSYNC " и " O_RSYNC .
В настоящее время (версия 2.1.130), все они являются синонимами под
Linux.
.SH "СМОТРИ ТАКЖЕ"
.BR read (2),
.BR write (2),
.BR fcntl (2),
.BR close (2),
.BR link (2),
.BR mknod (2),
.BR mount (2),
.BR stat (2),
.BR umask (2),
.BR unlink (2),
.BR socket (2),
.BR fopen (3),
.BR fifo (4)
.SH ПЕРЕВОД
Copyright (C) Alexey Mahotkin <alexm@hsys.msk.ru> 1999-2001

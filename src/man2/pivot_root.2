.\" Copyright (C) 2000 by Werner Almesberger
.\" May be distributed under GPL
.\"
.\" Written 2000-02-23 by Werner Almesberger
.\" Modified 2004-06-17 Michael Kerrisk <mtk.manpages@gmail.com>
.\"
.\"*******************************************************************
.\"
.\" This file was generated with po4a. Translate the source file.
.\"
.\"*******************************************************************
.TH PIVOT_ROOT 2 2007\-06\-01 Linux "Руководство программиста Linux"
.SH ИМЯ
pivot_root \- изменяет корневую файловую систему
.SH ОБЗОР
\fBint pivot_root(const char *\fP\fInew_root\fP\fB, const char *\fP\fIput_old\fP\fB);\fP
.SH ОПИСАНИЕ
.\"
.\" The
.\" .B CAP_SYS_ADMIN
.\" capability is required.
Вызов \fBpivot_root\fP() перемещает корневую систему вызывающего процесса в
каталог \fIput_old\fP и делает каталог \fInew_root\fP новой корневой файловой
системой у вызывающего процесса.

Обычно, \fBpivot_root\fP() используется при загрузке, когда система монтирует
временную корневую файловую систему (например, \fBinitrd\fP), а затем монтирует
настоящую корневую файловую систему, делая, тем самым, её корневой для всех
последующих процессов или нитей.

Вызов \fBpivot_root\fP() может изменить (или не изменить) текущий корневой и
текущий рабочий каталоги во всех процессах или нитях, использующих старый
корневой каталог. Вызывающий \fBpivot_root\fP() должен быть уверен в том, что
процессы у которых корневой или текущий рабочий каталог равен старому
корневому каталогу, работают нормально в каждом случае. Самый простой способ
достичь этого \(em сменить их корневой и текущий рабочий каталог на
\fInew_root\fP до вызова \fBpivot_root\fP().

Содержимое предыдущего абзаца, на самом деле, является не совсем
определённым, потому что реализация \fBpivot_root\fP() может измениться в
будущем. На момент написания этого документа \fBpivot_root\fP() изменяет
корневой и текущий рабочий каталоги каждого процесса или нити на
\fInew_root\fP, если они указывают на старый корневой каталог. Это необходимо
для того, чтобы нити ядра не занимали старый корневой и текущий рабочий
каталог, даже если они вообще не обращались к файловой системе. В будущем,
возможно, будет создан механизм, заставляющий нити ядра отказаться от
доступа к файловой системе, что позволит удалить этот довольно навязчивый
механизм из \fBpivot_root\fP().

Заметим, что всё это относится и к вызывающему процессу: \fBpivot_root\fP()
может изменить (а может и не изменить) его текущий рабочий каталог. По этой
причине рекомендуется вызывать \fBchdir("/")\fP сразу после вызова
\fBpivot_root\fP().

На значения \fInew_root\fP и \fIput_old\fP накладываются следующие ограничения:
.IP \- 3
Они должны быть каталогами.
.IP \- 3
Аргументы \fInew_root\fP и \fIput_old\fP не могут быть в одной файловой системе с
текущим корневым каталогом.
.IP \- 3
Аргумент \fIput_old\fP должен быть в дереве каталогов \fInew_root\fP, т.е., путём
добавления ненулевого количества \fI/..\fP в строке, на которую указывает
\fIput_old\fP, можно получить каталог, равный \fInew_root\fP.
.IP \- 3
К \fIput_old\fP не должны быть подключены файловые системы.
.PP
См. также страницу \fBpivot_root\fP(8), в которой приведены примеры возможного
использования.

Если текущий корневой каталог не является точкой монтирования (например,
после \fBchroot\fP(2) или \fBpivot_root\fP(), см. ниже), то к \fIput_old\fP
подключается не старый корневой каталог, а точка монтирования этой файловой
системы.

Аргумент \fInew_root\fP может и не быть точкой монтирования. В этом случае в
\fI/proc/mounts\fP будет указана точка монтирования файловой системы,
содержащей новый \fInew_root\fP как корневой каталог (\fI/\fP).
.SH "ВОЗВРАЩАЕМОЕ ЗНАЧЕНИЕ"
При успешном выполнении возвращается 0. В случае ошибки возвращается \-1, а
\fIerrno\fP устанавливается в соответствующее значение.
.SH ОШИБКИ
Вызов \fBpivot_root\fP() может возвращать (в \fIerrno\fP) любые ошибки, которые
возвращаются \fBstat\fP(2). Также он может вернуть:
.TP 
\fBEBUSY\fP
Аргумент \fInew_root\fP или \fIput_old\fP находится в текущей корневой файловой
системе, или какая\-то файловая система уже смонтирована в \fIput_old\fP.
.TP 
\fBEINVAL\fP
Аргумент \fIput_old\fP не находится в дереве каталогов \fInew_root\fP.
.TP 
\fBENOTDIR\fP
Аргумент \fInew_root\fP или \fIput_old\fP не является каталогом.
.TP 
\fBEPERM\fP
Вызывающий процесс не имеет мандата \fBCAP_SYS_ADMIN\fP.
.SH ВЕРСИИ
Вызов \fBpivot_root\fP() появился в Linux 2.3.41.
.SH "СООТВЕТСТВИЕ СТАНДАРТАМ"
Вызов \fBpivot_root\fP() есть только в Linux и поэтому его использование не
переносимо.
.SH ЗАМЕЧАНИЯ
В glibc нет обёртки для данного системного вызова; запускайте его с помощью
\fBsyscall\fP(2).
.SH ДЕФЕКТЫ
Вызов \fBpivot_root\fP() не должен изменять корневой и рабочий каталоги других
процессов в системе.

Некорректное использование \fBpivot_root\fP() может привести к непредсказуемым
последствиям.
.SH "СМОТРИТЕ ТАКЖЕ"
\fBchdir\fP(2), \fBchroot\fP(2), \fBstat\fP(2), \fBinitrd\fP(4), \fBpivot_root\fP(8)

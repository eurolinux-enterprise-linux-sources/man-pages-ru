.\" Hey Emacs! This file is -*- nroff -*- source.
.\"
.\" This manpage is Copyright (C) 1992 Drew Eckhardt;
.\"                               1993 Michael Haardt, Ian Jackson.
.\"
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\"
.\" Modified Sat Jul 24 00:06:00 1993 by Rik Faith <faith@cs.unc.edu>
.\" Modified Wed Jan 17 16:02:32 1996 by Michael Haardt
.\"   <michael@cantor.informatik.rwth-aachen.de>
.\" Modified Thu Apr 11 19:26:35 1996 by Andries Brouwer <aeb@cwi.nl>
.\" Modified Sun Jul 21 18:59:33 1996 by Andries Brouwer <aeb@cwi.nl>
.\" Modified Fri Jan 31 16:47:33 1997 by Eric S. Raymond <esr@thyrsus.com>
.\" Modified Sat Jul 12 20:45:39 1997 by Michael Haardt
.\"   <michael@cantor.informatik.rwth-aachen.de>
.\"
.\"*******************************************************************
.\"
.\" This file was generated with po4a. Translate the source file.
.\"
.\"*******************************************************************
.TH READ 2 2009\-02\-23 Linux "Руководство программиста Linux"
.SH ИМЯ
read \- читает из файлового дескриптора
.SH ОБЗОР
.nf
\fB#include <unistd.h>\fP
.sp
\fBssize_t read(int \fP\fIfd\fP\fB, void *\fP\fIbuf\fP\fB, size_t \fP\fIcount\fP\fB);\fP
.fi
.SH ОПИСАНИЕ
\fBread\fP() пытается прочитать \fIcount\fP байт из файлового дескриптора \fIfd\fP в
буфер, начинающийся по адресу \fIbuf\fP.
.PP
Если значение \fIcount\fP равно нулю, то \fBread\fP() возвращает ноль и ничего не
делает. Если\fIcount\fP больше чем \fBSSIZE_MAX\fP, то результат не определён.
.SH "ВОЗВРАЩАЕМОЕ ЗНАЧЕНИЕ"
При успешном выполнении возвращается количество прочитанных байт (ноль
означает конец файла), а позиция в файле увеличивается на это значение. Если
количество прочитанных байт меньше, чем количество запрошенных, то это не
считается ошибкой: например, это могло произойти из\-за того, что прямо
сейчас доступно меньшее количество байт (может быть из\-за того, что позиция
ближе к концу файла, или потому что выполняется чтение из канала или
терминала), или потому что работа \fBread\fP() была прервана сигналом. В случае
ошибки возвращается \-1, а \fIerrno\fP устанавливается в соответствующее
значение. В этом случае изменение позиции файла остаётся неопределённым
(если это вообще происходило).
.SH ОШИБКИ
.TP 
\fBEAGAIN\fP
Файловый дескриптор \fIfd\fP указывает на файл, не являющийся сокетом и который
помечен как неблокирующий (\fBO_NONBLOCK\fP), а чтение вызвало бы блокировку.
.TP 
\fBEAGAIN\fP или \fBEWOULDBLOCK\fP
.\" Actually EAGAIN on Linux
Файловый дескриптор \fIfd\fP указывает на сокет и он помечен как неблокирующий
(\fBO_NONBLOCK\fP), а чтение вызвало бы блокировку. POSIX.1\-2001 позволяет
вернуть любую ошибку в этом случае и не требует, чтобы эти константы имели
одинаковое значение, поэтому переносимое приложение должно проверять обе эти
возможности.
.TP 
\fBEBADF\fP
\fIfd\fP не является допустимым файловым дескриптором или не открыт на чтение.
.TP 
\fBEFAULT\fP
\fIbuf\fP находится за пределами доступного вам адресного пространства.
.TP 
\fBEINTR\fP
Вызов был прерван сигналом до того как были прочитаны данные;
см. \fBsignal\fP(7).
.TP 
\fBEINVAL\fP
\fIfd\fP связан с объектом, не приспособленным для чтения; илифайл был открыт с
использованием флага \fBO_DIRECT\fP, и адрес, указанный в \fIbuf\fP, значение,
указанное в \fIcount\fP или текущее смещение в файле, имеет недопустимое
выравнивание.
.TP 
\fBEINVAL\fP
\fIfd\fP был создан вызовом \fBtimerfd_create\fP(2), а в \fBread\fP() был передан
неверный размер буфера; подробней см. в \fBtimerfd_create\fP(2).
.TP 
\fBEIO\fP
Ошибка ввода/вывода. Например, это происходит когда процесс, находящийся в
фоновой группе процессов, пытается выполнить чтение из своего управляющего
tty, и игнорирует или блокирует сигнал \fBSIGTTIN\fP или же его группа
процессов осталась без родителя. Это также может случиться, если произошла
низкоуровневая ошибка ввода\-вывода при чтения с диска или ленты.
.TP 
\fBEISDIR\fP
\fIfd\fP указывает на каталог.
.PP
Могут также возникнуть другие ошибки, в зависимости от объекта, связанного с
\fIfd\fP. POSIX позволяет системному вызову \fBread\fP(), который был прерван
после чтения первого куска запрошенных данных, возвращать \-1 (с \fIerrno\fP,
установленной в \fBEINTR\fP) или количество уже прочитанных байт.
.SH "СООТВЕТСТВИЕ СТАНДАРТАМ"
SVr4, 4.3BSD, POSIX.1\-2001.
.SH ЗАМЕЧАНИЯ
На файловых системах NFS чтение небольших порций данных обновляет отметки
времени только в первый раз, последующие вызовы не делают этого. Это вызвано
кэшированием атрибутов с клиентской стороны, потому что большинство (если не
все) клиентов NFS предоставляют серверу обновлять st_atime (время последнего
доступа), а запросы на чтение, которые удовлетворяются из клиентского кэша,
не вызывают обновления st_atime, потому что данные не читаются с
сервера. Семантика UNIX может быть достигнута запретом кэширования атрибутов
на стороне клиента, но в большинстве случаев это увеличит нагрузку на сервер
и снизит производительность.
.PP
Многие файловые системы и диски рассматриваются как достаточно быстрые и
реализацию \fBO_NONBLOCK\fP считают ненужной. Поэтому \fBO_NONBLOCK\fP может быть
недоступен на файлах и/или дисках.
.SH "СМОТРИТЕ ТАКЖЕ"
\fBclose\fP(2), \fBfcntl\fP(2), \fBioctl\fP(2), \fBlseek\fP(2), \fBopen\fP(2), \fBpread\fP(2),
\fBreaddir\fP(2), \fBreadlink\fP(2), \fBreadv\fP(2), \fBselect\fP(2), \fBwrite\fP(2),
\fBfread\fP(3)

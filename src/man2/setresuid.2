.\" Hey Emacs! This file is -*- nroff -*- source.
.\"
.\" Copyright (C) 1997 Andries Brouwer (aeb@cwi.nl)
.\"
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\"
.\" Modified, 2003-05-26, Michael Kerrisk, <mtk.manpages@gmail.com>
.\"*******************************************************************
.\"
.\" This file was generated with po4a. Translate the source file.
.\"
.\"*******************************************************************
.TH SETRESUID 2 2010\-11\-22 Linux "Руководство программиста Linux"
.SH ИМЯ
setresuid, setresgid \- устанавливает  реальный, эффективный и сохранённый
пользовательский идентификатор или идентификатор группы
.SH ОБЗОР
\fB#define _GNU_SOURCE\fP /* смотрите feature_test_macros(7) */
.br
\fB#include <unistd.h>\fP
.sp
\fBint setresuid(uid_t \fP\fIruid\fP\fB, uid_t \fP\fIeuid\fP\fB, uid_t \fP\fIsuid\fP\fB);\fP
.br
\fBint setresgid(gid_t \fP\fIrgid\fP\fB, gid_t \fP\fIegid\fP\fB, gid_t \fP\fIsgid\fP\fB);\fP
.SH ОПИСАНИЕ
Вызов \fBsetresuid\fP() устанавливает реальный идентификатор пользователя,
эффективный идентификатор пользователя и сохранённый идентификатор
пользователя вызывающего процесса.

Непривилегированные пользовательские процессы могут изменять реальный
идентификатор пользователя, эффективный идентификатор пользователя и
сохранённый идентификатор пользователя на соответственно текущий реальный
идентификатор пользователя, текущий  эффективный идентификатор пользователя
и текущий  сохранённый идентификатор пользователя.

Привилегированные процессы (в Linux: имеющие мандат \fBCAP_SETUID\fP) могут
устанавливать произвольные значения для реального, эффективного и
сохранённого идентификатора пользователя.

Если один из параметров равен \-1, то соответствующее ему значение не
изменяется.

Независимо от того, как изменились реальный UID, эффективный UID и
сохранённый UID идентификатор в файловой системе всегда устанавливается
равным значению (возможно новому) эффективного UID.

Аналогично, \fBsetresgid\fP() устанавливает реальный GID, эффективный GID, и
сохранённый GID вызывающего процесса (и всегда изменяет GID в файловой
системе на значение эффективного GID) с теми же ограничениями для
непривилегированных процессов.
.SH "ВОЗВРАЩАЕМОЕ ЗНАЧЕНИЕ"
При успешном выполнении возвращается 0. В случае ошибки возвращается \-1, а
\fIerrno\fP устанавливается в соответствующее значение.
.SH ОШИБКИ
.TP 
\fBEAGAIN\fP
\fIuid\fP не совпадает с текущим UID и этот вызов привёл бы к выходу за пределы
ресурса \fBRLIMIT_NPROC\fP значения пользовательского ID.
.TP 
\fBEPERM\fP
Вызывающий процесс не является привилегированным (не имеет мандата
\fBCAP_SETUID\fP) и пытается изменить значения идентификаторов, что запрещено.
.SH ВЕРСИИ
Данные вызовы доступны в Linux начиная с версии 2.1.44.
.SH "СООТВЕТСТВИЕ СТАНДАРТАМ"
Это нестандартные вызовы; также они есть в HP\-UX и некоторых BSD.
.SH ЗАМЕЧАНИЯ
В HP\-UX и FreeBSD прототип находится в \fI<unistd.h>\fP. В Linux
прототип задан в glibc, начиная с версии 2.3.2.

Первоначальные версии системных вызовов \fBsetresuid\fP() и \fBsetresgid\fP() в
Linux поддерживали только 16\-битные идентификаторы пользователей и
групп. Позднее в Linux 2.4 были добавлены вызовы \fBsetresuid32\fP() и
\fBsetresgid32\fP(), поддерживающие 32\-битные идентификаторы. В glibc
обёрточные функции \fBsetresuid\fP() и \fBsetresgid\fP() работают одинаково вне
зависимости от версий ядра.
.SH "СМОТРИТЕ ТАКЖЕ"
\fBgetresuid\fP(2), \fBgetuid\fP(2), \fBsetfsgid\fP(2), \fBsetfsuid\fP(2),
\fBsetreuid\fP(2), \fBsetuid\fP(2), \fBcapabilities\fP(7), \fBcredentials\fP(7)

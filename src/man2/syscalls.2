.\" Copyright (C) 2007 Michael Kerrisk <mtk.manpages@gmail.com>
.\" with some input from Stepan Kasal <kasal@ucw.cz>
.\"
.\" Some content retained from an earlier version of this page:
.\" Copyright (C) 1998 Andries Brouwer (aeb@cwi.nl)
.\" Modifications for 2.2 and 2.4 Copyright (C) 2002 Ian Redfern
.\" <redferni@logica.com>
.\"
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\"
.\"*******************************************************************
.\"
.\" This file was generated with po4a. Translate the source file.
.\"
.\"*******************************************************************
.TH SYSCALLS 2 2012\-03\-23 Linux "Руководство программиста Linux"
.SH ИМЯ
syscalls \- системные вызовы Linux
.SH ОБЗОР
Системные вызовы Linux.
.SH ОПИСАНИЕ
Системный вызов \(em это основной интерфейс между приложением и ядром Linux.
.SS "Системные вызовы и обёрточные библиотечные функции"
Обычно, системные вызовы не вызываются напрямую, это делается через
обёрточную функцию из glibc (или другой библиотеки). Подробней о
непосредственном вызове системного вызова, см. \fBintro\fP(2). Часто, но не
всегда, имя обёрточной функции совпадает с именем системного вызова, который
она осуществляет. Например, в glibc есть функция \fBtruncate\fP(), которая
осуществляет делающий всё работу системный вызов "truncate".

Часто, обёрточная функция glibc очень маленькая, она просто копирует
аргументы в нужные регистры перед запуском системного вызова, а затем
присваивает переменной \fIerrno\fP значение, которое было возвращено системным
вызовом. (Эти те же шаги выполняет \fBsyscall\fP(2), её можно использовать для
осуществления системных вызовов, для которых нет обёрточных функций.)
Замечание: системные вызовы указывают, что произошла ошибка возвращая
отрицательное целое число вызывающей стороне; когда это происходит,
обёрточная функция меняет знак у возвращённого значения (на положительный),
копирует его в \fIerrno\fP и возвращает \-1 вызвавшей обёртку функции.

Иногда, однако, обёрточная функция производит дополнительную работу до
осуществления системного вызова. Например, в настоящее время существует (по
причинам, описанным далее) два похожих системных вызова \(em \fBtruncate\fP(2)
и \fBtruncate64\fP(2); обёрточная функция glibc \fBtruncate\fP() проверяет какой
из системных вызовов предоставляет ядро и решает какой нужно задействовать.
.SS "Список системных вызовов"
Далее приведён список список системных вызовов, присутствующих на
большинстве платформ. В колонке \fIЯдро\fP указана версия ядра для системных
вызовов, которые появились в Linux 2.2, и с какой именно версии. Также
заметим следующее:
.IP * 3
Если версия ядра не указана, то системный вызов появился в ядре 1.0 или
более раннем.
.IP *
Системные вызовы, помеченные "1.2", скорее всего появились в в версиях ядра
1.1.x, и впервые появились в стабильном ядре 1.2. (Разработка ядра 1.2
началась с ответвления от ядра 1.0.6 и прошла несколько выпусков ядер
1.1.x.)
.IP *
.\" Was kernel 2.0 started from a branch of 1.2.10?
.\" At least from the timestamps of the tarballs of
.\" of 1.2.10 and 1.3.0, that's how it looks, but in
.\" fact the diff doesn't seem very clear, the
.\" 1.3.0 .tar.bz is much bigger (2.0 MB) than the
.\" 1.2.10 .tar.bz2 (1.8 MB), and AEB points out the
.\" timestamps of some files in 1.3.0 seem to be older
.\" than those in 1.2.10.  All of this suggests
.\" that there might not have been a clean branch point.
Системные вызовы, помеченные "1.2", скорее всего появились в в версиях ядра
1.3.x, и впервые появились в стабильном ядре 2.0. (Разработка ядра 2.0
началась с ответвления от ядра 1.2.x, начиная, приблизительно, с 1.2.10, и
прошла несколько выпусков ядер 1.3.x.)
.IP *
Системные вызовы, помеченные "2.2", скорее всего появились в в версиях ядра
2.1.x, и впервые появились в стабильном ядре 2.2.0. (Разработка ядра 2.2
началась с ответвления от ядра 2.0.21, и прошла несколько выпусков ядер
2.1.x.)
.IP *
Системные вызовы, помеченные "2.4", скорее всего появились в в версиях ядра
2.3.x, и впервые появились в стабильном ядре 2.4.0. (Разработка ядра 2.4
началась с ответвления от ядра 2.2.8, и прошла несколько выпусков ядер
2.3.x.)
.IP *
Системные вызовы, помеченные "2.6", скорее всего появились в в версиях ядра
2.5.x, и впервые появились в стабильном ядре 2.6.0. (Разработка ядра 2.6
началась с ответвления от ядра 2.4.15, и прошла несколько выпусков ядер
2.5.x.)
.IP *
Начиная с ядра 2.6.0 порядок разработки был изменён, и новые системные
вызовы могут появляться в каждом выпуске 2.6.x. В этом случае для системного
вызова указан точный номер версии. 2.6.39. Это соглашение продолжает
действовать и в ядрах серии 3.x, которая началась после ядра версии 2.6.39.
.IP *
Иногда системный вызов, добавленный в текущую на тот момент стабильную ветвь
ядра, переносился в предыдущие стабильные ветви ядра. Например, некоторые
системные вызовы, которые появились в в 2.6.x были перенесены и в выпуски
2.4.x, начиная с 2.4.15. Если это производилось, будут показаны основные
версии обеих ветвей ядра.
.PP
.\"
.\" Looking at scripts/checksyscalls.sh in the kernel source is
.\" instructive about i386 specifics.
.\"
Список системных вызовов, доступных в ядре версии 3.1 (или, в некоторых
случаях, только в более старых ядрах):
.ad l
.TS
l l l
---
l l l.
\fBСистемный вызов\fP	\fBЯдро\fP	\fBПримечания\fP

\fB_llseek\fP(2)	1.2
\fB_newselect\fP(2)
\fB_sysctl\fP(2)
\fBaccept\fP(2)
\fBaccept4\fP(2)	2.6.28
\fBaccess\fP(2)
\fBacct\fP(2)
\fBadd_key\fP(2)	2.6.11
\fBadjtimex\fP(2)
\fBalarm\fP(2)
\fBalloc_hugepages\fP(2)	2.5.36	удалён в 2.5.44
\fBbdflush\fP(2)		T{
устарел (ничего не делает) начиная с 2.6
T}
\fBbind\fP(2)
\fBbrk\fP(2)
\fBcacheflush\fP(2)	1.2	не для i386
\fBcapget\fP(2)	2.2
\fBcapset\fP(2)	2.2
\fBchdir\fP(2)
\fBchmod\fP(2)
\fBchown\fP(2)
\fBchown32\fP(2)	2.4
\fBchroot\fP(2)
\fBclock_adjtime\fP(2)	2.6.39
\fBclock_getres\fP(2)	2.6
\fBclock_gettime\fP(2)	2.6
\fBclock_nanosleep\fP(2)	2.6
\fBclock_settime\fP(2)	2.6
\fBclone\fP(2)
\fBclose\fP(2)
\fBconnect\fP(2)
\fBcreat\fP(2)
\fBcreate_module\fP(2)		удалён в 2.6
\fBdelete_module\fP(2)
\fBdup\fP(2)
\fBdup2\fP(2)
\fBdup3\fP(2)	2.6.27
\fBepoll_create\fP(2)	2.6
\fBepoll_create1\fP(2)	2.6.27
\fBepoll_ctl\fP(2)	2.6
\fBepoll_pwait\fP(2)	2.6.19
\fBepoll_wait\fP(2)	2.6
\fBeventfd\fP(2)	2.6.22
\fBeventfd2\fP(2)	2.6.27
\fBexecve\fP(2)
\fBexit\fP(2)
\fBexit_group\fP(2)	2.6
\fBfaccessat\fP(2)	2.6.16
\fBfadvise64\fP(2)	2.6
.\" Implements \fBposix_fadvise\fP(2)
\fBfadvise64_64\fP(2)	2.6
\fBfallocate\fP(2)	2.6.23
\fBfanotify_init\fP(2)	2.6.37
\fBfanotify_mark\fP(2)	2.6.37
.\" The fanotify calls were added in Linux 2.6.36,
.\" but disabled while the API was finalized.
\fBfchdir\fP(2)
\fBfchmod\fP(2)
\fBfchmodat\fP(2)	2.6.16
\fBfchown\fP(2)
\fBfchown32\fP(2)	2.4
\fBfchownat\fP(2)	2.6.16
\fBfcntl\fP(2)
\fBfcntl64\fP(2)	2.4
\fBfdatasync\fP(2)
\fBfgetxattr\fP(2)	2.6; 2.4.18
\fBflistxattr\fP(2)	2.6; 2.4.18
\fBflock\fP(2)	2.0
\fBfork\fP(2)
\fBfree_hugepages\fP(2)	2.5.36	удалён в 2.5.44
\fBfremovexattr\fP(2)	2.6; 2.4.18
\fBfsetxattr\fP(2)	2.6; 2.4.18
\fBfstat\fP(2)
\fBfstat64\fP(2)	2.4
\fBfstatat64\fP(2)	2.6.16
\fBfstatfs\fP(2)
\fBfstatfs64\fP(2)	2.6
\fBfsync\fP(2)
\fBftruncate\fP(2)
\fBftruncate64\fP(2)	2.4
\fBfutex\fP(2)	2.6
\fBfutimesat\fP(2)	2.6.16
\fBget_kernel_syms\fP(2)		удалён в 2.6
\fBget_mempolicy\fP(2)	2.6.6
\fBget_robust_list\fP(2)	2.6.17
\fBget_thread_area\fP(2)	2.6
\fBgetcpu\fP(2)	2.6.19
\fBgetcwd\fP(2)	2.2
\fBgetdents\fP(2)	2.0
\fBgetdents64\fP(2)	2.4
\fBgetegid\fP(2)
\fBgetegid32\fP(2)	2.4
\fBgeteuid\fP(2)
\fBgeteuid32\fP(2)	2.4
\fBgetgid\fP(2)
\fBgetgid32\fP(2)	2.4
\fBgetgroups\fP(2)
\fBgetgroups32\fP(2)	2.4
\fBgetitimer\fP(2)
\fBgetpeername\fP(2)
\fBgetpagesize\fP(2)	2.0	не для i386
\fBgetpgid\fP(2)
\fBgetpgrp\fP(2)
\fBgetpid\fP(2)
\fBgetppid\fP(2)
\fBgetpriority\fP(2)
\fBgetresgid\fP(2)	2.2
\fBgetresgid32\fP(2)	2.4
\fBgetresuid\fP(2)	2.2
\fBgetresuid32\fP(2)	2.4
\fBgetrlimit\fP(2)
\fBgetrusage\fP(2)
\fBgetsid\fP(2)	2.0
\fBgetsockname\fP(2)
\fBgetsockopt\fP(2)
\fBgettid\fP(2)	2.4.11
\fBgettimeofday\fP(2)
\fBgetuid\fP(2)
\fBgetuid32\fP(2)	2.4
.\" \fBgetunwind\fP(2)	2.4.8	ia64; DEPRECATED
\fBgetxattr\fP(2)	2.6; 2.4.18
\fBinit_module\fP(2)
\fBinotify_add_watch\fP(2)	2.6.13
\fBinotify_init\fP(2)	2.6.13
\fBinotify_init1\fP(2)	2.6.27
\fBinotify_rm_watch\fP(2)	2.6.13
\fBio_cancel\fP(2)	2.6
\fBio_destroy\fP(2)	2.6
\fBio_getevents\fP(2)	2.6
\fBio_setup\fP(2)	2.6
\fBio_submit\fP(2)	2.6
\fBioctl\fP(2)
\fBioperm\fP(2)
\fBiopl\fP(2)
\fBioprio_get\fP(2)	2.6.13
\fBioprio_set\fP(2)	2.6.13
\fBipc\fP(2)
.\" Implements System V IPC calls
\fBkexec_load\fP(2)	2.6.13
.\" The entry in the syscall table was reserved starting in 2.6.7
.\" Was named sys_kexec_load() from 2.6.7 to 2.6.16
\fBkeyctl\fP(2)	2.6.11
\fBkill\fP(2)
\fBlchown\fP(2)	2.2
\fBlchown32\fP(2)	2.4
\fBlgetxattr\fP(2)	2.6; 2.4.18
\fBlink\fP(2)
\fBlinkat\fP(2)	2.6.16
\fBlisten\fP(2)
\fBlistxattr\fP(2)	2.6; 2.4.18
\fBllistxattr\fP(2)	2.6; 2.4.18
\fBlookup_dcookie\fP(2)	2.6
\fBlremovexattr\fP(2)	2.6; 2.4.18
\fBlseek\fP(2)
\fBlsetxattr\fP(2)	2.6; 2.4.18
\fBlstat\fP(2)
\fBlstat64\fP(2)	2.4
\fBmadvise\fP(2)	2.4
\fBmadvise1\fP(2)	2.4
\fBmbind\fP(2)	2.6.6
.\" \fBmemory_ordering\fP(2)	???	Sparc64
\fBmigrate_pages\fP(2)	2.6.16
\fBmincore\fP(2)	2.4
\fBmkdir\fP(2)
\fBmkdirat\fP(2)	2.6.16
\fBmknod\fP(2)
\fBmknodat\fP(2)	2.6.16
\fBmlock\fP(2)
\fBmlockall\fP(2)
\fBmmap\fP(2)
\fBmmap2\fP(2)	2.4
\fBmodify_ldt\fP(2)
\fBmount\fP(2)
\fBmove_pages\fP(2)	2.6.18
\fBmprotect\fP(2)
\fBmq_getsetattr\fP(2)	2.6.6
.\" Implements \fBmq_getattr\fP(3) and \fBmq_setattr\fP(3)
\fBmq_notify\fP(2)	2.6.6
\fBmq_open\fP(2)	2.6.6
\fBmq_timedreceive\fP(2)	2.6.6
\fBmq_timedsend\fP(2)	2.6.6
\fBmq_unlink\fP(2)
\fBmremap\fP(2)	2.0
\fBmsgctl\fP(2)
\fBmsgget\fP(2)
\fBmsgrcv\fP(2)
\fBmsgsnd\fP(2)
\fBmsync\fP(2)	2.0
.\" \fBmultiplexer\fP(2)	??	__NR_multiplexer reserved on
.\"		PowerPC, but unimplemented?
\fBmunlock\fP(2)
\fBmunlockall\fP(2)
\fBmunmap\fP(2)
\fBname_to_handle_at\fP(2)	2.6.39
\fBnanosleep\fP(2)	2.0
\fBnfsservctl\fP(2)	2.2	удалён в 3.1
\fBnice\fP(2)
\fBoldfstat\fP(2)
\fBoldlstat\fP(2)
\fBoldolduname\fP(2)
\fBoldstat\fP(2)
\fBolduname\fP(2)
\fBopen\fP(2)
\fBopen_by_handle_at\fP(2)	2.6.39
\fBopenat\fP(2)	2.6.16
\fBpause\fP(2)
\fBpciconfig_iobase\fP(2)	2.2.15; 2.4	не для i386
.\" Alpha, PowerPC, ARM; not i386
\fBpciconfig_read\fP(2)	2.0.26; 2.2	не для i386
.\" , PowerPC, ARM; not i386
\fBpciconfig_write\fP(2)	2.0.26; 2.2	не для i386
.\" , PowerPC, ARM; not i386
\fBperf_event_open\fP(2)	2.6.31	T{
Назывался perf_counter_open() в 2.6.31; переименован в 2.6.32
T}
\fBpersonality\fP(2)	1.2
.\" \fBperfctr\fP(2)	???	Sparc32, Sparc64
.\" \fBperfmonctl\fP(2)	???	ia64
\fBpipe\fP(2)
\fBpipe2\fP(2)	2.6.27
\fBpivot_root\fP(2)	2.4
\fBpoll\fP(2)	2.2
\fBppoll\fP(2)	2.6.16
\fBprctl\fP(2)	2.2
\fBpread64\fP(2)		T{
добавлен под именем «pread» в 2.2; переименован в «pread64» в 2.6
T}
\fBpreadv\fP(2)	2.6.30
\fBprlimit\fP(2)	2.6.36
\fBprocess_vm_readv(2)\fP	3.2
\fBprocess_vm_writev(2)\fP	3.2
\fBpselect6\fP(2)	2.6.16
.\" Implements \fBpselect\fP(2)
\fBptrace\fP(2)
\fBpwrite64\fP(2)		T{
добавлен под именем «pwrite» в 2.2; переименован в «pwrite64» в 2.6
T}
\fBpwritev\fP(2)	2.6.30
\fBquery_module\fP(2)	2.2	удалён в 2.6
\fBquotactl\fP(2)
\fBread\fP(2)
\fBreadahead\fP(2)	2.4.13
\fBreaddir\fP(2)
.\" Supersedes \fBgetdents\fP(2)
\fBreadlink\fP(2)
\fBreadlinkat\fP(2)	2.6.16
\fBreadv\fP(2)	2.0
\fBreboot\fP(2)
\fBrecv\fP(2)
\fBrecvfrom\fP(2)
\fBrecvmsg\fP(2)
\fBrecvmmsg\fP(2)	2.6.33
\fBremap_file_pages\fP(2)	2.6
\fBremovexattr\fP(2)	2.6; 2.4.18
\fBrename\fP(2)
\fBrenameat\fP(2)	2.6.16
\fBrequest_key\fP(2)	2.6.11
\fBrestart_syscall\fP(2)	2.6
\fBrmdir\fP(2)
\fBrt_sigaction\fP(2)	2.2
\fBrt_sigpending\fP(2)	2.2
\fBrt_sigprocmask\fP(2)	2.2
\fBrt_sigqueueinfo\fP(2)	2.2
\fBrt_sigreturn\fP(2)	2.2
\fBrt_sigsuspend\fP(2)	2.2
\fBrt_sigtimedwait\fP(2)	2.2
\fBrt_tgsigqueueinfo\fP(2)	2.6.31
\fBsched_get_priority_max\fP(2)	2.0
\fBsched_get_priority_min\fP(2)	2.0
\fBsched_getaffinity\fP(2)	2.6
\fBsched_getparam\fP(2)	2.0
\fBsched_getscheduler\fP(2)	2.0
\fBsched_rr_get_interval\fP(2)	2.0
\fBsched_setaffinity\fP(2)	2.6
\fBsched_setparam\fP(2)	2.0
\fBsched_setscheduler\fP(2)	2.0
\fBsched_yield\fP(2)	2.0
\fBselect\fP(2)
\fBsemctl\fP(2)
\fBsemget\fP(2)
\fBsemop\fP(2)
\fBsemtimedop\fP(2)	2.6; 2.4.22
\fBsend\fP(2)
\fBsendfile\fP(2)	2.2
\fBsendfile64\fP(2)	2.6; 2.4.19
\fBsendmmsg\fP(2)	3.0
\fBsendmsg\fP(2)
\fBsendto\fP(2)
\fBset_mempolicy\fP(2)	2.6.6
\fBset_robust_list\fP(2)	2.6.17
\fBset_thread_area\fP(2)	2.6
\fBset_tid_address\fP(2)	2.6
\fBset_zone_reclaim\fP(2)	2.6.13	T{
удалён в 2.6.16 (никогда не был доступен из пользовательского пространства)
T}
.\" See http://lkml.org/lkml/2005/8/1/83
.\" "[PATCH] remove sys_set_zone_reclaim()"
\fBsetdomainname\fP(2)
\fBsetfsgid\fP(2)	1.2
\fBsetfsgid32\fP(2)	2.4
\fBsetfsuid\fP(2)	1.2
\fBsetfsuid32\fP(2)	2.4
\fBsetgid\fP(2)
\fBsetgid32\fP(2)	2.4
\fBsetgroups\fP(2)
\fBsetgroups32\fP(2)	2.4
\fBsethostname\fP(2)
\fBsetitimer\fP(2)
\fBsetns\fP(2)	3.0
\fBsetpgid\fP(2)
\fBsetpriority\fP(2)
\fBsetregid\fP(2)
\fBsetregid32\fP(2)	2.4
\fBsetresgid\fP(2)	2.2
\fBsetresgid32\fP(2)	2.4
\fBsetresuid\fP(2)	2.2
\fBsetresuid32\fP(2)	2.4
\fBsetreuid\fP(2)
\fBsetreuid32\fP(2)	2.4
\fBsetrlimit\fP(2)
\fBsetsid\fP(2)
\fBsetsockopt\fP(2)
\fBsettimeofday\fP(2)
\fBsetuid\fP(2)
\fBsetuid32\fP(2)	2.4
\fBsetup\fP(2)		удалён в 2.2
\fBsetxattr\fP(2)	2.6; 2.4.18
\fBsgetmask\fP(2)
\fBshmat\fP(2)
\fBshmctl\fP(2)
\fBshmdt\fP(2)
\fBshmget\fP(2)
\fBshutdown\fP(2)
\fBsigaction\fP(2)
\fBsigaltstack\fP(2)	2.2
\fBsignal\fP(2)
\fBsignalfd\fP(2)	2.6.22
\fBsignalfd4\fP(2)	2.6.27
\fBsigpending\fP(2)
\fBsigprocmask\fP(2)
\fBsigreturn\fP(2)
\fBsigsuspend\fP(2)
\fBsocket\fP(2)
\fBsocketcall\fP(2)
.\" Implements BSD socket calls
\fBsocketpair\fP(2)
\fBsplice\fP(2)	2.6.17
\fBspu_create\fP(2)	2.6.16	только для PowerPC
\fBspu_run\fP(2)	2.6.16	только для PowerPC
\fBssetmask\fP(2)
\fBstat\fP(2)
\fBstat64\fP(2)	2.4
\fBstatfs\fP(2)
\fBstatfs64\fP(2)	2.6
\fBstime\fP(2)
\fBsubpage_prot\fP(2)	2.6.25	PowerPC, если
		CONFIG_PPC_64K_PAGES
\fBswapoff\fP(2)
\fBswapon\fP(2)
\fBsymlink\fP(2)
\fBsymlinkat\fP(2)	2.6.16
\fBsync\fP(2)
\fBsync_file_range\fP(2)	2.6.17
\fBsync_file_range2\fP(2)	2.6.22	T{
зависящий от архитектуры вариант \fBsync_file_range\fP(2)
T}
.\" PowerPC, ARM, tile
.\" First appeared on ARM, as arm_sync_file_range(), but later renamed
.\" \fBsys_debug_setcontext\fP(2)	???	PowerPC if CONFIG_PPC32
\fBsyncfs\fP(2)	2.6.39
\fBsysfs\fP(2)	1.2
\fBsysinfo\fP(2)
\fBsyslog\fP(2)
.\" glibc interface is \fBklogctl\fP(3)
\fBtee\fP(2)	2.6.17
\fBtgkill\fP(2)	2.6
\fBtime\fP(2)
\fBtimer_create\fP(2)	2.6
\fBtimer_delete\fP(2)	2.6
\fBtimer_getoverrun\fP(2)	2.6
\fBtimer_gettime\fP(2)	2.6
\fBtimer_settime\fP(2)	2.6
\fBtimerfd_create\fP(2)	2.6.25
\fBtimerfd_gettime\fP(2)	2.6.25
\fBtimerfd_settime\fP(2)	2.6.25
\fBtimes\fP(2)
\fBtkill\fP(2)	2.6; 2.4.22
\fBtruncate\fP(2)
\fBtruncate64\fP(2)	2.4
\fBugetrlimit\fP(2)	2.4
\fBumask\fP(2)
\fBumount\fP(2)
.\" sys_oldumount() -- __NR_umount
\fBumount2\fP(2)	2.2
.\" sys_umount() -- __NR_umount2
\fBuname\fP(2)
\fBunlink\fP(2)
\fBunlinkat\fP(2)	2.6.16
\fBunshare\fP(2)	2.6.16
\fBuselib\fP(2)
\fBustat\fP(2)
\fButime\fP(2)
\fButimensat\fP(2)	2.6.22
\fButimes\fP(2)	2.2
\fBvfork\fP(2)
\fBvhangup\fP(2)
\fBvm86old\fP(2)
.\" Superseded by \fBvm86\fP(2)
\fBvmsplice\fP(2)	2.6.17
\fBwait4\fP(2)
\fBwaitid\fP(2)	2.6.10
\fBwaitpid\fP(2)
\fBwrite\fP(2)
\fBwritev\fP(2)	2.0
.TE
.ad
.PP
Для многих платформ, включая i386, все сокетные вызовы мультиплексируются (с
помощью обёрточных функций glibc) через \fBsocketcall\fP(2), а подобные IPC
вызовы System V мультиплексируются через \fBipc\fP(2).

.\" __NR_afs_syscall is 53 on Linux 2.6.22/i386
.\" __NR_break is 17 on Linux 2.6.22/i386
.\" __NR_ftime is 35 on Linux 2.6.22/i386
.\" __NR_getpmsg is 188 on Linux 2.6.22/i386
.\" __NR_gtty is 32 on Linux 2.6.22/i386
.\" __NR_idle is 112 on Linux 2.6.22/i386
.\" __NR_lock is 53 on Linux 2.6.22/i386
.\" __NR_madvise1 is 219 on Linux 2.6.22/i386
.\" __NR_mpx is 66 on Linux 2.6.22/i386
.\" Slot has been reused
.\" __NR_prof is 44 on Linux 2.6.22/i386
.\" __NR_profil is 98 on Linux 2.6.22/i386
.\" __NR_putpmsg is 189 on Linux 2.6.22/i386
.\" __NR_security is 223 on Linux 2.4/i386
.\" __NR_security is 223 on Linux 2.4/i386; absent on 2.6/i386, present
.\" on a couple of 2.6 architectures
.\" __NR_stty is 31 on Linux 2.6.22/i386
.\" The security call is for future use.
.\" __NR_tuxcall is 184 on x86_64, also on PPC and alpha
.\" __NR_ulimit is 58 on Linux 2.6.22/i386
.\" __NR_vserver is 273 on Linux 2.6.22/i386
Хотя для них и зарезервированы места в таблице системных вызовов, следующие
системные вызовы не реализованы в стандартном ядре: \fBafs_syscall\fP(2),
\fBbreak\fP(2), \fBftime\fP(2), \fBgetpmsg\fP(2), \fBgtty\fP(2), \fBidle\fP(2), \fBlock\fP(2),
\fBmadvise1\fP(2), \fBmpx\fP(2), \fBphys\fP(2), \fBprof\fP(2), \fBprofil\fP(2),
\fBputpmsg\fP(2), \fBsecurity\fP(2), \fBstty\fP(2), \fBtuxcall\fP(2), \fBulimit\fP(2) и
\fBvserver\fP(2) (см. также \fBunimplemented\fP(2)). Однако \fBftime\fP(3),
\fBprofil\fP(3) и \fBulimit\fP(3) есть среди библиотечных функций. Место для
\fBphys\fP(2) занято начиная с ядра 2.1.116 под \fBumount\fP(2); \fBphys\fP(2)
никогда не будет реализован. Вызовы \fBgetpmsg\fP(2) и \fBputpmsg\fP(2) есть в
ядрах с заплатами, обеспечивающими поддержку STREAMS, и могут никогда не
появиться в стандартном ядре.
.SH ЗАМЕЧАНИЯ
.PP
Чаще всего, код системного вызова с номером __NR_xxx, определённого в
\fI/usr/include/asm/unistd.h\fP, можно найти в исходном коде ядре в функции
\fIsys_xxx\fP(). (Таблицу вызовов для i386 можно найти в
\fI/usr/src/linux/arch/i386/kernel/entry.S\fP.) Есть много исключений из этого
правила, в основном из\-за того, что большинство старых системных вызовов
заменена на новые, при чём без всякой системы. На платформах с эмуляцией
собственнических ОС, таких как parisc, sparc, sparc64 и alpha, существует
много дополнительных системных вызовов; для mips64 также есть полный набор
32\-битных системных вызовов.

С течением времени при необходимости происходили изменения в интерфейсе
некоторых системных вызовов. Одной из причин таких изменений была
необходимость увеличения размера структур или скалярных значений
передаваемых системному вызову. Из\-за этих изменений появились различные
группы похожих системных вызовов (например, \fBtruncate\fP(2) и
\fBtruncate64\fP(2)), которые выполняют одинаковые задачи, но отличаются
размером своих аргументов. (Как уже отмечалось, на приложения это не влияет:
обёрточные функции glibc выполняют некоторые действия по запуску правильного
системного вызова, и это обеспечивает совместимость по ABI для старых
двоичных файлов.) Примеры системных вызовов, у которых есть несколько
версий:
.IP * 3
.\" e.g., on 2.6.22/i386: __NR_oldstat 18, __NR_stat 106, __NR_stat64 195
.\" The stat system calls deal with three different data structures,
.\" defined in include/asm-i386/stat.h: __old_kernel_stat, stat, stat64
В настоящее время есть три различные версии \fBstat\fP(2): \fIsys_stat\fP() (место
\fI__NR_oldstat\fP), \fIsys_newstat\fP() (место \fI__NR_stat\fP) и \fIsys_stat64\fP()
(место \fI__NR_stat64\fP), последняя используется в в данный момент. Похожая
ситуация с \fBlstat\fP(2) и \fBfstat\fP(2).
.IP *
Похожим образом определены \fI__NR_oldolduname\fP, \fI__NR_olduname\fP
и\fI__NR_uname\fP для вызовов \fIsys_olduname\fP(), \fIsys_uname\fP() и
\fIsys_newuname\fP().
.IP *
В Linux 2.0 появилась новая версия \fBvm86\fP(2), новая и старая версии ядерных
процедур называются \fIsys_vm86old\fP() и \fIsys_vm86\fP().
.IP *
В Linux 2.4 появилась новая версия \fBgetrlimit\fP(2) новая и старая версии
ядерных процедур называются \fIsys_old_getrlimit\fP() (место \fI__NR_getrlimit\fP)
и \fIsys_getrlimit\fP() (место \fI__NR_ugetrlimit\fP).
.IP *
.\" 64-bit off_t changes: ftruncate64, *stat64,
.\" fcntl64 (because of the flock structure), getdents64, *statfs64
В Linux 2.4 увеличено размер поля ID пользователей и групп с 16 до 32
бит. Для поддержки этого изменения добавлено несколько системных вызовов
(например, \fBchown32\fP(2), \fBgetuid32\fP(2), \fBgetgroups32\fP(2),
\fBsetresuid32\fP(2)), упраздняющих ранние вызовы с теми же именами, но без
суффикса "32".
.IP *
В Linux 2.4 добавлена поддержка доступа к большим файлам (у которых размеры
и смещения не умещаются в 32 бита) в приложениях на 32\-битных
архитектурах. Для этого потребовалось внести изменения в системные вызовы,
работающие с размерами и смещениями по файлам. Были добавлены следующие
системные вызовы: \fBfcntl64\fP(2), \fBftruncate64\fP(2), \fBgetdents64\fP(2),
\fBstat64\fP(2), \fBstatfs64\fP(2) и их аналоги, которые обрабатывают файловые
дескрипторы или символьные ссылки. Эти системные вызовы упраздняют старые
системные вызовы, которые, за исключением вызовов "stat", называются также,
но не имеют суффикса "64".

На новых платформах, которые имеют 64\-битный доступ к файлам и 32\-битные uid
(например, alpha, ia64, s390x), нет ни *64 ни *32 вызовов. Там, где есть *64
и *32 вызовы, другие версии считаются устаревшими.
.IP *
Вызовы \fIrt_sig*\fP добавлены в ядро 2.2 для поддержки дополнительных сигналов
реального времени (см. \fBsignal\fP(7)). Эти системные вызовы упраздняют старые
системные вызовы с теми же именами, но без префикса "rt_".
.IP *
.\" (used by libc 6)
.\" .PP
.\" Two system call numbers,
.\" .IR __NR__llseek
.\" and
.\" .IR __NR__sysctl
.\" have an additional underscore absent in
.\" .IR sys_llseek ()
.\" and
.\" .IR sys_sysctl ().
.\"
.\" In kernel 2.1.81,
.\" .BR lchown (2)
.\" and
.\" .BR chown (2)
.\" were swapped; that is,
.\" .BR lchown (2)
.\" was added with the semantics that were then current for
.\" .BR chown (2),
.\" and the semantics of the latter call were changed to what
.\" they are today.
В системных вызовах \fBselect\fP(2) и \fBmmap\fP(2) используется пять или более
аргументов, что вызывало проблемы определения способа передачи аргументов на
i386. В следствии этого, тогда как на других архитектурах вызовы
\fIsys_select\fP() и \fIsys_mmap\fP() соответствуют \fI__NR_select\fP и \fI__NR_mmap\fP,
на i386 они соответствуют \fIold_select\fP() и \fIold_mmap\fP() (процедуры,
использующие указатель на блок аргументов). В настоящее время больше нет
проблемы с передачей более пяти аргументов и есть \fI__NR__newselect\fP,
который соответствует именно \fIsys_select\fP(), и такая же ситуация с
\fI__NR_mmap2\fP.
.SH "СМОТРИТЕ ТАКЖЕ"
\fBsyscall\fP(2), \fBunimplemented\fP(2), \fBlibc\fP(7)

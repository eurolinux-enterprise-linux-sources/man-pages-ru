.\" Hey Emacs! This file is -*- nroff -*- source.
.\"
.\" This manpage is Copyright (C) 1992 Drew Eckhardt;
.\"                               1993 Michael Haardt, Ian Jackson.
.\" and Copyright (C) 2007 Michael Kerrisk <mtk.manpages@gmail.com>
.\"
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\"
.\" Modified Sat Jul 24 13:35:59 1993 by Rik Faith <faith@cs.unc.edu>
.\" Modified Sun Nov 28 17:19:01 1993 by Rik Faith <faith@cs.unc.edu>
.\" Modified Sat Jan 13 12:58:08 1996 by Michael Haardt
.\"   <michael@cantor.informatik.rwth-aachen.de>
.\" Modified Sun Jul 21 18:59:33 1996 by Andries Brouwer <aeb@cwi.nl>
.\" 2001-12-13 added remark by Zack Weinberg
.\" 2007-06-18 mtk:
.\"    	Added details about seekable files and file offset.
.\"	Noted that write() may write less than 'count' bytes, and
.\"	gave some examples of why this might occur.
.\"	Noted what happens if write() is interrupted by a signal.
.\"
.\"*******************************************************************
.\"
.\" This file was generated with po4a. Translate the source file.
.\"
.\"*******************************************************************
.TH WRITE 2 2010\-08\-29 Linux "Руководство программиста Linux"
.SH ИМЯ
write \- запись в файловый дескриптор
.SH ОБЗОР
\fB#include <unistd.h>\fP
.sp
\fBssize_t write(int \fP\fIfd\fP\fB, const void *\fP\fIbuf\fP\fB, size_t \fP\fIcount\fP\fB);\fP
.SH ОПИСАНИЕ
\fBwrite\fP() пишет до \fIcount\fP байт из буфера, на который указывает \fIbuf\fP, в
файле, на который ссылается файловый дескриптор \fIfd\fP.

Количество записанных байт может быть меньше чем \fIcount\fP если, например,
недостаточно места на физическом носителе, или исчерпан отведённый лимит
ресурса \fBRLIMIT_FSIZE\fP (см. \fBsetrlimit\fP(2)), или вызов был прерван
обработчиком сигналов после уже записанных меньше чем \fIcount\fP
байт. (См. также \fBpipe\fP(7).)

В случае с файлами, разрешающими позиционирование (т.е., к которым можно
применить \fBlseek\fP(2), например, обычные файлы), запись производится по
текущему файловому смещению, а смещение файла увеличивается на реальное
число записанных байт. Если файл был открыт с помощью \fBopen\fP(2) с
аргументом \fBO_APPEND\fP, то перед записью файловое смещение устанавливается в
конец файла. Согласование файлового смещения и операции записи выполняются
атомарно.

По POSIX требуется, чтобы \fBread\fP(2), который может быть вызван сразу после
\fBwrite\fP(), возвратил новые данные. Заметим, что не все файловые системы
соответствуют стандарту POSIX.
.SH "ВОЗВРАЩАЕМОЕ ЗНАЧЕНИЕ"
В случае успеха, возвращается количество записанных байт (ноль говорит о
том, что ничего записано не было). В случае ошибки, возвращается \-1 и
значение \fIerrno\fP устанавливается соответствующим образом.

Если \fIcount\fP равен нулю и \fIfd\fP указывает на обычный файл, то \fBwrite\fP()
может вернуть ошибку, если обнаружена одна из перечисленных ниже
ошибок. Если ошибок не обнаружено, то возвращается 0 без каких\-либо других
последствий. Если \fIcount\fP равен нулю и \fIfd\fP указывает на отличный от
обычного файл, то результат не определён.
.SH ОШИБКИ
.TP 
\fBEAGAIN\fP
Файловый дескриптор \fIfd\fP указывает на файл, не являющийся сокетом и
помеченный как неблокирующий ввод/вывод (\fBO_NONBLOCK\fP), а запись вызовет
блокировку.
.TP 
\fBEAGAIN\fP или \fBEWOULDBLOCK\fP
.\" Actually EAGAIN on Linux
Файловый дескриптор \fIfd\fP указывает на сокет, который помечен как
неблокирующий ввод/вывод (\fBO_NONBLOCK\fP), а запись вызовет блокировку. По
POSIX.1\-2001 разрешено возвращать ошибку в обоих случая и не требуется,
чтобы эти константы имели одно значение, поэтому переносимые приложения
должны проверять обе причины.
.TP 
\fBEBADF\fP
\fIfd\fP не является правильным файловым дескриптором или не открыт для записи.
.TP 
\fBEDESTADDRREQ\fP
Значение \fIfd\fP ссылается на сокет датаграмм, у которого с помощью
\fBconnect\fP(2) не назначен адрес другой стороны.
.TP 
\fBEFAULT\fP
\fIbuf\fP находится за пределами доступного вам адресного пространства.
.TP 
\fBEFBIG\fP
Попытка записать в файл, который превышает заданное при реализации
ограничение на размер файла или ограничение на размер файла для текущего
процесса, или запись в позицию после максимально разрешённого смещения.
.TP 
\fBEINTR\fP
Этот вызов был прерван сигналом, перед тем как были записаны какие\-либо
данные; см \fBsignal\fP(7).
.TP 
\fBEINVAL\fP
\fIfd\fP присоединён к объекту, который не подходит для записи; или файл был
открыт с указанием флага \fBO_DIRECT\fP, или неправильно выравнено адрес в
\fIbuf\fP, значение \fIcount\fP или текущее файловое смещение.
.TP 
\fBEIO\fP
Во время изменения индексного дескриптора (inode) возникла низкоуровневая
ошибка ввода/вывода.
.TP 
\fBENOSPC\fP
На устройстве, содержащем файл, на который ссылается \fIfd\fP, нет свободного
места.
.TP 
\fBEPIPE\fP
\fIfd\fP ссылается на конвейер или сокет, у которого закрыто чтение. Когда
такое случается, пишущий процесс также получит сигнал \fBSIGPIPE\fP. (Таким
образом, возвращаемое значение можно будет увидеть только если программа
перехватывает, блокирует или игнорирует этот сигнал.)
.PP
В зависимости от объекта, на который указывает \fIfd\fP, могут происходить и
другие ошибки.
.SH "СООТВЕТСТВИЕ СТАНДАРТАМ"
.\" SVr4 documents additional error
.\" conditions EDEADLK, ENOLCK, ENOLNK, ENOSR, ENXIO, or ERANGE.
SVr4, 4.3BSD, POSIX.1\-2001.

Согласно SVr4, запись может быть прервана в любом месте (с возвратом
\fBEINTR\fP), а не только перед тем как будут записаны какие\-либо данные.
.SH ЗАМЕЧАНИЯ
Успешный возврат из вызова \fBwrite\fP() не даёт никаких гарантий, что данные
сохранены на диске. Фактически, в некоторых ошибочных реализациях даже нет
гарантии, что для данных было зарезервировано место. Единственный способ
получить гарантированную запись \(em вызвать \fBfsync\fP(2) после записи всех
данных.

Если \fBwrite\fP() прерван обработчиком сигналов до начала записи, то вызов
возвращает ошибку \fBEINTR\fP; если он прерван после начала записи, то вызов
считается успешным, и возвращается число записанных байт.
.SH "СМОТРИТЕ ТАКЖЕ"
\fBclose\fP(2), \fBfcntl\fP(2), \fBfsync\fP(2), \fBioctl\fP(2), \fBlseek\fP(2), \fBopen\fP(2),
\fBpwrite\fP(2), \fBread\fP(2), \fBselect\fP(2), \fBwritev\fP(2), \fBfwrite\fP(3)

.\" -*- nroff -*- 
.\" This man-page is Copyright (C) 1997 John S. Kallal
.\"
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one
.\" 
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\" 
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and author(s) of this work.
.\"
.\" If the you wish to distribute versions of this work under other
.\" conditions than the above, please contact the author(s) at the following 
.\" for permission:
.\"	
.\"  John S. Kallal - 
.\"	email: <kallal@voicenet.com>
.\"	mail: 518 Kerfoot Farm RD, Wilmington, DE 19803-2444, USA
.\"	phone: (302)654-5478
.\"   
.\" $Id: initrd.4,v 1.1 2001/01/17 22:45:19 alexm Exp $
.\" Перевод на русский язык: Антон Лыков (last@last.ulsu.ru) 20001204
.TH INITRD 4 "6 ноября 1997" "Linux 2.0" "Руководство программста Linux"
.SH ИМЯ
initrd \- RAM-диск, инициализируемый загрузчиком
.\"   
.\"   
.\"   
.SH ОПИСАНИЕ
Специальный файл 
.B /dev/initrd 
- это блочное устройство только для чтения.  
Устройство 
.B /dev/initrd
- это диск, расположенный в оперативной памяти, который инициализируется (т.е. загружается) загрузчиком до
запуска ядра.
Затем ядро может использовать содержимое блочного устройства 
.BR /dev/initrd 
для двухфазовой загрузки системы.
.PP
Во время первой фазы ядро запускает
и монтирует начальную корневую файловую систему из содержимого 
.B /dev/initrd 
(например, RAM-диска, инициализируемого загрузчиком). 
Во время второй фазы из начального содержимого корневого устройства загружаются 
дополнительные драйвера или другие модули.  
После загрузки дополнительных модулей с другого устройства монтируется новая
корневая файловая система (т.е., нормальная корневая файловая система). 
.\"
.\"
.\"
.SH "ДЕЙСТВИЯ ПРИ ЗАГРУЗКЕ" 
При загрузке с 
.BR initrd ", система загружается следующим образом:"
.RS 0.2i
.PP
1. Загрузчик загружает ядро и содержимое 
.BR /dev/initrd " в память."
.PP
2. При запуске ядра, оно разархивирует и копирует содержимое устройства 
.B /dev/initrd
на устройство 
.B /dev/ram0 ","
а затем освобождает память, занятую 
.BR /dev/initrd "."
.PP
3. Затем ядро монтирует устройство 
.B /dev/ram0 
для чтения и записи в качестве начальной корневой файловой системы.
.PP
4. Если отображаемая нормальная корневая файловая система также является начальной корневой файловой системой 
(например, 
.B /dev/ram0 "),"
то ядро переходит к последнему пункту для нормальной загрузки.
.PP
5. Если в начальной корневой файловой системе находится исполняемый файл 
.BR /linuxrc ","
он исполняется с uid 0.  
(Файл 
.B /linuxrc
должен иметь разрешения на исполнение.  
Файл 
.B /linuxrc
может быть любым допустимым исполняемым файлом, включая скрипт шелла.)  
.PP
6. Если 
.B /linuxrc
не выполняется или когда 
.B /linuxrc
заканчивает выполнение, монтируется нормальная корневая файловая система.  
(Если
.BR /linuxrc 
завершается с какой-либо файловой системой, монтированной на начальной корневой 
файловой системе, то поведение ядра 
.BR "НЕ ОПРЕДЕЛЕНО."
См. подробности о поведении текущей версии ядра в разделе 
.BR ПРИМЕЧАНИЯ ".)"
.PP
7. Если нормальная корневая файловая система имеет каталог 
.BR /initrd ", то устройство"
.B /dev/ram0
перемещается из 
.BR / " в " /initrd "."
Иначе, если каталог   
.BR /initrd " не существует, устройство " /dev/ram0 " размонтируется." 
(При перемещении из 
.BR / " в " /initrd ", " /dev/ram0  
не размонтируется, и потому процессы с  
.BR /dev/ram0 
могут продолжать работать. Если каталог 
.BR /initrd 
не существует на нормальной корневой файловой системе 
и какие-либо процессы с
.BR /dev/ram0 " продолжют выполняться после завершения " /linuxrc ", "
то поведение ядра 
.BR "НЕ ОПРЕДЕЛЕНО."  
См. подробности о поведении текущей версии ядра в разделе 
.BR ПРИМЕЧАНИЯ ".)"
.PP
8. На нормальной корневой файловой системе следует обычная процедура загрузки (например, вызов 
.BR /sbin/init ")."
.\"   
.\"   
.\"   
.SH ОПЦИИ
Следующие опции загрузчика при использовании с 
.BR initrd ", влияют на действия во время загрузки ядра:"
.TP
.BI initrd= "имя файла"
Определяет файл, который нужно загрузить в качестве содержимого 
.BR /dev/initrd "."
.RB "Для " LOADLIN 
это опция командной строки.
.RB "Для " LILO " вы должны использовать эту команду в конфигурационном файле
.BR LILO " - " /etc/lilo.config "."
Имя файла, определяемое этой 
опцией, обычно является образом файловой системы, сжатым программoй gzip.
.TP
.B noinitrd
Эта загрузочная опция отменяет двухфазную процедуру загрузки.
Ядро проделывает обычную процедуру загрузки так, если бы 
.B /dev/initrd 
не был инициализировано. 
С этой опцией все содержимое 
.B /dev/initrd ", "
загруженное в память загрузчиком, сохраняется.
Эта опция разрешает содержимому 
.B /dev/initrd
быть любыми данными, не ограничивая их образом файловой системы. 
Однако, устройство 
.B /dev/initrd 
доступно только для чтения и может быть прочитано только один раз после запуска системы.
.TP
.BI root= "имя устройства"
Определяет устройство, которое должно быть использовано в качестве нормальной корневой файловой системы. 
.RB "Для " LOADLIN
это опция командной строки.
.RB "Для " LILO " это опция определяется во время загрузки или
строкой в конфигурационном файле  
.BR LILO " - " /etc/lilo.config "."
Устройство, определяемое этой опцией, должно быть монтируемым 
устройством, имеющим подходящую корневую файловую систему.
.\"   
.\"   
.\"   
.SH "СМЕНА НОРМАЛЬНОЙ КОРНЕВОЙ ФАЙЛОВОЙ СИСТЕМЫ"
По умолчанию, 
конфигурация ядра 
(например, установленная в файле ядра с помощью 
.B rdev
или на этапе компиляции ядра)
или установки загрузчика 
используются определения нормальной корневой файловой системы.
Для NFS-монтируемой нормальной корневой файловой системы нужно использовать загрузочные опции 
.BR nfs_root_name " и " nfs_root_addrs 
для задания установок NFS. 
За дополнительной информацией по NSF-монтируемой корневой ФС обращайтесь к файлу документации к ядру
.BR nfsroot.txt "."
Также дополнительная информация по установкам корневой файловой системы содержится в документации к 
.BR LILO " и " LOADLIN "."
.PP
Кроме того, 
.BR /linuxrc
может сменить нормальное корневое устройство.
Для того, чтобы  
.BR /linuxrc
сменил это устройство, должен быть подмонтирован каталог 
.BR /proc "."
После монтирования 
.BR /proc ", " /linuxrc 
сменяет нормальное корневое устройство, записывая установки в файлы proc 
.BR /proc/sys/kernel/real-root-dev ", "
.BR /proc/sys/kernel/nfs-root-name ", и " 
.BR /proc/sys/kernel/nfs-root-addrs "."
Что касается физического корневого устройства, оно меняется, если 
.BR /linuxrc
записывает номер нового устройства корневой файловой системы в 
.BR /proc/sys/kernel/real-root-dev "."
Для корневой файловой системы NSF корневое устройство меняется, если 
.BR /linuxrc
записывает установки NSF в файлы 
.BR /proc/sys/kernel/nfs-root-name " и "
.BR /proc/sys/kernel/nfs-root-addrs ", "
а затем записывает 0xff (например, номер псевдо-NFS-устройства) в файл 
.BR /proc/sys/kernel/real-root-dev "."
Так, например, следующие команды изменят 
нормальное корневое устройство на 
.BR /dev/hdb1 :
.nf
        echo 0x365 >/proc/sys/kernel/real-root-dev
.fi
В качестве примера для NSF, следующие команды изменят 
нормальное корневое устройство на каталог NSF 
.BR /var/nfsroot 
на локальном сетевом NSF-сервере с IP-адресом 193.8.232.7 для системы с
IP-адресом 193.8.232.7 и именем 'idefix':
.nf
	echo /var/nfsroot >/proc/sys/kernel/nfs-root-name
	echo 193.8.232.2:193.8.232.7::255.255.255.0:idefix \\
	  >/proc/sys/kernel/nfs-root-addrs
	echo 255 >/proc/sys/kernel/real-root-dev
.fi
.\"   
.\"   
.\"   
.SH "ИСПОЛЬЗОВАНИЕ"
Основной причиной реализации 
.BR initrd 
была потребность в modular
.BR (***)
конфигурации ядра во время инсталляции системы. 
.PP
Возможный сценарий инсталляции системы - следующий:
.RS 0.2i
.PP
1. Загрузчик стартует с дискеты или другого носителя с минимальным ядром 
(например, включающим поддержку  
.BR /dev/ram ", " /dev/initrd ", и файловой системы ext2) и загружает " 
.BR /dev/initrd " с версией начальной файловой системы, упакованной программой gzip.
.PP
2. Исполняемый файл 
.BR /linuxrc 
определяет, (1) что необходимо, чтобы смонтировать нормальную корневую файловую систему 
(т.е., тип устройства, драйвера, файловую систему) и (2) носитель
дистрибутива (например, CD-ROM, сеть, лента, ...). Для этого может быть задан вопрос 
пользователю, или запущена авто-проверка или использован гибридный подход.
.PP 
3. Исполняемый файл 
.BR /linuxrc 
загружает необходимые модули с начальной корневой файловой системы.
.PP
4. Исполняемый файл 
.BR /linuxrc 
создает и заполняет корневую файловую систему. (На этой стадии нормальная 
корневая файловая система еще не должна быть законченной системой.)
.PP
5. Исполняемый файл 
.BR /linuxrc " устанавливает " /proc/sys/kernel/real-root-dev,
размонтирует 
.BR /proc ", "
нормальную корневую файловую систему и все другие файловые 
системы, которые он монтировал, а затем завершает работу.
.PP
6. Затем ядро монтирует нормальную корневую файловую систему.
.PP
7. Теперь, поскольку файловая система доступна и полноценна,
может быть инстраллирован загрузчик.
.PP
8. Загрузчик конфигурируется так, чтобы загружать в 
.BR /dev/initrd
файловую систему с набором модулей, которые были использованы в первый раз для поддержки системы. 
(например, устройство 
.BR /dev/ram0 
может быть модифицировано, затем размонтировано, и наконец, образ записывается из 
.BR /dev/ram0 
в файл.)
.PP
9. Система теперь может загружаться, и в процессе инсталляции могут осуществляться дополнительные 
действия.
.RE
.PP
Ключевая роль 
.BR /dev/initrd 
в вышеописанном механизме в повторном использовании данных конфигурации во время нормальных действий системы 
без необходимости начального выбора ядра, загрузки огромного общего ядра или
перекомиляции ядра.
.PP
Второй сценарий предназначен для установки Linux на системы с 
различной конфигурацией оборудования в одной административной сети. 
В таких случаях может быть желательно использовать лишь небольшой набор ядер
(в идеале - одно) и сделать специфическую для конкретной системы часть данных о конфигурации 
как можно меньшей по объему. 
В этом случае создайте общий файл 
со всеми необходимыми модулями. 
После этого, только файл 
.B /linuxrc
или файл, запускаемый 
.B /linuxrc
будет разным для разных конфигураций.
.PP
Третий сценарий предназначен для более удобных дисков восстановления системы. 
Поскольку информация, такая как расположение раздела корневой файловой системы 
не нужна во время начальной загрузки, загруженная с  
.B /dev/initrd 
система может использовать диалоговый режим и/или автоопределение с последующей, 
возможно, проверкой "на дурака".
.PP
И наконец, дистрибутивы Linux на CD-ROM могут использовать 
.BR initrd
для легкой инсталляции с CD-ROM.  
Дистрибутив может использовать 
.BR LOADLIN 
для непосредственной загрузки 
.BR /dev/initrd
с CD-ROM без необходимости в дискетах.
Дистрибутив также может использовать загрузочную дискету 
.BR LILO 
и затем загрузить больший ram-диск с помощью 
.BR /dev/initrd " с CD-ROM."
.\"   
.\"   
.\"   
.SH КОНФИГУРАЦИЯ
.B /dev/initrd 
- это блочное устройство только для чтения со 
старшим номером 1 и младшим номером 250.  
Обычно владельцем 
.B /dev/initrd
является 
.B root.disk 
с правами доступа 0400 (доступ на чтение только для root).
Если в система на основе Linux не создано устройство 
.B /dev/initrd ", оно может быть создано следующими командами:"
.nf
\fB
        mknod -m 400 /dev/initrd b 1 250
        chown root:disk /dev/initrd
\fP
.fi
Также поддержка RAM-диска и начального RAM-диска 
(например,  
.BR CONFIG_BLK_DEV_RAM=y " и " CONFIG_BLK_DEV_INITRD=y
) должна быть обеспечена соответствующими установками на этапе компиляции ядра, чтобы оно могло использовать 
.BR /dev/initrd "."
При использовании 
.BR /dev/initrd 
драйвер RAM-диска не может быть загружен как модуль.
.\"   
.\"   
.\"   
.SH ФАЙЛЫ
.I /dev/initrd
.br
.I /dev/ram0
.br
.I /linuxrc
.br
.I /initrd
.SH "СМ. ТАКЖЕ"
.BR chown (1),
.BR mknod (1),
.BR /dev/ram (4),
.BR freeramdisk (8),
.BR rdev (8),
Файл документации
.I initrd.txt
из пакета исходных текстов ядра, документацию LILO,
документацию LOADLIN, документацию SYSLINUX.
.\"   
.\"   
.\"   
.SH ПРИМЕЧАНИЯ
1. В текущем ядре все файловые системы, которые остаются смонтированными, когда 
.BR /dev/ram0 " перемещается из " / " в " /initrd ", "
остаются доступными. Между тем, элементы 
.BR /proc/mounts 
не обновляются. 
.PP
2. В текущем ядре если каталог 
.BR /initrd " не существует, то " /dev/ram0 
НЕ будет полностью размонтировано, если 
.BR /dev/ram0 
используется какими-либо процессами или на нем смонтирована какая-либо файловая система.
Если  
.BR /dev/ram0 " НЕ размонтируется полностью, " 
то  
.BR /dev/ram0
остается в памяти.
.PP
3. При использовании 
.BR /dev/initrd 
не нужно полагаться на поведение, описанное в предыдущих примечаниях.  
Поведение ядра может измениться в будущих его версиях.
.\"   
.\"   
.\"   
.SH АВТОР
Код ядра для устройства 
.BR initrd 
был написан Werner Almesberger <almesber@lrc.epfl.ch> и
Hans Lermen <lermen@elserv.ffm.fgan.de>.
Код для
.BR initrd 
был добавлен в базовую версию ядра Linux в версии разработки 1.3.73.

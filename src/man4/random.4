.\" Copyright (c) 1997 John S. Kallal (kallal@voicenet.com)
.\"
.\" This is free documentation; you can redistribute it and/or
.\" modify it under the terms of the GNU General Public License as
.\" published by the Free Software Foundation; either version 2 of
.\" the License, or (at your option) any later version.
.\"
.\" Some changes by tytso and aeb.
.\"
.\" 2004-12-16, John V. Belmonte/mtk, Updated init and quit scripts
.\" 2004-04-08, AEB, Improved description of read from /dev/urandom
.\" 2008-06-20, George Spelvin <linux@horizon.com>,
.\"             Matt Mackall <mpm@selenic.com>
.\"     Add a Usage subsection that recommends most users to use
.\"     /dev/urandom, and emphasizes parsimonious usage of /dev/random.
.\"
.\"*******************************************************************
.\"
.\" This file was generated with po4a. Translate the source file.
.\"
.\"*******************************************************************
.TH RANDOM 4 2010\-08\-29 Linux "Руководство программиста Linux"
.SH ИМЯ
random, urandom \- устройства к генератору случайных чисел, встроенному в
ядро
.SH ОПИСАНИЕ
Специальные символьные файлы \fI/dev/random\fP и \fI/dev/urandom\fP (появились в
Linux 1.3.30) предоставляют интерфейс к генератору случайных чисел,
встроенному в ядро. Файл \fI/dev/random\fP имеет старший номер устройства 1 и
младший номер устройства 8. Файл \fI/dev/urandom\fP имеет старший номер
устройства 1 и младший номер устройства 9.
.LP
Генератор случайных чисел собирает окружающий шум от работы драйверов
устройств и из других источников в пул энтропии. Генератор также постоянно
оценивает количество битов шума в пуле энтропии. Именно с помощью этого пула
создаются случайные числа.
.LP
При чтении из устройства \fI/dev/random\fP возвращаются байты произвольных
значений, количество битов шума в которых равно количеству битов шума в пуле
энтропии. \fI/dev/random\fP следует использовать, если требуется высокий
коэффициент случайности, например, в качестве данных однократного заполнения
или при генерации ключа. Если пул энтропии пуст, попытка чтения
\fI/dev/random\fP приведёт к задержке, пока не будет собран дополнительный
окружающий шум.
.LP
При чтении из устройства \fI/dev/urandom\fP блокирования в ожидании данных не
происходит. Как результат, если в пуле недостаточная энтропия, то
возвращённые значения теоретически нестойки к криптографической атаке на
алгоритмы, используемые драйвером. О том, как это сделать, не сказано в
современной не секретной литературе, но теоретически возможно, что такая
атака может существовать. Если это важно для вашего приложения, используйте
лучше /dev/random.
.SS Использование
Если вы не знаете, что выбрать \(em \fI/dev/random\fP или \fI/dev/urandom\fP, то
лучше использовать последнее. Как правило, \fI/dev/urandom\fP нужно
использовать везде, за исключением создания долго существующих ключей
GPG/SSL/SSH.

Если файл начальных чисел (seed file) сохраняется между перезагрузками как
рекомендуется далее (во всех основных дистрибутивах Linux это делается
начиная с 2000 года), то результат шифрования стоек от атакующего, не
имеющего локально привилегированного доступа, до перезагрузки машины, и
вполне подходит для ключей шифрования сетевых сеансов. Так как чтение из
\fI/dev/random\fP может привести к блокировке, пользователи хотели бы открывать
его в неблокирующем режиме (или выполнять чтение с задержкой), и иметь
механизм оповещения, если желаемый уровень энтропии в данный момент
недоступен.

Генератор случайных чисел ядра проектировался для создания небольших объёмов
высококачественного начального материала для генератора псевдослучайных
чисел (CPRNG). Целью ставилась безопасность, а не скорость, и поэтому он
плохо подходит для генерации большого количества произвольных
данных. Пользователи должны быть очень экономны при чтении начального
материала из \fI/dev/urandom\fP (и \fI/dev/random\fP); ненужное чтение большого
количества данных из этого устройства негативно отразится на других
пользователях устройства.

Количество начального материала, требуемое для генерации ключей шифрования,
равно эффективному размеру ключа. Например, 3072\-битный закрытый ключ RSA
или Diffie\-Hellman имеет эффективный размер ключа 128 бит (для его подбора
требуется просмотреть 2^128 значений), поэтому генератору ключа нужно только
128 бит (16 байт) начального материала из \fI/dev/random\fP.

Так как разумно добавить некоторый запас прочности к выше указанному
минимуму как защиту против недостатков в алгоритме CPRNG, никакой доступный
криптографический примитив сегодня не может обещать больше чем 256 бит
безопасности, поэтому если какая\-то программа читает больше чем 256 бит (32
байта) из пула случайных чисел ядра за вызов, или за разумный интервал
повторного посева (не менее одной минуты), то это нужно считать как признак
того, что шифрование в ней реализовано \fIНЕДОСТАТОЧНО\fP продуманно.
.SS Настройка
Если в системе ещё нет \fI/dev/random\fP и \fI/dev/urandom\fP, то их можно создать
следующими командами:

.nf
    mknod \-m 644 /dev/random c 1 8
    mknod \-m 644 /dev/urandom c 1 9
    chown root:root /dev/random /dev/urandom
.fi

Когда Linux\-система запускается без участия человека, пул энтропии может
оказаться в довольно предсказуемом состоянии. Это снижает значимый объём
шума в пуле энтропии ниже оцениваемого. Для преодоления этого эффекта можно
сохранять информацию пула энтропии во время выключения и восстанавливать во
время запуска системы. Для этого добавьте следующие строки в сценарий,
который выполняется при запуске Linux\-системы:

.nf
    echo "Initializing random number generator..."
    random_seed=/var/run/random\-seed
    # Carry a random seed from start\-up to start\-up
    # Load and then save the whole entropy pool
    if [ \-f $random_seed ]; then
        cat $random_seed >/dev/urandom
    else
        touch $random_seed
    fi
    chmod 600 $random_seed
    poolfile=/proc/sys/kernel/random/poolsize
    [ \-r $poolfile ] && bytes=\`cat $poolfile\` || bytes=512
    dd if=/dev/urandom of=$random_seed count=1 bs=$bytes
.fi

Также добавьте следующие строки в сценарий, который выполняется при
завершении работы Linux\-системы:

.nf
    # Carry a random seed from shut\-down to start\-up
    # Save the whole entropy pool
    echo "Saving random seed..."
    random_seed=/var/run/random\-seed
    touch $random_seed
    chmod 600 $random_seed
    poolfile=/proc/sys/kernel/random/poolsize
    [ \-r $poolfile ] && bytes=\`cat $poolfile\` || bytes=512
    dd if=/dev/urandom of=$random_seed count=1 bs=$bytes
.fi
.SS "Интерфейс в /proc"
Файлы в каталоге \fI/proc/sys/kernel/random\fP (начиная с 2.3.16) предоставляют
дополнительный интерфейс к устройству \fI/dev/random\fP.
.LP
Файл \fIentropy_avail\fP, доступный только для чтения, показывает количество
доступной энтропии. Обычно для заполненного пула энтропии значение равно
4096 (бит).
.LP
Файл \fIpoolsize\fP содержит размер пула энтропии. Формат файла зависит от
версии ядра:
.RS
.TP  12
Linux 2.4:
В файле содержится размер пула энтропии в \fIбайтах\fP. Обычно это число 512,
но так как файл доступен на запись, значение можно изменить, подстроив его
под доступный алгоритм. Возможные значения \(em 32, 64, 128, 256, 512, 1024
или 2048.
.TP 
Linux 2.6:
Файл доступен только на чтение и содержит размер пула энтропии в
\fIбитах\fP. Значение равно 4096.
.RE
.LP
В файле \fIread_wakeup_threshold\fP содержится количество бит энтропии,
требуемое для пробуждения процессов, которые спят в ожидании энтропии из
\fI/dev/random\fP. По умолчанию равно 64. В файле \fIwrite_wakeup_threshold\fP
содержится количество бит энтропии, менее которого мы пробуждаем процессы,
которые выполнили вызовы \fBselect\fP(2) или \fBpoll\fP(2) для ожидания записи в
\fI/dev/random\fP. Эти значения можно изменить, записав новые числа в эти
файлы.
.LP
Файлы \fIuuid\fP и \fIboot_id\fP, доступные только для чтения, содержат
произвольные строки вида 6fd5a44b\-35f4\-4ad4\-a9b9\-6b9be13e1fe9. Значение
первого генерируется заново при каждом чтении, а значение второго
генерируется только один раз.
.SH ФАЙЛЫ
/dev/random
.br
.\" .SH AUTHOR
.\" The kernel's random number generator was written by
.\" Theodore Ts'o (tytso@athena.mit.edu).
/dev/urandom
.SH "СМОТРИТЕ ТАКЖЕ"
mknod (1)
.br
RFC\ 1750, "Randomness Recommendations for Security"

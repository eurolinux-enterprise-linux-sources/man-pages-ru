.\" Copyright (C) 1994, 1995 by Daniel Quinlan (quinlan@yggdrasil.com)
.\" and Copyright (C) 2002-2008 Michael Kerrisk <mtk.manpages@gmail.com>
.\" with networking additions from Alan Cox (A.Cox@swansea.ac.uk)
.\" and scsi additions from Michael Neuffer (neuffer@mail.uni-mainz.de)
.\" and sysctl additions from Andries Brouwer (aeb@cwi.nl)
.\" and System V IPC (as well as various other) additions from
.\" Michael Kerrisk <mtk.manpages@gmail.com>
.\"
.\" This is free documentation; you can redistribute it and/or
.\" modify it under the terms of the GNU General Public License as
.\" published by the Free Software Foundation; either version 2 of
.\" the License, or (at your option) any later version.
.\"
.\" The GNU General Public License's references to "object code"
.\" and "executables" are to be interpreted as the output of any
.\" document formatting or typesetting system, including
.\" intermediate and printed output.
.\"
.\" This manual is distributed in the hope that it will be useful,
.\" but WITHOUT ANY WARRANTY; without even the implied warranty of
.\" MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.\" GNU General Public License for more details.
.\"
.\" You should have received a copy of the GNU General Public
.\" License along with this manual; if not, write to the Free
.\" Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111,
.\" USA.
.\"
.\" Modified 1995-05-17 by faith@cs.unc.edu
.\" Minor changes by aeb and Marty Leisner (leisner@sdsp.mc.xerox.com).
.\" Modified 1996-04-13, 1996-07-22 by aeb@cwi.nl
.\" Modified 2001-12-16 by rwhron@earthlink.net
.\" Modified 2002-07-13 by jbelton@shaw.ca
.\" Modified 2002-07-22, 2003-05-27, 2004-04-06, 2004-05-25
.\"    by Michael Kerrisk <mtk.manpages@gmail.com>
.\" 2004-11-17, mtk -- updated notes on /proc/loadavg
.\" 2004-12-01, mtk, rtsig-max and rtsig-nr went away in 2.6.8
.\" 2004-12-14, mtk, updated 'statm', and fixed error in order of list
.\" 2005-05-12, mtk, updated 'stat'
.\" 2005-07-13, mtk, added /proc/sys/fs/mqueue/*
.\" 2005-09-16, mtk, Added /proc/sys/fs/suid_dumpable
.\" 2005-09-19, mtk, added /proc/zoneinfo
.\" 2005-03-01, mtk, moved /proc/sys/fs/mqueue/* material to mq_overview.7.
.\" 2008-06-05, mtk, Added /proc/[pid]/oom_score, /proc/[pid]/oom_adj,
.\"     /proc/[pid]/limits, /proc/[pid]/mountinfo, /proc/[pid]/mountstats,
.\"     and /proc/[pid]/fdinfo/*.
.\" 2008-06-19, mtk, Documented /proc/[pid]/status.
.\" 2008-07-15, mtk, added /proc/config.gz
.\"
.\" FIXME 2.6.13 seems to have /proc/vmcore implemented
.\" in the source code, but there is no option available under
.\" 'make xconfig'; eventually this should be fixed, and then info
.\" from the patch-2.6.13 and change log could be used to write an
.\" entry in this man page.
.\" Needs CONFIG_VMCORE
.\"
.\" FIXME cross check against Documentation/filesystems/proc.txt
.\" to see what information could be imported from that file
.\" into this file.
.\"
.\"*******************************************************************
.\"
.\" This file was generated with po4a. Translate the source file.
.\"
.\"*******************************************************************
.TH PROC 5 2012\-05\-03 Linux "Руководство программиста Linux"
.SH ИМЯ
proc \- псевдо\-файловая система с информацией о процессах
.SH ОПИСАНИЕ
Файловая система \fIproc\fP \(em это псевдо\-файловая система, которая
используется в качестве интерфейса к структурам данных ядра. Обычно она
монтируется в \fI/proc\fP. Её большая часть доступна только для чтения, однако
некоторые файлы позволяют изменять значения переменных ядра.
.LP
Следующее описание предоставит обзорную информацию об иерархии \fI/proc\fP.
.PD 1
.TP 
\fI/proc/[pid]\fP
.\" FIXME Describe /proc/[pid]/attr and
.\"       /proc/[pid]/task/[tid]/attr
.\"	  This is a directory
.\"       Added in ???
.\"	  CONFIG_SECURITY
.\"
Эти числовые подкаталоги соответствуют работающим процессам; имя подкаталога
соответствует идентификатору процесса. Каждый подкаталог содержит следующие
псевдо\-файлы и каталоги.
.TP 
\fI/proc/[pid]/auxv\fP (начиная с версии 2.6.0\-test7)
Содержит информацию, полученную интерпретатором ELF и переданную процессу во
время выполнения. Формат \(em это один идентификатор типа \fIunsigned long\fP
ID и по одному значению типа \fIunsigned long\fP для каждого из
элементов. Последний элемент содержит два нуля.
.TP 
\fI/proc/[pid]/cgroup\fP (начиная с Linux 2.6.24)
.\" 	  Info in Documentation/cgroups/cgroups.txt
В этом файле описаны группы управления, которым принадлежит
процесс/задача. Каждая иерархия cgroup описывается одним элементом,
состоящим из следующих полей (через двоеточие):
.nf

\f(CW    5:cpuacct,cpu,cpuset:/daemons\fP
.fi
.IP
Поля, разделяемые двоеточием, слева направо:
.RS 11
.IP 1. 3
идентификационный номер иерархии
.IP 2.
список подсистем, привязанных к иерархии
.IP 3.
управляющая группа в иерархии, которой принадлежит процесс
.RE
.IP
.\"
.\" FIXME Describe /proc/[pid]/clear_refs
.\"       Added in 2.6.22
.\"       "Clears page referenced bits shown in smaps output"
.\"       write-only
.\"       CONFIG_PROC_PAGE_MONITOR
Этот файл существует только, если включён параметр настройки ядра
\fBCONFIG_CGROUPS\fP.
.TP 
\fI/proc/[pid]/cmdline\fP
.\" In 2.3.26, this also used to be true if the process was swapped out.
Содержит полную командную строку процесса, если процесс не является зомби. В
последнем случае этот файл пуст, поэтому чтение из него вернёт 0
символов. Аргументы командной строки в этом файле представлены в виде набора
строк, разделённых байтами null (\(aq\e0\(aq) и байтом null после последней
строки.
.TP 
\fI/proc/[pid]/coredump_filter\fP (начиная с версии 2.6.23)
Смотрите \fBcore\fP(5).
.TP 
\fI/proc/[pid]/cpuset\fP (начиная с версии 2.6.12)
.\" and/proc/[pid]/task/[tid]/cpuset
Смотрите \fBcpuset\fP(7).
.TP 
\fI/proc/[pid]/cwd\fP
Это символьная ссылка на текущий рабочий каталог процесса. Например, чтобы
узнать текущий каталог процесса 20, вы должны проделать следующее:

.in +4n
.nf
$\fB cd /proc/20/cwd; /bin/pwd\fP
.fi
.in

Отметим, что команда \fIpwd\fP часто является встроенной в оболочку, и поэтому
может работать не корректно. В \fBbash\fP(1) вы можете воспользоваться \fIpwd\ \-P\fP.

.\" The following was still true as at kernel 2.6.13
В многонитиевых процессах, содержимое этой символьной ссылки недоступно,
если головная нить уже завершила работу (обычно с помощью вызова
\fBpthread_exit\fP(3)).
.TP 
\fI/proc/[pid]/environ\fP
Этот файл содержит переменные окружения процесса. Элементы разделяются
нулевыми байтами (\(aq\e0\(aq), а также может быть нулевой байт в
конце. Так, чтобы вывести переменные окружения процесса 1, вы можете сделать
следующее:
.in +4n
.nf

$\fB (cat /proc/1/environ; echo) | tr \(aq\e000\(aq \(aq\en\(aq\fP
.fi
.in
.TP 
\fI/proc/[pid]/exe\fP
.\" The following was still true as at kernel 2.6.13
В ядрах Linux 2.2 и более поздних, этот файл является символьной ссылкой,
содержащей полное имя файла выполняемой команды. Эта символьная ссылка
обычно может быть разыменована; при попытке открыть её откроется выполняемый
файл. Вы можете ввести \fI/proc/[pid]/exe\fP, чтобы запустить другую копию того
же выполняемого файла, что выполняется системой в качестве процесса [pid]. В
многонитиевых процессах содержимое этой символьной ссылки недоступно, если
главная нить уже завершила работу (обычно с помощью вызова
\fBpthread_exit\fP(3)).

В ядрах Linux 2.0 и более ранних, \fI/proc/[pid]/exe\fP указывает на двоичный
файл, который был выполнен, и работает как символьная ссылка. Вызов
\fBreadlink\fP(2) над этим файлом в Linux 2.0 вернёт строку следующего вида:

    [device]:inode

Например, [0301]:1502 указывает на inode 1502 на устройстве со старшим
номером устройства 03 (IDE, MFM, и т.п. диски), младшим номером 01 (первый
раздел на первом диске).

Для поиска файла можно воспользоваться \fBfind\fP(1) с параметром \fI\-inum\fP.
.TP 
\fI/proc/[pid]/fd\fP
Этот подкаталог содержит одну запись для каждого файла, открытого процессом,
которая называется дескриптором, и которая является символьной ссылкой на
настоящий файл. Так, 0 \(em это стандартный поток ввода, 1 \(em стандартный
поток вывода, 2 \(em стандартный поток ошибок и т.п.

.\" The following was still true as at kernel 2.6.13
В многонитиевых процессах, содержимое этого каталога недоступно, если
главная нить уже завершила работу (обычно при помощи вызова
\fBpthread_exit\fP(3)).

Программы, использующие указанные в аргументах файлы в качестве стандартного
потока ввода или стандартного потока вывода, но не использующие свои
настоящие стандартный поток ввода или стандартный поток вывода, тем не менее
могут использоваться для работы с настоящими стандартным потоком ввода или
стандартным потоком вывода, если воспользоваться для этого
\fI/proc/[pid]/fd\fP. Например, подразумевая что \fI\-i\fP является флагом,
обозначающим входной файл и \fI\-o\fP является флагом, обозначающим выходной
файл, вы можете указать:
.in +4n
.nf

$\fB foobar \-i /proc/self/fd/0 \-o /proc/self/fd/1 ...\fP
.fi
.in

.\" The following is not true in my tests (MTK):
.\" Note that this will not work for
.\" programs that seek on their files, as the files in the fd directory
.\" are not seekable.
и вы получите работающий фильтр.

\fI/proc/self/fd/N\fP \(em это примерно то же, что и \fI/dev/fd/N\fP на некоторых
системах UNIX и подобных им. Фактически, большинство сценариев MAKEDEV в
Linux создают символьную ссылку с именем \fI/dev/fd\fP на файл
\fI/proc/self/fd\fP.

Большинство систем предоставляют символьные ссылки \fI/dev/stdin\fP,
\fI/dev/stdout\fP и \fI/dev/stderr\fP, которые соответствуют ссылкам на файлы
\fI0\fP, \fI1\fP и \fI2\fP в \fI/proc/self/fd\fP. Так, пример указанной выше команды
может быть переписан в следующем виде:
.in +4n
.nf

$\fB foobar \-i /dev/stdin \-o /dev/stdout ...\fP
.fi
.in
.\" FIXME Describe /proc/[pid]/loginuid
.\"       Added in 2.6.11; updating requires CAP_AUDIT_CONTROL
.\"       CONFIG_AUDITSYSCALL
.TP 
\fI/proc/[pid]/fdinfo/\fP (начиная с версии 2.6.22)
Это подкаталог, содержащий по одной записи для каждого файла, открытого
процессом, называемой его файловым дескриптором. Содержимое каждого файла
может быть прочитано для получения информации о соответствующем файловом
дескрипторе, например:
.in +4n
.nf

$\fB cat /proc/12015/fdinfo/4\fP
pos:    1000
flags:  01002002
.fi
.in

Поле \fIpos\fP содержит десятичное число, показывающее текущее смещение в
файле. Поле \fIflags\fP содержит восьмеричное число, отображающее режим доступа
к файлу и флаги состояния файла (см. \fBopen\fP(2)).

.\" FIXME document /proc/[pid]/io
.\" .TP
.\" .IR /proc/[pid]/io " (since kernel 2.6.20)"
Файлы в этом каталоге доступны на чтение только владельцу процесса.
.TP 
\fI/proc/[pid]/limits\fP (начиная версии ядра 2.6.24)
В этом файле содержатся мягкие и жёсткие ограничения (limit), а также
измерения по каждого ограничению ресурсов процесса
(см. \fBgetrlimit\fP(2)). Файл доступен на чтение только реальному UID
процесса.
.TP 
\fI/proc/[pid]/maps\fP
Файл, содержащий адреса областей памяти, которые используются программой в
данный момент и права доступа к ним.

Формат:

.nf
\f(CWaddress           perms offset  dev   inode   pathname
08048000\-08056000 r\-xp 00000000 03:0c 64593   /usr/sbin/gpm
08056000\-08058000 rw\-p 0000d000 03:0c 64593   /usr/sbin/gpm
08058000\-0805b000 rwxp 00000000 00:00 0
40000000\-40013000 r\-xp 00000000 03:0c 4165    /lib/ld\-2.2.4.so
40013000\-40015000 rw\-p 00012000 03:0c 4165    /lib/ld\-2.2.4.so
4001f000\-40135000 r\-xp 00000000 03:0c 45494   /lib/libc\-2.2.4.so
40135000\-4013e000 rw\-p 00115000 03:0c 45494   /lib/libc\-2.2.4.so
4013e000\-40142000 rw\-p 00000000 00:00 0
bffff000\-c0000000 rwxp 00000000 00:00 0\fP
.fi

где "address" \(em это адресное пространство, занятое процессом, а "perms"
\(em права доступа к нему:

.nf
.in +5
r = можно читать
w = можно писать
x = можно выполнять
s = можно использовать несколькими процессами совместно
p = личная (копирование при записи)
.fi
.in

"offset" \(em это смещение в файле/где\-то ещё, "dev" \(em это устройство
(старший номер:младший номер), а "inode" \(em это индексный дескриптор на
данном устройстве. 0 означает, что с данной областью памяти не ассоциированы
индексные дескрипторы: примером тому является сегмент BSS
(неинициализированные данные).

В Linux 2.0 поле, указывающее на имя файла, отсутствует.
.TP 
\fI/proc/[pid]/mem\fP
Этот файл можно использовать для получения доступа к страницам памяти
процесса через вызовы \fBopen\fP(2), \fBread\fP(2) и \fBlseek\fP(2).
.TP 
\fI/proc/[pid]/mountinfo\fP (начиная с Linux 2.6.26)
.\" This info adapted from Documentation/filesystems/proc.txt
В этом файле содержится информация о точках монтирования. Формат строк:
.nf

\f(CW36 35 98:0 /mnt1 /mnt2 rw,noatime master:1 \- ext3 /dev/root rw,errors=continue
(1)(2)(3)   (4)   (5)      (6)      (7)   (8) (9)   (10)         (11)\fP
.fi
.IP
Описания полей (номер представлен в скобках):
.RS 7
.TP  5
(1)
ID монтирования: уникальный идентификатор монтирования (может использоваться
повторно после \fBumount\fP(2)).
.TP 
(2)
родительский ID: ID родительского монтирования (или ID самого себя для
вершины дерева монтирования).
.TP 
(3)
старший:младший: значение \fIst_dev\fP для файлов на файловой системе
(см. \fBstat\fP(2)).
.TP 
(4)
корень: корень монтирования в файловой системе.
.TP 
(5)
точка монтирования: точка монтирования относительно корня процесса.
.TP 
(6)
параметры монтирования: параметры данного монтирования.
.TP 
(7)
необязательные поля: ноль или более полей в виде "метка[:значение]".
.TP 
(8)
разделитель: отмечает конец необязательных полей.
.TP 
(9)
тип файловой системы: имя файловой системы в виде "тип[.подтип]".
.TP 
(10)
источник монтирования: информация, специфичная для файловой системы или
"none".
.TP 
(11)
параметры суперблока: параметры конкретного суперблока.
.RE
.IP
Анализаторы должны игнорировать все неизвестные необязательные
поля. Необязательные поля на данный момент:
.RS 12
.TP  18
shared:X
монтирование используется всеми из группы X
.TP 
master:X
монтирование подчиняется группе X
.TP 
propagate_from:X
монтирования подчиняется и получает распространение от группы X (*)
.TP 
unbindable
монтирование недоступно для привязки
.RE
.IP
(*) X \(em это ближайший основной член группы корня процесса. Если X
является непосредственным хозяином монтирования, или если нет основной
группы под тем же корнем, то присутствует только поле "master:X" и нет поля
"propagate_from:X".

Подробней о концепции распространения монтирования смотрите в исходном коде
ядра в файле \fIDocumentation/filesystems/sharedsubtree.txt\fP.
.TP 
\fI/proc/[pid]/mounts\fP (начиная с Linux 2.4.19)
В файле содержится список всех смонтированных файловых систем в пространстве
имён монтирования процесса. Формат файла описан в \fBfstab\fP(5). Начиная с
ядра версии 2.6.15, этот файл можно опрашивать: после открытия файла на
чтение, изменение в этом файле (т.е., монтирование или размонтирование
файловой системы) заставляет \fBselect\fP(2) пометить файловый дескриптор как
доступный для чтения, а \fBpoll\fP(2) и \fBepoll_wait\fP(2) помечают файл как
имеющий ошибочное состояние.
.TP 
\fI/proc/[pid]/mountstats\fP (начиная с Linux 2.6.17)
В этом файле содержится информация (статистика, информация о настройке) о
точках монтирования в пространстве имён процесса. Формат строк:
.nf

device /dev/sda7 mounted on /home with fstype ext3 [statistics]
(       1      )            ( 2 )             (3 ) (4)
.fi
.IP
Поля каждой строки:
.RS 7
.TP  5
(1)
Имя смонтированного устройства (или "nodevice", если нет соответствующего
устройства).
.TP 
(2)
Точка монтирования в дереве файловой системы.
.TP 
(3)
Тип файловой системы.
.TP 
(4)
Необязательная статистика и информация о настройке. В настоящее время (Linux
версии 2.6.26), в этом поле доступна информация о файловых системах NFS.
.RE
.IP
Данный файл доступен на чтение только владельцу процесса.
.TP 
\fI/proc/[pid]/ns/\fP (начиная с Linux 3.0)
.\" See commit 6b4e306aa3dc94a0545eb9279475b1ab6209a31f
В этом подкаталоге содержится по одной записи на каждое пространство имён,
для которых в \fBsetns\fP(2) есть поддержка изменения. Информацию о
пространствах имён смотрите в \fBclone\fP(2).
.TP 
\fI/proc/[pid]/ns/ipc\fP (начиная с Linux 3.0)
При псевдонимном монтировании этого файла (смотрите \fBmount\fP(2)) куда\-то ещё
в файловой системе оставляет действующим пространство имён IPC процесса
заданного \fIpid\fP, даже если все процессы в пространстве имён завершились.

При открытии этого файла возвращается файловый указатель для пространства
имён IPC процесса заданного \fIpid\fP. Пока этот файловый дескриптор остаётся
открытым, пространство имён IPC будет оставаться действующим, даже если все
процессы в пространстве имён завершились. Файловый дескриптор может быть
передан \fBsetns\fP(2).
.TP 
\fI/proc/[pid]/ns/net\fP (начиная с Linux 3.0)
При псевдонимном монтировании этого файла (смотрите \fBmount\fP(2)) куда\-то ещё
в файловой системе оставляет действующим сетевое пространство имён процесса
заданного \fIpid\fP, даже если все процессы в пространстве имён завершились.

При открытии этого файла возвращается файловый указатель для сетевого
пространства имён процесса, заданного \fIpid\fP. Пока этот файловый дескриптор
остаётся открытым, сетевое пространство имён будет оставаться действующим,
даже если все процессы в пространстве имён завершились. Файловый дескриптор
может быть передан \fBsetns\fP(2).
.TP 
\fI/proc/[pid]/ns/uts\fP (начиная с Linux 3.0)
При псевдонимном монтировании этого файла (смотрите \fBmount\fP(2)) куда\-то ещё
в файловой системе оставляет действующим пространство имён UTS процесса
заданного \fIpid\fP, даже если все процессы в пространстве имён завершились.

При открытии этого файла возвращается файловый указатель для пространства
имён UTS процесса заданного \fIpid\fP. Пока этот файловый дескриптор остаётся
открытым, пространство имён UTS будет оставаться действующим, даже если все
процессы в пространстве имён завершились. Файловый дескриптор может быть
передан \fBsetns\fP(2).
.TP 
\fI/proc/[pid]/numa_maps\fP (начиная с Linux 2.6.14)
Смотрите \fBnuma\fP(7).
.TP 
\fI/proc/[pid]/oom_adj\fP (начиная с Linux 2.6.11)
Этот файл может использоваться для подгонки оценки, используемой при выборе
процесса, который нужно завершить при нехватке памяти (OOM). Ядро использует
это значение в операции побитового сдвига значения \fIoom_score\fP у процесса:
допустимые лежат находятся в диапазоне от \-16 до +15, плюс специальное
значение \-17, которое отключает OOM\-завершение для этого процесса
совсем. Положительная оценка увеличивает вероятность, что процесс будет
завершён OOM\-killer; отрицательная оценка уменьшает вероятность. Значение по
умолчанию в этом файле равно 0; новый процесс наследует его от родительского
значения \fIoom_adj\fP. Для изменения этого файла процесс должен иметь мандат
\fBCAP_SYS_RESOURCE\fP.
.TP 
\fI/proc/[pid]/oom_score\fP (начиная с Linux 2.6.11)
.\" See mm/oom_kill.c::badness() in the 2.6.25 sources
.\" See mm/oom_kill.c::badness() in the 2.6.25 sources
Этот файл содержит текущую оценку, которую ядро назначило процессу,
учитывающуюся при избрании процесса OOM\-killer. Более высокая оценка
означает, что у процесса есть больше шансов быть выбранным
OOM\-killer. Основой оценки является количество памяти используемой процессом
и различные увеличивающие (+) и уменьшающие (\-) факторы:
.RS
.IP * 2
создавал ли процесс много потомков с помощью \fBfork\fP(2) (+);
.IP *
долго ли работал процесс, или использовал много процессорного времени (\-);
.IP *
имеет ли процесс низкое значение любезности (nice) (т.е., > 0) (+);
.IP *
.\" More precisely, if it has CAP_SYS_ADMIN or CAP_SYS_RESOURCE
считается ли процесс привилегированным (\-); и
.IP *
.\" More precisely, if it has CAP_SYS_RAWIO
обращается ли процесс к аппаратному обеспечению напрямую (\-).
.RE
.IP
.\" FIXME Describe /proc/[pid]/pagemap
.\"       Added in 2.6.25
.\"       CONFIG_PROC_PAGE_MONITOR
Значение \fIoom_score\fP также отражает подгонку побитового смещения, указанную
в \fIoom_adj\fP этого процесса.
.TP 
\fI/proc/[pid]/root\fP
UNIX и Linux поддерживают идею о корневом каталоге файловой системы для
каждого процесса, который может быть установлен системным вызовом
\fBchroot\fP(2). Этот файл является символьной ссылкой, которая указывает на
корневой каталог процесса и ведёт себя так же, как exe, fd/* и т.д.

.\" The following was still true as at kernel 2.6.13
.\" FIXME Describe /proc/[pid]/seccomp
.\"       Added in 2.6.12
.\" FIXME Describe /proc/[pid]/sessionid
.\"       Added in 2.6.25; read-only; only readable by real UID
.\"       CONFIG_AUDITSYSCALL
.\" FIXME Describe /proc/[pid]/sched
.\"       Added in 2.6.23
.\"       CONFIG_SCHED_DEBUG, and additional fields if CONFIG_SCHEDSTATS
.\"       Displays various scheduling parameters
.\"       This file can be written, to reset stats
.\" FIXME Describe /proc/[pid]/schedstats and
.\"       /proc/[pid]/task/[tid]/schedstats
.\"       Added in 2.6.9
.\"       CONFIG_SCHEDSTATS
В многонитиевых процессах, содержимое этой символьной ссылки недоступно,
если головная нить уже завершила работу (обычно с помощью вызова
\fBpthread_exit\fP(3)).
.TP 
\fI/proc/[pid]/smaps\fP (начиная с Linux 2.6.14)
.\"       CONFIG_PROC_PAGE_MONITOR
Этот файл содержит значение потребления памяти каждого отображения
процесса. Для каждого отображения есть несколько строк в виде:
.in +4n
.nf

08048000\-080bc000 r\-xp 00000000 03:02 13130      /bin/bash
Size:               464 kB
Rss:                424 kB
Shared_Clean:       424 kB
Shared_Dirty:         0 kB
Private_Clean:        0 kB
Private_Dirty:        0 kB

.fi
.in
В первой строке показана идентичная информация что и для отображения в
\fI/proc/[pid]/maps\fP. В остальных строках представлен размер отображения,
количество отображения, находящегося в данный момент в оперативной памяти,
количество чистых и грязных общих страниц в отображении и число чистых и
грязных личных страниц отображения.

Этот существует только если включён параметр настройки ядра \fBCONFIG_MMU\fP.
.TP 
\fI/proc/[pid]/stat\fP
Информация о состоянии процесса. Она используется командой
\fBps\fP(1). Определяется в \fI/usr/src/linux/fs/proc/array.c\fP.

Вот поля с соответствующими им спецификаторами формата \fBscanf\fP(3) по
порядку:
.RS
.TP  12
\fIpid\fP %d
Идентификатор процесса.
.TP 
\fIcomm\fP %s
Имя исполняемого файла в круглых скобках. Его можно увидеть независимо от
того, находится ли исполняемый файл в подкачке или нет.
.TP 
\fIstate\fP %c
Один из символов из строки "RSDZTW", где R \(em запущен, S \(em процесс спит
в прерываемом ожидании, D \(em процесс ожидает в непрерываемом состоянии
окончания дисковой операции, Z \(em процесс является зомби, T \(em процесс
трассируется или остановлен (по сигналу) и W \(em процесс вызывается.
.TP 
\fIppid\fP %d
Идентификатор (PID) родительского процесса.
.TP 
\fIpgrp\fP %d
Идентификатор группы процесса.
.TP 
\fIsession\fP %d
Идентификатор сеанса процесса.
.TP 
\fItty_nr\fP %d
Управляющий терминал процесса. (Младший номер устройства определяется
сочетанием бит: c 31 по 20 и с 7 по 0; старший номер устройства расположен в
битах с 15 по 8.)
.TP 
\fItpgid\fP %d
.\" This field and following, up to and including wchan added 0.99.1
Идентификатор группы процесса, которая в настоящий момент владеет
управляющим терминалом, к которому подключён данный процесс.
.TP 
\fIflags\fP %u (%lu до Linux 2.6.22)
Слово флагов процесса в ядре. Назначение бит определено в PF_*
\fI<linux/sched.h>\fP. Отдельные части зависят от версии ядра.
.TP 
\fIminflt\fP %lu
Количество незначительных промахов процесса, которые не потребовали загрузки
страницы памяти с диска.
.TP 
.\" field 11
\fIcminflt\fP %lu
Количество незначительных промахов процесса, которые возникли при ожидании
окончания работы процессов\-потомков.
.TP 
\fImajflt\fP %lu
Количество значительных промахов процесса, которые потребовали загрузки
страницы памяти с диска.
.TP 
\fIcmajflt\fP %lu
Количество значительных промахов процесса, которые возникли при ожидании
окончания работы процессов\-потомков.
.TP 
\fIutime\fP %lu
Количество времени, которое было запланировано для работы процесса в
пользовательском режиме, измеряется в тиках (поделённое на
\fIsysconf(_SC_CLK_TCK)\fP. Сюда включено гостевое время, \fIguest_time\fP (время,
потраченное на работу виртуального ЦП, см. далее), так что приложения,
которые не учитывают гостевое поле, не потеряют его при вычислениях.
.TP 
\fIstime\fP %lu
Количество времени, которое было запланировано для работы процесса в режиме
ядра, измеряется в тиках (поделённое на \fIsysconf(_SC_CLK_TCK)\fP.
.TP 
\fIcutime\fP %ld
Количество времени, которое было запланировано для работы процесса в
пользовательском режиме для ожидания окончания работы процессов\-потомков,
измеряется в тиках (поделённое на \fIsysconf(_SC_CLK_TCK)\fP (см. также
\fBtimes\fP(2)). Сюда включено гостевое время, \fIcguest_time\fP (время,
потраченное на работу виртуального ЦП, см. далее).
.TP 
\fIcstime\fP %ld
Количество времени, которое было запланировано для работы процесса в режиме
ядра для ожидания окончания работы процессов\-потомков, измеряется в тиках
(поделённое на \fIsysconf(_SC_CLK_TCK)\fP.
.TP 
\fIpriority\fP %ld
(Объяснение относится к Linux 2.6) Для процессов, работающих согласно
политике планирования в реальном времени (\fIpolicy\fP далее;
см. \fBsched_setscheduler\fP(2)), это значение задаёт приоритет при
планировании за вычетом 1; то есть число в диапазоне от \-2 до \-100
соответствует приоритетам реального времени от 1 до 99. Для процессов,
работающих без политики планирования в реальном времени, это неизменённое
значение любезности (\fBsetpriority\fP(2)) в том же виде в каком оно
представлено в ядре. Ядро хранит значения любезности в виде чисел в
диапазоне от 0 (высокое) до 39 (низкое), что соответствует диапазону
пользователя от \-20 до 19.

.\" And back in kernel 1.2 days things were different again.
До Linux 2.6 это была пересчитанная величина на основе весов планировщика
для определённого процесса.
.TP 
\fInice\fP %ld
.\" Back in kernel 1.2 days things were different.
Значение любезности (см. \fBsetpriority\fP(2)) задаётся числом в диапазоне от
19(низкий приоритет) до \-20 (высокий приоритет).
.TP 
.\" .TP
.\" \fIcounter\fP %ld
.\" The current maximum size in jiffies of the process's next timeslice,
.\" or what is currently left of its current timeslice, if it is the
.\" currently running process.
.\" .TP
.\" \fItimeout\fP %u
.\" The time in jiffies of the process's next timeout.
.\" timeout was removed sometime around 2.1/2.2
\fInum_threads\fP %ld
Число нитей в этом процессе (начиная с Linux 2.6). До ядер ветви 2.6 это
поле всегда имело значение 0 в качестве заменителя ранее удалённых полей.
.TP 
.\" field 21
\fIitrealvalue\fP %ld
Время в мигах (jiffies) перед следующей посылкой процессу сигнала \fBSIGALRM\fP
при срабатывании таймера интервала. Начиная с версии 2.6.17 это поле больше
не обновляется и всегда имеет значение 0.
.TP 
\fIstarttime\fP %llu (было %lu до Linux 2.6)
Время в мигах до запуска процесса от момента начальной загрузки системы.
.TP 
\fIvsize\fP %lu
Размер виртуальной памяти в байтах.
.TP 
\fIrss\fP %ld
Резидентный размер: количество страниц, которое занимает процесс в реальной
памяти. Это только те страницы, которые заняты кодом, данными и
пространством стека. Сюда не включаются страницы, которые не были загружены
по требованию или которые находятся в пространстве подкачки.
.TP 
\fIrsslim\fP %lu
Текущее мягкое ограничение rss процесса в байтах; смотрите описание
\fBRLIMIT_RSS\fP в \fBgetpriority\fP(2).
.TP 
\fIstartcode\fP %lu
Адрес, выше которого может выполняться код программы.
.TP 
\fIendcode\fP %lu
Адрес, ниже которого может выполняться код программы.
.TP 
\fIstartstack\fP %lu
Адрес начала (то есть низ) стека.
.TP 
\fIkstkesp\fP %lu
Текущее значение ESP (указателя стека) для данного процесса, которое следует
из страницы стека в ядре.
.TP 
\fIkstkeip\fP %lu
Текущее значение EIP (указатель инструкций).
.TP 
.\" field 31
\fIsignal\fP %lu
Карта ожидающих сигналов, отображается как число в десятичной системе
счисления. Устарело, так как не предоставляет информации о сигналах
реального времени; вместо неё используйте \fI/proc/[pid]/status\fP.
.TP 
\fIblocked\fP %lu
Карта блокированных сигналов, отображается как число в десятичной системе
счисления. Устарело, так как не предоставляет информации о сигналах
реального времени; вместо неё используйте \fI/proc/[pid]/status\fP.
.TP 
\fIsigignore\fP %lu
Карта игнорированных сигналов, отображается как число в десятичной системе
счисления. Устарело, так как не предоставляет информации о сигналах
реального времени; вместо неё используйте \fI/proc/[pid]/status\fP.
.TP 
\fIsigcatch\fP %lu
Карта перехваченных сигналов, отображается как число в десятичной системе
счисления. Устарело, так как не предоставляет информации о сигналах
реального времени; вместо неё используйте \fI/proc/[pid]/status\fP.
.TP 
\fIwchan\fP %lu
Это "канал", в котором ожидает процесс. Он является адресом системного
вызова и может быть найден в списке имён, если вам нужно текстовое
имя. (Если у вас актуальный \fI/etc/psdatabase\fP, то попробуйте выполнить \fIps
\-l\fP, чтобы увидеть поле WCHAN в действии).
.TP 
\fInswap\fP %lu
.\" nswap was added in 2.0
Количество страниц в своппинге (не сопровождается).
.TP 
\fIcnswap\fP %lu
.\" cnswap was added in 2.0
Суммарное значение \fInswap\fP для процессов\-потомков (не сопровождается).
.TP 
\fIexit_signal\fP %d (начиная с Linux 2.1.22)
Сигнал, который будет послан родителю, когда процесс завершит работу.
.TP 
\fIprocessor\fP %d (начиная с Linux 2.2.8)
Номер процессора, на котором последний раз выполнялся процесс.
.TP 
\fIrt_priority\fP %u (начиная с Linux 2.5.19; был %lu до Linux 2.6.22)
Приоритет выполнения в реальном времени, число из диапазона от 1 до 99 для
процессов запланированных выполняться согласно политике реального времени
или 0 для процессов, выполняющихся не в реальном времени
(см. \fBsched_setscheduler\fP(2)).
.TP 
.\" field 41
\fIpolicy\fP %u (начиная с Linux 2.5.19; был %lu до Linux 2.6.22)
Политика планирования (см. \fBsched_setscheduler\fP(2)). Декодируется с помощью
констант SCHED_* из \fIlinux/sched.h\fP.
.TP 
\fIdelayacct_blkio_ticks\fP %llu (начиная с Linux 2.6.18)
Суммарная задержка блочного ввода\-вывода, измеряется в тиках (сотых долях
секунды).
.TP 
\fIguest_time\fP %lu (начиная с Linux 2.6.24)
Гостевое время процесса (время, потраченное на работу виртуального ЦП
гостевой операционной системы), измеряется в тиках (поделённых на
\fIsysconf(_SC_CLK_TCK)\fP.
.TP 
\fIcguest_time\fP %ld (начиная с Linux 2.6.24)
Гостевое время потомка процесса, измеряется в тиках (поделённых на
\fIsysconf(_SC_CLK_TCK)\fP.
.RE
.TP 
\fI/proc/[pid]/statm\fP
Предоставляет информацию об использовании памяти, измеряется в
страницах. Колонки:
.in +4n
.nf

.\" (not including libs; broken, includes data segment)
.\" (including libs; broken, includes library text)
size       общий размер программы
           (тоже что и VmSize в \fI/proc/[pid]/status\fP)
resident   размер резидентной части
           (тоже что и VmRSS в \fI/proc/[pid]/status\fP)
share      страницы общего пользования (из общих отображений)
text       текст (код)
lib        библиотека (не используется в Linux 2.6)
data       данные + стек
dt         грязные страницы (не используется в Linux 2.6)
.fi
.in
.TP 
\fI/proc/[pid]/status\fP
В основном, предоставляет информацию из \fI/proc/[pid]/stat\fP и
\fI/proc/[pid]/statm\fP в более лёгком для прочтения человеком формате. Пример:
.in +4n
.nf

$\fB cat /proc/$$/status\fP
Name:   bash
State:  S (sleeping)
Tgid:   3515
Pid:    3515
PPid:   3452
TracerPid:      0
Uid:    1000    1000    1000    1000
Gid:    100     100     100     100
FDSize: 256
Groups: 16 33 100
VmPeak:     9136 kB
VmSize:     7896 kB
VmLck:         0 kB
VmHWM:      7572 kB
VmRSS:      6316 kB
VmData:     5224 kB
VmStk:        88 kB
VmExe:       572 kB
VmLib:      1708 kB
VmPTE:        20 kB
Threads:        1
SigQ:   0/3067
SigPnd: 0000000000000000
ShdPnd: 0000000000000000
SigBlk: 0000000000010000
SigIgn: 0000000000384004
SigCgt: 000000004b813efb
CapInh: 0000000000000000
CapPrm: 0000000000000000
CapEff: 0000000000000000
CapBnd: ffffffffffffffff
Cpus_allowed:   00000001
Cpus_allowed_list:      0
Mems_allowed:   1
Mems_allowed_list:      0
voluntary_ctxt_switches:        150
nonvoluntary_ctxt_switches:     545
.fi
.in
.IP
Поля:
.RS
.IP * 2
\fIName\fP: Команда, выполняемая этим процессом.
.IP *
\fIState\fP: Текущее состояние процесса. Может быть "R (работает)", "S (спит)",
"D (спит на диске)", "T (остановлен)", "T (остановлен трассировкой)", "Z
(зомби)" или "X (завершён)".
.IP *
\fITgid\fP: Групповой ID нити (т.е., ID процесса).
.IP *
\fIPid\fP: ID нити (см. \fBgettid\fP(2)).
.IP *
\fIPPid\fP: PID родительского процесса.
.IP *
\fITracerPid\fP: PID процесса, который выполняет трассировку данного процесса
(0, если трассировки нет).
.IP *
\fIUid\fP, \fIGid\fP: Реальный, эффективный, сохранённый и используемый в файловой
системе UID (GID).
.IP *
\fIFDSize\fP: Количество слотов файловых дескрипторов выделенных в данный
момент.
.IP *
\fIGroups\fP: Список дополнительных групп.
.IP *
\fIVmPeak\fP: Пик размера виртуальной памяти.
.IP *
\fIVmSize\fP: Размер виртуальной памяти.
.IP *
\fIVmLck\fP: Размер заблокированной памяти (см. \fBmlock\fP(3)).
.IP *
\fIVmHWM\fP: Пик размера резидентной памяти ("отметка высоты прилива").
.IP *
\fIVmRSS\fP: Размер резидентной памяти.
.IP *
\fIVmData\fP, \fIVmStk\fP, \fIVmExe\fP: Размер сегментов данных, стека и кода.
.IP *
\fIVmLib\fP: Размер кода общей библиотеки.
.IP *
\fIVmPTE\fP: Размер элементов страничной таблицы (начиная с Linux 2.6.10).
.IP *
\fIThreads\fP: Количество нитей в процессе, содержащем эту нить.
.IP *
\fISigQ\fP: В этом поле содержится два числа, разделённых косой чертой, которые
относятся к сигналам, имеющимся в очереди для реального пользовательского ID
этого процесса. Первое число показывает текущее количество сигналов в
очереди для реального пользовательского ID, а второе — ограничитель ресурса
на количество сигналов в очереди для этого процесса (смотрите описание
\fBRLIMIT_SIGPENDING\fP в \fBgetrlimit\fP(2)).
.IP *
\fISigPnd\fP, \fIShdPnd\fP: Количество сигналов, ждущих обработки нитью и всем
процессом (см. \fBpthreads\fP(7) и \fBsignal\fP(7)).
.IP *
\fISigBlk\fP, \fISigIgn\fP, \fISigCgt\fP: Маски, отражающие блокированные,
игнорируемые и перехваченные сигналы (см. \fBsignal\fP(7)).
.IP *
\fICapInh\fP, \fICapPrm\fP, \fICapEff\fP: Маски мандатов, включённые в наследуемый,
разрешающий и эффективный наборы (см. \fBcapabilities\fP(7)).
.IP *
\fICapBnd\fP: Мандатный ограничивающий набор (начиная с ядра 2.6.26,
см. \fBcapabilities\fP(7)).
.IP *
\fICpus_allowed\fP: Маска процессоров, на которых может выполняться процесс
(начиная с Linux 2.6.24, см. \fBcpuset\fP(7)).
.IP *
\fICpus_allowed_list\fP: Тоже что предыдущий, но в "формате списка" (начиная с
Linux 2.6.26, см. \fBcpuset\fP(7)).
.IP *
\fIMems_allowed\fP: Маска узлов памяти, разрешённых для этого процесса (начиная
с Linux 2.6.24, см. \fBcpuset\fP(7)).
.IP *
\fIMems_allowed_list\fP: Тоже что и предыдущее, но в "формате списка" (начиная
с Linux 2.6.26, см. \fBcpuset\fP(7)).
.IP *
\fIvoluntary_context_switches\fP, \fInonvoluntary_context_switches\fP: Количество
намеренных и непреднамеренных переключений контекста (начиная с Linux
2.6.23).
.RE
.TP 
\fI/proc/[pid]/task\fP (начиная с Linux 2.6.0\-test6)
В этом каталоге содержатся подкаталоги, под одному на нить. Имя подкаталога
задаётся числом, которое является ID нити (\fI[tid]\fP) (см. \fBgettid\fP(2)). В
каждом подкаталоге есть набор файлов с одинаковыми именами и содержимым как
у каталогов \fI/proc/[pid]\fP. Для общих атрибутов всех нитей содержимое
каждого файла в подкаталогах \fItask/[tid]\fP будет одинаковым, как у
соответствующего файла в родительском каталоге \fI/proc/[pid]\fP (например, в
многонитевом процессе все файлы \fItask/[tid]/cwd\fP будут иметь одинаковое
значение, совпадающее с содержимым файла \fI/proc/[pid]/cwd\fP в родительском
каталоге, так как все нити в процессе используют общий рабочий каталог).Для
отличающихся атрибутов нитей соответствующие файлы в \fItask/[tid]\fP могут
иметь различные значения (например, различные поля в каждом файле
\fItask/[tid]/status\fP могут отличаться в каждой нити).

.\" The following was still true as at kernel 2.6.13
В многонитевом процессе содержимое каталога \fI/proc/[pid]/task\fP недоступно,
если выполнение главной нити уже завершилось (обычно вызовом
\fBpthread_exit\fP(3)).
.TP 
\fI/proc/apm\fP
Версия системы расширенного управления питанием и информация о батарее, если
ядро собрано с поддержкой \fBCONFIG_APM\fP.
.TP 
\fI/proc/bus\fP
Содержит подкаталоги для установленных шин.
.TP 
\fI/proc/bus/pccard\fP
Подкаталог для устройств PCMCIA, если ядро собрано с поддержкой
\fBCONFIG_PCMCIA\fP.
.TP 
\fI/proc/bus/pccard/drivers\fP
.TP 
\fI/proc/bus/pci\fP
Содержит различные подкаталоги шин и псевдо\-файлы, содержащие информацию о
шинах PCI, установленных устройствах и драйверах устройств. Некоторые из
этих файлов не являются текстовыми.
.TP 
\fI/proc/bus/pci/devices\fP
Информация о устройствах PCI. К ним можно получить доступ через \fBlspci\fP(8)
и \fBsetpci\fP(8).
.TP 
\fI/proc/cmdline\fP
Аргументы, переданные ядру Linux во время начальной загрузки. Часто это
делается через менеджер начальной загрузки, такой как \fBlilo\fP(8) или
\fBgrub\fP(8).
.TP 
\fI/proc/config.gz\fP (начиная с Linux 2.6)
В этом файле представлены параметры настройки, которые использовались при
сборке выполняющегося в данный момент ядра. Если формат одинаков с файлом
\&\fI.config\fP, который создаётся после настройки ядра (с помощью \fImake
xconfig\fP, \fImake config\fP и подобных команд). Содержимое файла сжато; для
просмотра и поиска используйте \fBzcat\fP(1), \fBzgrep\fP(1) и т.п. Пока не
внесены изменения в настройку ядра, содержимое \fI/proc/config.gz\fP и
показываемого по команде файла одинаково:
.in +4n
.nf

cat /lib/modules/$(uname \-r)/build/.config
.fi
.in
.IP
Файл \fI/proc/config.gz\fP доступен только, если ядро собрано с поддержкой
\fBCONFIG_IKCONFIG_PROC\fP.
.TP 
\fI/proc/cpuinfo\fP
Это коллекция элементов, зависящих от процессора и системной архитектуры;
для каждой поддерживаемой архитектуры список различен. Имеются только две
общих записи: \fIprocessor\fP \(em обозначает номер процессора и
\fIbogomips\fP\(em системная константа, которая высчитывается во время
инициализации ядра. Для многопроцессорных машин информация предоставляется
по каждому процессору.
.TP 
\fI/proc/devices\fP
Текстовый список старших (major) номеров устройств и групп устройств. Он
может быть использован сценариями MAKEDEV для того, чтобы создать
устройства, поддерживаемые ядром.
.TP 
\fI/proc/diskstats\fP (начиная с Linux 2.5.69)
Файл со статистикой дискового ввода\-вывода по каждому
устройству. Дополнительная информация доступна в файле
\fIDocumentation/iostats.txt\fP из исходного кода ядра.
.TP 
\fI/proc/dma\fP
Список рабочих зарегистрированных каналов DMA (прямого доступа в память)
\fIISA\fP.
.TP 
\fI/proc/driver\fP
Пустой подкаталог.
.TP 
\fI/proc/execdomains\fP
Список доменов исполнения (индивидуально для ABI).
.TP 
\fI/proc/fb\fP
Информация о фрейм\-буфере, если ядро собрано с поддержкой \fBCONFIG_FB\fP.
.TP 
\fI/proc/filesystems\fP
Текстовый список файловых систем, которые встроены в ядро или загружены в
данный момент посредством модулей. (Смотрите также \fBfilesystems\fP(5).) Если
файловая система помечена "nodev", то это означает, что для монтирования
блочного устройства не требуется (например, виртуальная файловая система и
сетевая файловая система).

В частности, этот файл может использоваться программой \fBmount\fP(8) для
поиска нужной файловой системы, если она не указана при монтировании и её
тип невозможно определить. При этом пробуются все файловые системы из этого
файла (за исключением отмеченных "nodev").
.TP 
\fI/proc/fs\fP
Пустой подкаталог.
.TP 
\fI/proc/ide\fP
Данный подкаталог существует в системах с шиной IDE. Для каждого канала IDE
и подключенных устройств имеется отдельный каталог. Файлы каталога:

.in +4n
.nf
cache              размер буфера в KБ
capacity           количество секторов
driver             версия драйвера
geometry           физическая и логическая геометрия
identify           в шестнадцатеричном виде
media              тип носителя
model              номер модели производителя
settings           настройки драйвера
smart_thresholds   в шестнадцатеричном виде
smart_values       в шестнадцатеричном виде
.fi
.in

Утилита \fBhdparm\fP(8) предоставляет доступ к этой информации в дружественном
формате.
.TP 
\fI/proc/interrupts\fP
Используется для записи количества прерываний по каждому процессору и по
каждому устройству ввода\-вывода. Начиная с Linux 2.6.24 для архитектур i386
и x86_64 (по крайней мере), также включены внутренние прерывания системы (то
есть, не связанные с устройством как таковым), такими как NMI (немаскируемые
прерывания), LOC (прерывание локального таймера) и для многопроцессорных
систем: TLB (прерывание сброса TLB), RES (прерывание перепланирования), CAL
(прерывание вызова удалённой функции), и, возможно другие. Очень легко
понять, так как записи в ASCII.
.TP 
\fI/proc/iomem\fP
Карта памяти ввода/вывода в Linux 2.4.
.TP 
\fI/proc/ioports\fP
Список зарегистрированных областей портов ввода\-вывода, которые используются
в данный момент.
.TP 
\fI/proc/kallsyms\fP (начиная с Linux 2.5.71)
Содержит определения экспортируемых ядром символов, используемые
инструментами \fBmodules\fP(X) для динамической компоновки и связывания
загружаемых модулей. В Linux 2.5.47 и ранее был подобный файл \fIksyms\fP, но
имел немного другой синтаксис.
.TP 
\fI/proc/kcore\fP
Этот файл отображает физическую память системы и хранится в формате ELF
core. С помощью этого псевдо\-файла и ядра, из которого не убраны таблицы
символов (\fI/usr/src/linux/vmlinux\fP), можно использовать GDB для проверки
текущего состояния любых структур данных ядра.

Полная длина этого файла \(em это размер физической памяти (RAM) плюс 4КБ.
.TP 
\fI/proc/kmsg\fP
Этот файл может быть использован вместо системного вызова \fBsyslog\fP(2) для
чтения сообщений ядра. Процесс должен иметь привилегии суперпользователя,
чтобы читать этот файл, причём делать это может только один процесс. Данный
файл невозможно прочесть, если запущен процесс syslog, который использует
системный вызов \fBsyslog\fP(2) для протоколирования сообщений ядра.

Информация из этого файла извлекается с помощью программы \fBdmesg\fP(1).
.TP 
\fI/proc/ksyms\fP (Linux 1.1.23\-2.5.47)
Смотрите \fI/proc/kallsyms\fP.
.TP 
\fI/proc/loadavg\fP
Первые три поля в этом файле содержат параметры средней загрузки, которые
предоставляют собой количество заданий в очереди выполнения (состояние R)
или ожидают дискового ввода\-вывода (состояние D) в среднем за 1, 5 и 15
минут. Это то же самое, что и средняя загрузка, которую выдаёт \fBuptime\fP(1)
и другие программы. Четвёртое поле состоит из двух чисел, разделённых косой
чертой (/). Первое из них показывает количество исполняемых планируемых
ядерных элементов в данный момент (процессы, нити). Значение после косой
черты показывает количество планируемых ядерных элементов, существующих в
системе. В пятом поле содержится PID процесса, который был создан системой
последним.
.TP 
\fI/proc/locks\fP
Этот файл показывает текущие файловые блокировки (\fBflock\fP(2) и \fBfcntl\fP(2))
параметры (\fBfcntl\fP(2)).
.TP 
\fI/proc/malloc\fP (только до Linux 2.2 включительно)
.\" It looks like this only ever did something back in 1.0 days
Данный файл существует только, если ядро собрано с поддержкой
\fBCONFIG_DEBUG_MALLOC\fP.
.TP 
\fI/proc/meminfo\fP
Этот файл содержит статистику по использованию памяти системы. Он
используется программой \fBfree\fP(1) для формирования отчёта о свободной и
используемой памяти (как физической, так и подкачки), а также общей памяти и
памяти под буферы, которую использует ядро.
.TP 
\fI/proc/modules\fP
Текстовый список модулей, которые были загружены системой. Смотрите также
\fBlsmod\fP(8).
.TP 
\fI/proc/mounts\fP
До ядра версии 2.4.19, в этом файле содержался список всех файловых систем,
которые примонтированы в настоящий момент.С введением попроцессных
пространств имён монтирования в Linux 2.4.19, этот файл стал указывать на
\fI/proc/self/mounts\fP, в котором представлен список точек монтирования из
пространства монтирования процесса. Формат этого файла описан в \fBfstab\fP(5).
.TP 
\fI/proc/mtrr\fP
Диапазонные регистры типа памяти. Подробности смотрите в файле дерева
исходного кода ядра \fIDocumentation/mtrr.txt\fP.
.TP 
\fI/proc/net\fP
Разные псевдо\-файлы, содержащие информацию по какой\-либо части сетевой
подсистемы. Они содержат структуры в ASCII и прекрасно читаются утилитой
\fBcat\fP(1). Однако, стандартная утилита \fBnetstat\fP(8) предоставляет более
понятную информацию из этих файлов.
.TP 
\fI/proc/net/arp\fP
Файл содержит читабельный ASCII\-дамп ARP таблицы ядра, которая используется
для определения адресов. Она покажет как полученные динамически, так и
заданные явно записи ARP. Формат файла:

.nf
.in 8n
\f(CWIP\-адрес       Тип обор. Флаги     Аппарат. адрес      Маска  Устройство
192.168.0.50   0x1       0x2       00:50:BF:25:68:F3   *      eth0
192.168.0.250  0x1       0xc       00:00:00:00:00:00   *      eth0\fP
.fi
.in

Здесь "IP\-адрес" это адрес машины в нотации IPv4, "Тип обор." это тип
аппаратного обеспечения для этого адреса согласно RFC\ 826. Флаги \(em это
внутренние флаги структуры ARP(определённые в
\fI/usr/include/linux/if_arp.h\fP), а "Аппарат. адрес" \(em это адрес
канального уровня для IP\-адреса, если он известен.
.TP 
\fI/proc/net/dev\fP
Псевдо\-файл dev содержит информацию о состоянии сетевых устройств. Она
представляет собой количество принятых и отправленных пакетов, количество
ошибок и коллизий и другую базовую статистику. Эта информация используется
программой \fBifconfig\fP(8) для вывода отчёта о состоянии устройства. Формат
информации:

.nf
.in 1n
\f(CWИнтер\-|   Принято                                                |  Передано
 фейс |байт     пакетов ошиб отбр fifo фрейм сжато       мульт\-ст|байт     пакетов  ошиб отбр fifo колл несущ   сжато
    lo: 2776770   11307    0    0    0     0          0         0  2776770   11307    0    0    0     0       0          0
  eth0: 1215645    2751    0    0    0     0          0         0  1782404    4324    0    0    0   427       0          0
  ppp0: 1622270    5552    1    0    0     0          0         0   354130    5669    0    0    0     0       0          0
  tap0:    7714      81    0    0    0     0          0         0     7714      81    0    0    0     0       0          0\fP
.in
.fi
.\" .TP
.\" .I /proc/net/ipx
.\" No information.
.\" .TP
.\" .I /proc/net/ipx_route
.\" No information.
.TP 
\fI/proc/net/dev_mcast\fP
Определено в \fI/usr/src/linux/net/core/dev_mcast.c\fP:
.nf
.in +5
индекс имя_интерфейса  dmi_u dmi_g адрес_dmi
2      eth0            1     0     01005e000001
3      eth1            1     0     01005e000001
4      eth2            1     0     01005e000001
.in
.fi
.TP 
\fI/proc/net/igmp\fP
Internet Group Management Protocol (Протокол Управления
Интернет\-Группами). Определён в \fI/usr/src/linux/net/core/igmp.c\fP.
.TP 
\fI/proc/net/rarp\fP
Данный файл использует тот же формат, что и файл \fIarp\fP и содержит текущую
обратную базу данных адресов ARP, используемую при работе служб обратного
поиска адресов \fBrarp\fP(8). Если поддержки RARP нет в ядре, то этот файл не
существует.
.TP 
\fI/proc/net/raw\fP
.\" .TP
.\" .I /proc/net/route
.\" No information, but looks similar to
.\" .BR route (8).
Содержит дамп таблицы беспротокольных (RAW) сокетов. Большая часть этой
информации не используется ни для чего, кроме отладки. Значение «s»" \(em
это хешируемый слот ядра для сокета, «local_address» \(em это пара локальный
адрес, номер протокола. \&«St» \(em это внутреннее состояние
сокета. «tx_queue» и «rx_queue» \(em это исходящая и входящая очереди данных
в том, виде в каком они используются в памяти ядра. Поля «tr»,
«tm\->when» и «rexmits» не используются в RAW. Поле «uid» содержит
эффективный UID создателя сокета.
.TP 
\fI/proc/net/snmp\fP
Этот файл содержит ASCII данные, необходимые SNMP\-агенту для баз управляющей
информации IP, ICMP, TCP и UDP.
.TP 
\fI/proc/net/tcp\fP
Содержит дамп таблицы TCP\-сокетов. Большая часть этой информации не
используется ни для чего, кроме отладки. Значение "sl" \(em это хешируемый
слот ядра для сокета, "local_address" \(em это пара локальный адрес и номер
порта. "rem_address" \(em это пара удалённого локального адреса и номера
порта. \&"St" \(em это внутреннее состояние сокета. "tx_queue" и "rx_queue"
\(em это исходящая и входящая очереди данных в том, виде в каком они
используются в памяти ядра. Поля "tr", "tm\->when" и "rexmits" содержат
внутреннюю информацию ядра о состоянии сокета и полезны только для
отладки. Поле "uid" содержит эффективный UID создателя сокета.
.TP 
\fI/proc/net/udp\fP
Содержит дамп таблицы UDP\-сокетов. Большая часть этой информации не
используется ни для чего, кроме отладки. Значение "sl" \(em это хешируемый
слот ядра для сокета, "local_address" \(em это пара локальный адрес и номер
порта. "rem_address" \(em это пара удалённого локального адреса и номера
порта. \&"St" \(em это внутреннее состояние сокета. "tx_queue" и "rx_queue"
\(em это исходящая и входящая очереди данных в том, виде в каком они
используются в памяти ядра. Поля "tr", "tm\->when" и "rexmits" не
используются в UDP. Поле "uid" содержит эффективный UID создателя
сокета. Формат:

.nf
.in 1n
\f(CWsl  local_address rem_address   st tx_queue rx_queue tr rexmits  tm\->when uid
 1: 01642C89:0201 0C642C89:03FF 01 00000000:00000001 01:000071BA 00000000 0
 1: 00000000:0801 00000000:0000 0A 00000000:00000000 00:00000000 6F000100 0
 1: 00000000:0201 00000000:0000 0A 00000000:00000000 00:00000000 00000000 0\fP
.in
.fi
.TP 
\fI/proc/net/unix\fP
Показывает список доменных сокетов UNIX, присутствующих в системе, а также
их состояния. Формат:
.nf
.sp .5
\f(CWНомер СчётчикСсылок Протокол Флаги    Тип  Состояние Путь
 0:   00000002      00000000 00000000 0001 03
 1:   00000001      00000000 00010000 0001 01        /dev/printer\fP
.sp .5
.fi

Здесь «Номер» \(em это номер слота в таблице ядра, «СчётчикСсылок» \(em
количество пользователей данного сокета, «Протокол» \(em в настоящий момент
всегда 0, «Флаги» \(em представляет внутренние флаги ядра, содержащие
состояние сокета. «Тип» в настоящий момент всегда равен "1" (датаграммы
доменных сокетов UNIX ядром пока не поддерживаются).  \&«Состояние» \(em это
внутреннее состояние сокета, а «Путь» \(em это путь привязки (если он есть)
данного сокета.
.TP 
\fI/proc/partitions\fP
Содержит старший (major) и младший (minor) номер каждого раздела, а также
количество блоков и имя раздела.
.TP 
\fI/proc/pci\fP
Это список всех устройств PCI, найденных во время инициализации ядра, а
также их конфигурация.

.\" FIXME /proc/sched_debug
.\" .TP
.\" .IR /proc/sched_debug " (since Linux 2.6.23)"
.\" See also /proc/[pid]/sched
Этот файл устарел и был заменён на новый интерфейс \fI/proc\fP для PCI
(\fI/proc/bus/pci\fP). Он стал необязательным в Linux 2.2 (доступен, если
установлен параметр сборки ядра \fBCONFIG_PCI_OLD_PROC\fP). Он стал ещё более
необязательным в Linux 2.4. В Linux 2.6 он стал не рекомендуемым (но ещё
доступным через параметр \fBCONFIG_PCI_LEGACY_PROC\fP), и, наконец, был
полностью удалён в Linux 2.6.17.
.TP 
\fI/proc/scsi\fP
Каталог с псевдо\-файлом \fIscsi\fP и различными каталогами низкоуровневых
драйверов SCSI, которые содержат по одному файлу на каждый SCSI\-узел в
системе, и которые представляют некоторую информацию о части подсистемы
ввода/вывода SCSI. Данные файлы содержат ASCII структуры и прекрасно
читаются утилитой \fBcat\fP(1).

Также вы можете писать в некоторые из этих файлов для перенастройки
подсистемы или включения/выключения некоторых возможностей.
.TP 
\fI/proc/scsi/scsi\fP
Это список всех SCSI\-устройств, которые известны ядру. Список похож на тот,
что выдается при начальной загрузке. scsi в настоящий момент поддерживает
только команду \fIadd\-single\-device\fP, которая позволяет суперпользователю
добавлять устройства на ходу, без выключения машины.

Команда
.in +4n
.nf

echo \(aqscsi add\-single\-device 1 0 5 0\(aq > /proc/scsi/scsi

.fi
.in
заставит адаптер scsi1 просканировать SCSI канал 0, чтобы найти устройство с
ID 5 и LUN 0. Если по этому адресу уже есть известное устройство или если
заданный адрес неправилен, то будет возвращена ошибка.
.TP 
\fI/proc/scsi/[имя_драйвера]\fP
\fI[Именем_драйвера]\fP в настоящий момент могут быть: NCR53c7xx, aha152x,
aha1542, aha1740, aic7xxx, buslogic, eata_dma, eata_pio, fdomain, in2000,
pas16, qlogic, scsi_debug, seagate, t128, u15\-24f, ultrastore или
wd7000. Эти каталоги показывают все драйверы, который зарегистрированы хотя
бы одним SCSI HBA. Каждый каталог содержит по одному файлу на каждый
зарегистрированный узел. Имя каждого узла соответствует номеру, который был
получен этим узлом во время инициализации.

Чтение данных файлов обычно показывает информацию о конфигурации драйвера и
узла, статистику и т. д.

Записывая в эти файлы, можно добиться различных результатов от разных
узлов. Например, командами \fIlatency\fP и \fInolatency\fP суперпользователь может
включить и выключить команду кода вычисления задержки в драйвере
eata_dma. Командами \fIlockup\fP и \fIunlock\fP суперпользователь может управлять
блокировками шины, которые симулирует драйвер scsi_debug.
.TP 
\fI/proc/self\fP
Этот каталог указывает на процесс, обращающийся к файловой системе \fI/proc\fP,
и идентичен каталогу \fI/proc\fP, соответствующему номеру этого процесса.
.TP 
\fI/proc/slabinfo\fP
Информация о кэшах ядра. Начиная с Linux 2.6.16 этот файл существует только,
если включён параметр сборки ядра \fBCONFIG_SLAB\fP. Список столбцов
\fI/proc/slabinfo\fP:
.in +4n
.nf

cache\-name
num\-active\-objs
total\-objs
object\-size
num\-active\-slabs
total\-slabs
num\-pages\-per\-slab
.fi
.in

Дополнительную информацию смотрите в \fBslabinfo\fP(5).
.TP 
\fI/proc/stat\fP
Статистика ядра/системы. Различается для разных архитектур. Общие элементы:
.RS
.TP 
\fIcpu  3357 0 4313 1362393\fP
.\" 1024 on Alpha and ia64
.\" FIXME Actually, the following info about the /proc/stat 'cpu' field
.\"       does not seem to be quite right (at least in 2.6.12)
Количество времени, измеряемое в единицах USER_HZ (на большинстве архитектур
1/100\-я секунды, чтобы получить правильное значение используйте
\fIsysconf(_SC_CLK_TCK)\fP), которые система проводит, соответственно, в
пользовательском режиме, в пользовательском режиме с низким приоритетом
(любезность, nice), в режиме системы и в режиме простаивающих
задач. Последнее значение должно быть в USER_HZ раз больше второго значения
из псевдо\-файла uptime.

В Linux 2.6 эта строка содержит три дополнительных столбца: \fIiowait\fP \(em
время ожидания завершения ввода\-вывода (начиная с 2.5.41); \fIirq\fP \(em время
обслуживания прерываний (начиная с 2.6.0\-test4); \fIsoftirq\fP \(em время
обслуживания softirqs (начиная с 2.6.0\-test4).

Начиная с Linux 2.6.11 появился восьмой столбец, \fIsteal\fP \(em упущенное
время \(em время, потраченное в других операционных системах при работе в
виртуализованном окружении.

.\" See Changelog entry for 5e84cfde51cf303d368fcb48f22059f37b3872de
Начиная с Linux 2.6.24 появился девятый столбец, \fIguest\fP, в котором
содержится время, потраченной на работу виртуального процессора для гостевых
операционных систем, управляемых ядром Linux.
.TP 
\fIpage 5741 1808\fP
Количество страниц, которые система загрузила с диска и выгрузила на диск.
.TP 
\fIswap 1 0\fP
Количество страниц подкачки, которые загружены и выгружены.
.TP 
.\" FIXME The following is not the full picture for the 'intr' of
.\"       /proc/stat on 2.6:
\fIintr 1462898\fP
Количество прерываний, обработанных с момента загрузки системы, по каждому
возможному системному прерыванию. В первом столбце содержится общее
количество всех обработанных прерываний; в каждом последующем столбце
содержится общее количество по конкретному прерыванию.
.TP 
\fIdisk_io: (2,0):(31,30,5764,1,2) (3,0):\fP...
(major,minor):(noinfo, read_io_ops, blks_read, write_io_ops, blks_written)
.br
(только в Linux 2.4)
.TP 
\fIctxt 115315\fP
Количество переключений контекста, произошедших в системе.
.TP 
\fIbtime 769041601\fP
Время начальной загрузки прошедшее с начала эпохи, 1970\-01\-01 00:00:00 +0000
(UTC), в секундах.
.TP 
\fIprocesses 86031\fP
Количество разветвлений (вызовов fork) с момента начальной загрузки.
.TP 
\fIprocs_running 6\fP
Количество процессов в состоянии работы (Linux 2.5.45 и новее).
.TP 
\fIprocs_blocked 2\fP
Количество заблокированных процессов, ожидающих завершения ввода\-вывода
(Linux 2.5.45 и новее).
.RE
.TP 
\fI/proc/swaps\fP
Используемое пространство подкачки. См. также \fBswapon\fP(8).
.TP 
\fI/proc/sys\fP
Этот каталог (присутствующий, начиная с версии 1.3.57) содержит несколько
файлов и подкаталогов, которые соответствуют переменным ядра. Эти переменные
могут быть прочитаны и иногда изменены с через файловую систему \fI/proc\fP, а
также с помощью (не рекомендуется) системного вызова \fBsysctl\fP(2).
.TP 
\fI/proc/sys/abi\fP (начиная с Linux 2.4.10)
.\" On some systems, it is not present.
Этот каталог может содержать файлы информацию об исполнении приложений
(application binary information). Дополнительную информацию смотрите в файле
исходного кода ядра \fIDocumentation/sysctl/abi.txt\fP.
.TP 
\fI/proc/sys/debug\fP
Данный каталог может быть пуст.
.TP 
\fI/proc/sys/dev\fP
Данный каталог содержит информацию, специфичную для устройств (например,
\fIdev/cdrom/info\fP). В некоторых системах он может быть пуст.
.TP 
\fI/proc/sys/fs\fP
Подкаталог, содержащий файлы и подкаталоги с переменными ядра, касающиеся
файловых систем.
.TP 
\fI/proc/sys/fs/binfmt_misc\fP
Документацию по файлам в этом каталоге можно найти в исходном коде ядра в
\fIDocumentation/binfmt_misc.txt\fP.
.TP 
\fI/proc/sys/fs/dentry\-state\fP (начиная с Linux 2.2)
Файл содержит информацию о состоянии кэша каталогов (dcache). В нём есть
шесть чисел, \fInr_dentry\fP, \fInr_unused\fP, \fIage_limit\fP (возраст в секундах),
\fIwant_pages\fP (страниц, запрошенных системой) и два пустых значения.
.RS
.IP * 2
\fInr_dentry\fP содержит количество отведённых dentries (элементов dcache). Это
поле не используется в Linux 2.2.
.IP *
\fInr_unused\fP содержит количество неиспользуемых dentries.
.IP *
.\" looks like this is unused in kernels 2.2 to 2.6
\fIage_limit\fP \(em  это возраст в секундах по истечении которого элементы
dcache могут быть отозваны, когда памяти становится мало.
.IP *
.\" looks like this is unused in kernels 2.2 to 2.6
\fIwant_pages\fP не равно нулю, если ядро вызвало shrink_dcache_pages(), а
dcache ещё не сокращён (pruned).
.RE
.TP 
\fI/proc/sys/fs/dir\-notify\-enable\fP
Этот файл может быть использован для включения и выключения интерфейса
\fIdnotify\fP, описанного в \fBfcntl\fP(2), во всей системе. Значение 0 в этом
файле отключает интерфейс, а значение 1 включает его.
.TP 
\fI/proc/sys/fs/dquot\-max\fP
Этот файл показывает максимальное количество кэшируемых элементов дисковых
квот. В некоторых (2.4) системах его нет. Если число свободных кэшируемых
дисковых квот является очень маленьким, а у вас в системе одновременно
работает большое количество пользователей, то вам, возможно, захочется
увеличить этот лимит.
.TP 
\fI/proc/sys/fs/dquot\-nr\fP
Этот файл показывает количество выделенных в использование элементов
дисковых квот и количество свободных элементов дисковых квот.
.TP 
\fI/proc/sys/fs/epoll\fP (начиная с Linux 2.6.28)
В этом каталоге содержится файл \fImax_user_watches\fP, который можно
использовать для ограничения количества памяти ядра, потребляемой
интерфейсом \fIepoll\fP. Подробности смотрите в \fBepoll\fP(7).
.TP 
\fI/proc/sys/fs/file\-max\fP
Этот файл показывает системный лимит на количество открытых файлов для всех
процессов. (См. также \fBsetrlimit\fP(2), который можно использовать, чтобы
установить ограничение \fBRLIMIT_NOFILE\fP на количество открытых файлов файлов
на процесс). Если вы получаете большое количество сообщений об ошибках о
невозможности открыть файловые дескрипторы, попытайтесь увеличить это
значение:
.br

.br
.nf
\f(CW    echo 100000 > /proc/sys/fs/file\-max\fP
.fi

Константа ядра \fBNR_OPEN\fP устанавливает верхний лимит значения, которое
может быть установлено в \fIfile\-max\fP.

Если вы увеличиваете \fI/proc/sys/fs/file\-max\fP, то позаботьтесь увеличить
\fI/proc/sys/fs/inode\-max\fP, установив его в 3\-4 раза больше, чем новое
значение \fI/proc/sys/fs/file\-max\fP, в противном случае вам может не хватить
индексных дескрипторов (inodes).

Привилегированный процесс (с \fBCAP_SYS_ADMIN\fP) может изменять ограничение
\fIfile\-max\fP.
.TP 
\fI/proc/sys/fs/file\-nr\fP
Этот файл (доступный только для чтения) показывает количество открытых
файлов. Он содержит три числа: количество выделенных файловых дескрипторов,
количество свободных файловых дескрипторов и максимальное количество
файловых дескрипторов. Ядро выделяет файловые дескрипторы динамически, но
оно не освобождает их сразу же. Если количество выделенных файлов
приближается к максимальному, то вам необходимо увеличить максимальное
значение. Когда количество свободных файловых дескрипторов велико и у вас не
бывает неожиданных пиков использования файловых дескрипторов, вам наверняка
не понадобится увеличивать максимальное значение.
.TP 
\fI/proc/sys/fs/inode\-max\fP
Этот файл содержит максимальное количество индексных дескрипторов,
находящихся в памяти. В некоторых (2.4) системах, его может не быть. Это
количество должно быть в 3\-4 раза больше, чем максимальное значение в
\fIfile\-max\fP, так как \fIstdin\fP, \fIstdout\fP и сетевым сокетам также необходимы
индексные дескрипторы. Если вам регулярно не хватает индексных дескрипторов,
то вам необходимо увеличить это значение.
.TP 
\fI/proc/sys/fs/inode\-nr\fP
Этот файл содержит первые два значения из \fIinode\-state\fP.
.TP 
\fI/proc/sys/fs/inode\-state\fP
Этот файл содержит семь значений: \fInr_inodes\fP, \fInr_free_inodes\fP,
\fIpreshrink\fP и четыре пустых.  \fInr_inodes\fP \(em это количество индексных
дескрипторов, выделенных системой. Оно может быть несколько больше, чем
\fIinode\-max\fP, потому что Linux выделяет их по полной странице за
раз. \fInr_free_inodes\fP представляет количество свободных индексных
дескрипторов. \fIpreshrink\fP будет ненулевым, когда \fInr_inodes\fP >
\fIinode\-max\fP и системе понадобится сократить список индексных дескрипторов,
вместо выделения новых.
.TP 
\fI/proc/sys/fs/inotify\fP (начиная с Linux 2.6.13)
Этот каталог содержит файлы \fImax_queued_events\fP, \fImax_user_instances\fP, и
\fImax_user_watches\fP, которые можно использовать для ограничения количества
памяти ядра, потребляемом интерфейсом \fIinotify\fP. Подробней смотрите в
\fBinotify\fP(7).
.TP 
\fI/proc/sys/fs/lease\-break\-time\fP
В этом файле задаётся период, в течении которого, ядро предоставляет
процессу возможность удерживать файл (\fBfcntl\fP(2)), по окончании которого
оно посылает сигнал процессу, извещая его о том, что другой процесс ожидает
открытия этого файла. Если удерживающий файл процесс не удалит или не
отменит удержание файла в течении указанного периода, то ядро принудительно
снимет удержание.
.TP 
\fI/proc/sys/fs/leases\-enable\fP
Этот файл можно использовать, чтобы разрешить или запретить в системе
возможность удержания файла (\fBfcntl\fP(2)). Если файл содержит 0, удержание
запрещено. Если не ноль \(em разрешено.
.TP 
\fI/proc/sys/fs/mqueue\fP (начиная с Linux 2.6.6)
В этом каталоге содержатся файлы \fImsg_max\fP, \fImsgsize_max\fP и \fIqueues_max\fP,
которые контролируют ресурсы, используемые очередями сообщений
POSIX. Подробней смотрите в \fBmq_overview\fP(7).
.TP 
\fI/proc/sys/fs/overflowgid\fP и \fI/proc/sys/fs/overflowuid\fP
Эти файлы позволяют вам изменить значение фиксированных UID и GID. По
умолчанию оно равно 65534. Некоторые файловые системы поддерживают только
16\-битные UID и GID, в то время как в Linux UID и GID являются
32\-битными. Когда монтируется одна из таких файловых систем с правами,
позволяющими запись, все UID или GID, которые превышают 65535, транслируются
перед записью на диск в значения переполнения.
.TP 
\fI/proc/sys/fs/pipe\-max\-size\fP (начиная с Linux 2.6.35)
Значение в этом файле определяет максимальное ограничение увеличения ёмкости
канала с помощью операции \fBF_SETPIPE_SZ\fP вызова \fBfcntl\fP(2). Это
ограничение накладывается только на непривилегированные процессы. Значение
по умолчанию в файле равно 1,048,576. Значение в этом файле может
округляться в большую сторону, отражая фактически используемое значение для
удобства реализации. Для определения округлённого значение, посмотрите
содержимое этого файла после записи в него значения. Минимальное значение,
которое можно присвоить, равно значению страницы в системе.
.TP 
\fI/proc/sys/fs/suid_dumpable\fP (начиная с Linux 2.6.13)
.\" The following is based on text from Documentation/sysctl/kernel.txt
Значение в этом файле определяет будут ли создаваться файлы дампа памяти для
файлов с установленным битом set\-user\-ID или других защищённых/с добавкой
(tainted) исполняемых файлов. Можно указать три целых значения:
.sp
\fI0\ (по умолчанию)\fP Традиционное поведение ( до Linux 2.6.13). Дамп памяти
не создаётся для процесса, у которого изменены учётные данные (вызовом
\fBseteuid\fP(2), \fBsetgid\fP(2) и подобным или при исполнении программы с
установленными битами set\-user\-ID или set\-group\-ID) или если для
исполняемого файла нет права на чтение.
.sp
\fI1\ ("для отладки")\fP Если возможно, создавать дамп памяти для любого
процесса. Дамп памяти будет принадлежать пользователю с ID владельца
выполнявшегося процесса, и никаких мер безопасности предпринято не
будет. Предназначено только для системной отладки. Ptrace не проверяется.
.sp
\fI2\ ("suidsafe")\fP Дамп памяти будет выполняться для любого исполняемого
файла, для которого обычно это не происходит (см. "0" ранее) и будет
доступен на чтение только суперпользователю. Файл с дампом памяти обычный
пользователь может удалять, но не читать. По соображениям безопасности дампы
памяти в этом режиме не будут перезаписываться новыми или другими
файлами. Этот режим подходит для администраторов, когда администраторы
пытаются разобраться с проблемами в обычном окружении.
.TP 
\fI/proc/sys/fs/super\-max\fP
Этот файл управляет максимальным значением суперблоков и таким образом
максимальным количеством файловых систем, которое может смонтировать
ядро. Вам необходимо увеличивать \fIsuper\-max\fP только в том случае, если
нужно смонтировать больше файловых систем, чем это позволяет значение в
файле \fIsuper\-max\fP.
.TP 
\fI/proc/sys/fs/super\-nr\fP
Этот файл содержит количество файловых систем, которое смонтировано в данный
момент.
.TP 
\fI/proc/sys/kernel\fP
В этом каталоге содержатся файлы, контролирующие набор параметров ядра,
описанных далее.
.TP 
\fI/proc/sys/kernel/acct\fP
В этом файле содержатся три числа: \fIhighwater\fP, \fIlowwater\fP и
\fIfrequency\fP. Если включён учёт процессов в стиле BSD, то эти значения
управляют его поведением. Если свободного места на файловой системе, куда
осуществляется протоколирование учёта становится меньше, чем \fIlowwater\fP
процентов, то учёт процессов приостанавливается. Если свободного места
становится больше, чем \fIhighwater\fP процентов, то учёт процессов
возобновляется. Значение \fIfrequency\fP определяет как часто ядро проверяет
свободное место (в секундах). По умолчанию значения соответственно
составляют 4, 2 и 30. Таким образом, приостановка учёта осуществляется, если
свободно менее 2% места на диске; возобновление если места больше или равно
4%; информация о свободном месте обновляется каждые 30 секунд.
.TP 
\fI/proc/sys/kernel/cap\-bound\fP (с Linux 2.2 до 2.6.24)
Этот файл содержит \fIнабор привязанных мандатов\fP ядра (выражаемый как
десятичные числа со знаком). Этот набор мандатов, предоставляемых процессу
во время \fBexecve\fP(2), которые складываются посредством битового умножения
(AND). Начиная с Linux 2.6.25, глобального набора привязанных мандатов
больше нет, теперь свой набор привязанных мандатов есть у каждой нити;
смотрите \fBcapabilities\fP(7).
.TP 
\fI/proc/sys/kernel/core_pattern\fP
Смотрите \fBcore\fP(5).
.TP 
\fI/proc/sys/kernel/core_uses_pid\fP
Смотрите \fBcore\fP(5).
.TP 
\fI/proc/sys/kernel/ctrl\-alt\-del\fP
Этот файл управляет обработкой нажатия клавиш Ctrl\-Alt\-Del. Когда значение в
этом файле равно 0, Ctrl\-Alt\-Del обрабатывается и производит вызов программы
\fBinit\fP(8) для выполнения контролируемого перезапуска системы. Когда
значение в файле больше 0, реакция Linux соответствует Vulcan Nerve Pinch
(tm) [коронный приём расы Vulcan, см. сериал Star Trek], согласно которому
произойдёт немедленная перезагрузка, даже без синхронизации буферов
дисков. Замечание: когда какая\-либо программа (типа dosemu) работает с
клавиатурой "напрямую", нажатие ctrl\-alt\-del обработается этой программой,
до того как оно достигнет уровня tty ядра и, таким образом, именно эта
программа будет решать, что делать.
.TP 
\fI/proc/sys/kernel/hotplug\fP
Этот файл содержит путь для агента политики устройств. По умолчанию это файл
"/sbin/hotplug".
.TP 
\fI/proc/sys/kernel/domainname\fP и \fI/proc/sys/kernel/hostname\fP
могут быть использованы для установки имени домена службы NIS/YP и имени
узла вашей машины точно таким же образом как и командами \fBdomainname\fP(1) и
\fBhostname\fP(1), т.е.:

.in +4n
.nf
#\fB echo \(aqdarkstar\(aq > /proc/sys/kernel/hostname\fP
#\fB echo \(aqmydomain\(aq > /proc/sys/kernel/domainname\fP
.fi
.in

выполнят тоже самое, что и команды

.in +4n
.nf
#\fB hostname \(aqdarkstar\(aq\fP
#\fB domainname \(aqmydomain\(aq\fP
.fi
.in

Однако заметим, что классический darkstar.frop.org имеет имя узла "darkstar"
и доменное имя DNS (Сервера Доменных Имен) "frop.org", не путайте с доменным
именем NIS (Службы Сетевой Информации) или как она раньше называлась YP
(Yellow Pages). Эти два доменных имени полностью различны по своей
сути. Подробности об это можно найти в справочной странице \fBhostname\fP(1).
.TP 
\fI/proc/sys/kernel/htab\-reclaim\fP
(только для PowerPC) Если значение в этом файле установлено в ненулевое
значение, то PowerPC htab (см. файл \fIDocumentation/powerpc/ppc_htab.txt\fP в
исходном коде ядра) сокращается каждый раз, когда система входит в цикл
простоя.
.TP 
\fI/proc/sys/kernel/l2cr\fP
(только для PowerPC) Этот файл содержит флаг, который управляет кэшем L2 на
процессорных платах G3. Если 0, кэш выключен. Если не ноль, то включен.
.TP 
\fI/proc/sys/kernel/modprobe\fP
В этом файле содержится путь к загрузчику модулей ядра. Значение по
умолчанию равно \fI/sbin/modprobe\fP. Файл существует только, если ядро собрано
с параметром \fBCONFIG_KMOD\fP. Он описан в файле \fIDocumentation/kmod.txt\fP из
дерева исходного кода ядра (есть только в ядре версии 2.4 и более ранних).
.TP 
\fI/proc/sys/kernel/msgmax\fP
Этот файл определяет системный лимит на максимальное число байт в одном
сообщении, которое пишется в очередь сообщений System V.
.TP 
\fI/proc/sys/kernel/msgmni\fP
Этот файл определяет системное ограничение на количество идентификаторов в
очереди сообщений (есть только в Linux 2.4 и новее).
.TP 
\fI/proc/sys/kernel/msgmnb\fP
Этот файл определяет системный параметр, используемый при начальной
настройке \fImsg_qbytes\fP для последовательно создаваемых очередей
сообщений. Настройка \fImsg_qbytes\fP задаёт максимальное число байт, которые
могут быть записаны в очередь сообщений.
.TP 
\fI/proc/sys/kernel/ostype\fP и \fI/proc/sys/kernel/osrelease\fP
Эти файлы содержат подстроки из \fI/proc/version\fP.
.TP 
\fI/proc/sys/kernel/overflowgid\fP и \fI/proc/sys/kernel/overflowuid\fP
Эти файлы дублируют файлы \fI/proc/sys/fs/overflowgid\fP и
\fI/proc/sys/fs/overflowuid\fP.
.TP 
\fI/proc/sys/kernel/panic\fP
Этот файл предоставляет доступ на чтение и запись к переменной ядра
\fIpanic_timeout\fP. Если значение в файле равно нулю, ядро будет зацикливаться
при крахе системы по panic; если не ноль, то это означает, что ядро должно
выполнить автоматическую перезагрузку после этого количества секунд. Когда
вы используете программный драйвер устройства watchdog (устройство,
периодически делающее проверку, что система функционирует), то рекомендуется
установить значение 60.
.TP 
\fI/proc/sys/kernel/panic_on_oops\fP (начиная с Linux 2.5.68)
Этот файл управляет поведением ядра, когда случается oops или BUG. Если файл
содержит 0, то система пытается продолжить работу. Если содержит 1, то
система выполняет задержку на несколько секунд (чтобы дать время klogd
записать вывод oops) и затем генерирует крах системы через panic. Если файл
\fI/proc/sys/kernel/panic\fP также содержит ненулевое значение, то машина будет
перезагружена.
.TP 
\fI/proc/sys/kernel/pid_max\fP (начиная с Linux 2.5.34)
.\" Prior to 2.6.10, pid_max could also be raised above 32768 on 32-bit
.\" platforms, but this broke /proc/[pid]
.\" See http://marc.theaimsgroup.com/?l=linux-kernel&m=109513010926152&w=2
Этот файл задаёт значение, после которого идентификаторы процессов (PID)
начинают использоваться с начала (значение в этом файле на единицу больше,
чем максимальный PID). По умолчанию, значение в этом файле составляет 32768,
т.е. означает тот же самый диапазон PID\-ов, что и в ранних ядрах. На
32\-битных платформах \(em 32768 \(em максимальное значение \fIpid_max\fP. На
64\-битных платформах \fIpid_max\fP может принимать любое значение до 2^22
(\fBPID_MAX_LIMIT\fP, приблизительно 4 миллиона).
.TP 
\fI/proc/sys/kernel/powersave\-nap\fP (только на PowerPC)
Этот файл содержит флаг. Если он установлен Linux\-PPC будет использовать
режим "nap" для энергосбережения, в противном случае будет использоваться
режим "doze".
.TP 
\fI/proc/sys/kernel/printk\fP
В файле есть четыре значения: \fIconsole_loglevel\fP,
\fIdefault_message_loglevel\fP, \fIminimum_console_level\fP и
\fIdefault_console_loglevel\fP. Эти значения влияют на поведение \fIprintk()\fP
при выдаче или протоколировании сообщений об ошибках. Подробности о
различных уровнях протоколирования см. в \fBsyslog\fP(2). Сообщения с более
высоким приоритетом чем\fIconsole_loglevel\fP будут выданы на
консоль. Сообщения без явно заданного приоритета будут выданы с приоритетом
\fIdefault_message_level\fP. \fIminimum_console_loglevel\fP \(em это минимальное
(наивысшее) значение, которое может иметь
\fIconsole_loglevel\fP. \fIdefault_console_loglevel\fP \(em это значение по
умолчанию для \fIconsole_loglevel\fP.
.TP 
\fI/proc/sys/kernel/pty\fP (начиная с Linux 2.6.4)
В этом каталоге содержится два файла, отражающих количество
псевдо\-терминалов UNIX 98 (см. \fBpts\fP(4)) в системе.
.TP 
\fI/proc/sys/kernel/pty/max\fP
Этот файл определяет максимальное количество псевдо\-терминалов.
.TP 
\fI/proc/sys/kernel/pty/nr\fP
Файл доступен только для чтения, показывает количество используемых в данный
момент псевдо\-терминалов.
.TP 
\fI/proc/sys/kernel/random\fP
Этот каталог содержит различные параметры, управляющие работой файла
\fI/dev/random\fP. Дополнительную информацию смотрите в \fBrandom\fP(4).
.TP 
\fI/proc/sys/kernel/real\-root\-dev\fP
Этот файл описывается в файле исходного кода ядра
\fIDocumentation/initrd.txt\fP.
.TP 
\fI/proc/sys/kernel/reboot\-cmd\fP (только на Sparc)
Этот файл, вероятно, является способом задания аргументов для начального
загрузчика SPARC ROM/Flash. Способ сказать ему, что делать после
перезагрузки?
.TP 
\fI/proc/sys/kernel/rtsig\-max\fP
(Только в ядре 2.6.7 и более ранних; см. \fBsetrlimit\fP(2)) Этот файл может
быть использован для настройки максимального количества сигналов реального
времени POSIX (в очереди), которое может воспринять система.
.TP 
\fI/proc/sys/kernel/rtsig\-nr\fP
(Только в ядре 2.6.7 и более ранних) Этот файл показывает количество
сигналов реального времени POSIX, которые в настоящий момент находятся в
очереди.
.TP 
\fI/proc/sys/kernel/sem\fP (начиная с Linux 2.4)
Этот файл содержит 4 значения, описывающих ограничения семафоров System V
IPC. Вот эти значения по порядку:
.RS
.IP SEMMSL 8
Максимальное количество семафоров в одном списке семафоров.
.IP SEMMNS 8
Системный лимит на количество семафоров во всех списках семафоров.
.IP SEMOPM 8
Максимальное количество операций, которое может быть указано в вызове
\fBsemop\fP(2).
.IP SEMMNI 8
Системный лимит на максимальное количество идентификаторов семафоров.
.RE
.TP 
\fI/proc/sys/kernel/sg\-big\-buff\fP
Этот файл показывает размер буфера стандартного SCSI устройства (sg). Вы не
можете пока настраивать его, но его можно изменить при компиляции ядра,
исправив \fIinclude/scsi/sg.h\fP, изменив в нём значение
\fBSG_BIG_BUFF\fP. Однако, в этом, как правило, нет необходимости.
.TP 
\fI/proc/sys/kernel/shmall\fP
Этот файл содержит системный лимит на общее количество страниц общей памяти
по стандарту System V.
.TP 
\fI/proc/sys/kernel/shmmax\fP
Этот файл может быть использован для опроса и установки ограничения
максимального размера сегмента общей памяти по стандарту System V во время
выполнения. В настоящий момент ядро поддерживает сегменты общей памяти до
1ГБ. Значение по умолчанию равно \fBSHMMAX\fP.
.TP 
\fI/proc/sys/kernel/shmmni\fP
Задаёт максимальное системное ограничение на количество создаваемых общих
сегментов памяти по стандарту System V (доступен в Linux 2.4 и новее).
.TP 
\fI/proc/sys/kernel/sysrq\fP
Этот файл контролирует функции, которые можно вызывать по клавише SysRq. По
умолчанию в нём содержится 1, которая означает, что разрешены любые
возможные запросы SysRq (в старых ядрах SysRq по умолчанию выключена, и её
требовалось явно включать при работе, но теперь этого больше не
требуется.). Возможные значения:

   0 \- отключить sysrq полностью
   1 \- включить все функции sysrq
  >1 \- маска битов разрешённых функций sysrq:
          2 \- включить управление уровнем протоколирования на консоль
          4 \- включить управление клавиатурой (SAK, unraw)
          8 \- включить отладочные дампы процессов и т.д.
         16 \- включить команду sync
         32 \- включить перемонтирование только для чтения
         64 \- включить отправку сигналов процессам (term, kill, oom\-kill)
        128 \- разрешить перезагрузку/выключение
        256 \- разрешить изменение приоритета всех задач времени выполнения

Этот файл существует только, если включён параметр сборки ядра
\fBCONFIG_MAGIC_SYSRQ\fP. Дополнительную информацию можно найти в исходном коде
ядра в файле \fIDocumentation/sysrq.txt\fP.
.TP 
\fI/proc/sys/kernel/version\fP
Этот файл содержит строку, подобную:

    #5 Wed Feb 25 21:49:24 MET 1998

Часть "#5" означает, что это пятая сборка ядра из исходной базы, а далее
указана дата и время сборки ядра.
.TP 
\fI/proc/sys/kernel/threads\-max\fP (начиная с Linux 2.3.11)
Этот файл определяет системный лимит на количество нитей (задач), которое
может быть создано в системе.
.TP 
\fI/proc/sys/kernel/zero\-paged\fP (только на PowerPC)
Этот файл содержит флаг. Когда он установлен (не ноль), Linux\-PPC будет
размещать пре\-нулевые страницы в цикле простоя, что возможно увеличит
скорость выполнения get_free_pages.
.TP 
\fI/proc/sys/net\fP
Этот каталог содержит некоторую информацию по функционированию сетевой
подсистемы. Описание некоторых файлов в этом каталоге можно найти в
\fBtcp\fP(7) и \fBip\fP(7).
.TP 
\fI/proc/sys/net/core/somaxconn\fP
Этот файл определяет наименьшее значение параметра \fIbacklog\fP системного
вызова \fBlisten\fP(2); подробности смотрите в справочной странице
\fBlisten\fP(2).
.TP 
\fI/proc/sys/proc\fP
Данный каталог может быть пуст.
.TP 
\fI/proc/sys/sunrpc\fP
Данный каталог поддерживает удалённый вызов процедур Sun для сетевой
файловой системы (NFS). В некоторых системах его нет.
.TP 
\fI/proc/sys/vm\fP
Этот каталог содержит файлы для тонкой настройки управления памятью,
буферами и кэшем.
.TP 
\fI/proc/sys/vm/drop_caches\fP (начиная с Linux 2.6.16)
Запись в этот файл заставляет ядро удалить (drop) данные кэшей , dentries и
inodes из памяти, выполняя при этом освобождения памяти.

Чтобы освободить pagecache, используйте команду \fIecho 1 >
/proc/sys/vm/drop_caches\fP; чтобы освободить dentries и inodes, используйте
команду \fIecho 2 > /proc/sys/vm/drop_caches\fP; чтобы освободить команду
pagecache, dentries и inodes, используйте команду \fIecho 3 >
/proc/sys/vm/drop_caches\fP.

Так как это неразрушающая операция и изменившиеся (dirty) объекты не
свободны, пользователь сначала должен запустить команду \fBsync\fP(8).
.TP 
\fI/proc/sys/vm/legacy_va_layout\fP (начиная с Linux 2.6.9)
.\" The following is from Documentation/filesystems/proc.txt
Если не равно нулю, то новая раскладка 32\-битного отображения памяти
выключается; ядро будет использовать старую (2.4) раскладку для всех
процессов.
.TP 
\fI/proc/sys/vm/memory_failure_early_kill\fP (начиная с Linux 2.6.32)
.\" The following is based on the text in Documentation/sysctl/vm.txt
Управляет, как завершать процессы, когда неисправленная ошибка памяти
(обычно, 2\-битная ошибка в модуле памяти), которая не может быть обработана
ядром, обнаружена в фоновом режиме аппаратным обеспечением. В некоторых
случаях (например, когда страница имеет правильную копию на диске), ядро
может может прозрачно исправить ошибку без влияния на приложения. Но если
актуальной копии данных нет, то ядро завершит процесс, чтобы остановить
распространение повреждения данных.

В файле содержатся следующие значения:
.RS
.IP 1: 4
При обнаружении завершать все процессы, у которых есть повреждённые и не
восстановимые с диска страницы. Заметим, что это поддерживается не для всех
типов страниц, например для внутренних данных ядра или кэша подкачки, но
работает для большинства пользовательских страниц.
.IP 0: 4
Только отключить отображение повреждённой страницы у у всех процессов и
завершать только процессы, которые пытаются к ней обратиться.
.RE
.IP
Такое завершение выполняется с использованием сигнала \fBSIGBUS\fP с
установления значения \fIsi_code\fP равным \fBBUS_MCEERR_AO\fP. Процессы могут
обработать такую ситуацию, если захотят; подробней см. \fBsigaction\fP(2).

Это свойство активно только на архитектурах/платформах с дополнительными
проверки и зависит от возможностей аппаратного обеспечения.

Приложения могут изменить настройку \fImemory_failure_early_kill\fP для себя с
помощью операции \fBPR_MCE_KILL\fP вызова \fBprctl\fP(2).
.IP
Доступен только, если ядро собрано с поддержкой \fBCONFIG_MEMORY_FAILURE\fP.
.TP 
\fI/proc/sys/vm/memory_failure_recovery\fP (начиная с Linux 2.6.32)
.\" The following is based on the text in Documentation/sysctl/vm.txt
Включает восстановление отказов памяти (если поддерживается платформой)
.RS
.IP 1: 4
Пытаться восстановить.
.IP 0: 4
При отказе памяти всегда доводить до паники.
.RE
.IP
Доступен только, если ядро собрано с поддержкой \fBCONFIG_MEMORY_FAILURE\fP.
.TP 
\fI/proc/sys/vm/oom_dump_tasks\fP (начиная с Linux 2.6.25)
.\" The following is from Documentation/sysctl/vm.txt
Включает системный дамп задач (исключая ядерные нити), который создаётся
когда ядро выполняет OOM\-killing. Дамп включает следующую информацию по
каждой задаче (нити, процессу): ID нити, реальный ID пользователя, ID группы
нитей (ID процесса), размер виртуальной памяти, размер резидентной
настройки, процессор, на котором работала задача, счётчик oom_adj (описание
смотрите в \fI/proc/[pid]/oom_adj\fP) и имя команды. Эти данные полезны для
определения того, почему был вызван OOM\-killer и нахождения экземпляра
задачи, его вызвавшего.

Если в файле содержится нулевое значение, то информация не выдаётся. На
очень больших системах с тысячами задач дамп информации о состоянии памяти
может быть неосуществим по каждой задаче. Системы не должны страдать от
потери производительности из\-за возникновения ситуаций с OOM, если такая
информация ненужна.

Если задано ненулевое значение, то эта информация показывается в момент
когда OOM\-killer завершает захватившую память задачу.

Значение по умолчанию равно 0.
.TP 
\fI/proc/sys/vm/oom_kill_allocating_task\fP (начиная с Linux 2.6.24)
.\" The following is from Documentation/sysctl/vm.txt
Включает или выключает задачу завершения при OOM (исчерпание свободной
памяти).

Если это значение равно нулю, то OOM\-killer будет сканировать весь список
задач и выбирать задачу для завершения на основе набора эвристических
правил. Обычно выбирается задача, которая больше всех захватила памяти, что
при её завершении позволит освободить огромное количество памяти.

Если это значение не равно нулю, то OOM\-killer просто завершит задачу, из\-за
которой возникла ситуация нехватки памяти. Это позволяет избежать затратной
операции сканирования списка задач.

Если \fI/proc/sys/vm/panic_on_oom\fP не равно нулю, то оно имеет приоритет над
значением из \fI/proc/sys/vm/oom_kill_allocating_task\fP.

Значение по умолчанию равно 0.
.TP 
\fI/proc/sys/vm/overcommit_memory\fP
Этот файл содержит значение режима учёта виртуальной памяти ядра. Значения:
.RS
.IP
0: эвристический перерасход (значение по умолчанию)
.br
1: всегда разрешать перерасход, не проверять
.br
2: всегда проверять, запретить перерасход
.RE
.IP
В режиме 0, вызовы \fBmmap\fP(2) с \fBMAP_NORESERVE\fP не проверяются, и проверка
по умолчанию очень поверхностная, что может привести к завершению процесса с
помощью OOM\-killer. В Linux 2.4 любое ненулевое значение подразумевает режим
1. В режиме 2 (доступен начиная с Linux 2.6), общее виртуальное адресное
пространство системы ограничено величиной SS + RAM*(r/100), где SS \(em это
размер пространства подкачки, RAM \(em это размер физической памяти, а r
\(em это значение из файла \fI/proc/sys/vm/overcommit_ratio\fP.
.TP 
\fI/proc/sys/vm/overcommit_ratio\fP
Смотрите описание \fI/proc/sys/vm/overcommit_memory\fP.
.TP 
\fI/proc/sys/vm/panic_on_oom\fP (начиная с Linux 2.6.18)
.\" The following is adapted from Documentation/sysctl/vm.txt
Включает или отключает панику ядра при нехватке памяти.

Если значение равно 0, то ядерный OOM\-killer завершит какой\-нибудь вышедший
из подчинения процесс. Обычно, OOM\-killer способен завершить такой процесс и
система продолжит работу.

Если значение в файле равно 1, то ядро, обычно, переходит в состояние паники
при нехватке памяти. Однако, если процесс ограничен в выделении определённых
элементов (nodes) согласно политике памяти (\fBmbind\fP(2) \fBMPOL_BIND\fP) или
процессора (\fBcpuset\fP(7)) и предел таких элементов памяти был достигнут, то
такой процесс может быть завершён OOM\-killer. В этом случае состояние паники
не возникнет, так как другие элементы памяти могут освободиться, что
означает, что система в целом может не прийти к ситуации нехватки памяти.

Если значение в файле равно 2, то ядро всегда переходит в состояние паники,
когда возникает нехватка памяти.

Значение по умолчанию равно 0. Значение 1 и 2 используются для
отказоустойчивости кластеров. Выберите любое согласно вашей политике
отказоустойчивости.
.TP 
\fI/proc/sys/vm/swappiness\fP
.\" The following is from Documentation/sysctl/vm.txt
Значение в этом файле определяет, насколько активно ядро будет вытеснять
страницы в пространство подкачки. Большие значения увеличивают активность,
меньшие значения сокращают активность. По умолчанию значение равно 60.
.TP 
\fI/proc/sysrq\-trigger\fP (начиная с Linux 2.4.21)
Запись символа в этот файл приводит к вызову функции SysRq, как если бы была
нажата ALT\-SysRq\-<клавиша> (смотрите описание
\fI/proc/sys/kernel/sysrq\fP). Обычно, этот файл доступен на запись только
\fIroot\fP. Дополнительную информацию смотрите в исходном коде ядра в файле
\fIDocumentation/sysrq.txt\fP.
.TP 
\fI/proc/sysvipc\fP
Подкаталог содержит псевдо\-файлы \fImsg\fP, \fIsem\fP и \fIshm\fP.Эти файлы описывают
объекты межпроцессного взаимодействия (System V Interprocess Communication
(IPC)) (соответственно: очереди сообщений, семафоры и общую память), которые
существуют в системе в настоящий момент. Похожая информация предоставляется
через \fBipcs\fP(1). Эти файлы имеют заголовки и форматируются (по одному IPC
объекту на строку) для более лёгкого понимания. \fBsvipc\fP(7) представляет
подготовительный материал по информации, которую показывают эти файлы.
.TP 
\fI/proc/tty\fP
Подкаталог, содержащий псевдо\-файлы и подкаталоги драйверов tty и параметры
линий.
.TP 
\fI/proc/uptime\fP
Этот файл содержит два числа: время работы системы с момента загрузки (в
секундах) и общее время, которое система провела в состоянии простоя (в
секундах).
.TP 
\fI/proc/version\fP
Строка, идентифицирующая версию ядра, которое запущено в данный момент. Она
включает содержимое \fI/proc/sys/kernel/ostype\fP,
\fI/proc/sys/kernel/osrelease\fP и \fI/proc/sys/kernel/version\fP. Пример:
.nf
.in -2
\f(CWLinux version 1.0.9 (quinlan@phaze) #1 Sat May 14 01:51:54 EDT 1994\fP
.in +2
.fi
.\" FIXME Document /proc/timer_list
.\" .TP
.\" .IR /proc/timer_list " (since Linux 2.6.21)"
.\" See the 2.6.21 Change log
.\" FIXME Document /proc/timer_stats
.\" .TP
.\" .IR /proc/timer_stats " (since Linux 2.6.21)"
.\" See the 2.6.21 Change log
.TP 
\fI/proc/vmstat\fP (начиная с Linux 2.6)
Этот файл содержит различную статистику по виртуальной памяти.
.TP 
\fI/proc/zoneinfo\fP (начиная с Linux 2.6.13)
.\" FIXME more should be said about /proc/zoneinfo
Этот файл содержит информацию о зонах памяти. Он полезен при анализе
поведения виртуальной памяти.
.SH ЗАМЕЧАНИЯ
Много строк (например, окружение и командная строка) хранятся во внутреннем
формате с полями, завершающимися нулевыми байтами (\(aq\e0\(aq), поэтому они
будут более читаемыми, если вы воспользуетесь командой \fIod \-c\fP или \fItr
"\e000" "\en"\fP. Команда \fIecho \`cat <file>\`\fP также хорошо
работает.

.\" .SH ACKNOWLEDGEMENTS
.\" The material on /proc/sys/fs and /proc/sys/kernel is closely based on
.\" kernel source documentation files written by Rik van Riel.
Данная справочная страница неполна, в ней могут быть неточности и является
одной из страниц, которую требуется обновлять очень часто.
.SH "СМОТРИТЕ ТАКЖЕ"
\fBcat\fP(1), \fBdmesg\fP(1), \fBfind\fP(1), \fBfree\fP(1), \fBps\fP(1), \fBtr\fP(1),
\fBuptime\fP(1), \fBchroot\fP(2), \fBmmap\fP(2), \fBreadlink\fP(2), \fBsyslog\fP(2),
\fBslabinfo\fP(5), \fBhier\fP(7), \fBtime\fP(7), \fBarp\fP(8), \fBhdparm\fP(8),
\fBifconfig\fP(8), \fBinit\fP(8), \fBlsmod\fP(8), \fBlspci\fP(8), \fBmount\fP(8),
\fBnetstat\fP(8), \fBprocinfo\fP(8), \fBroute\fP(8)
.br
Файлы из дерева исходного кода ядра: \fIDocumentation/filesystems/proc.txt\fP,
\fIDocumentation/sysctl/vm.txt\fP

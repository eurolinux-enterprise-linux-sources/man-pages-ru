.\" Written by Oron Peled <oron@actcom.co.il>.
.\" May be distributed subject to the GPL.
.\"
.\" I tried to be as much generic in the description as possible:
.\" - General boot sequence is applicable to almost any
.\" OS/Machine (DOS/PC, Linux/PC, Solaris/SPARC, CMS/S390)
.\" - kernel and init(8) is applicable to almost any UNIX/Linux
.\" - boot scripts are applicable to SYSV-R4 based UNIX/Linux
.\"
.\" Modified 2004-11-03 patch from Martin Schulze <joey@infodrom.org>
.\"
.\"*******************************************************************
.\"
.\" This file was generated with po4a. Translate the source file.
.\"
.\"*******************************************************************
.TH BOOT 7 2010\-09\-19 Linux "Руководство программиста Linux"
.SH ИМЯ
boot\-scripts \- общее описание последовательности загрузки системы
.SH ОПИСАНИЕ
.LP
Последовательность загрузки варьируется в отдельных местах на разных
системах, но в целом все равно разбивается на несколько основных шагов: (i)
включение оборудования, (ii) загрузчик ОС, (iii) запуск ядра, (iv) работа
init и inittab, (v) загрузочные сценарии. Теперь опишем каждый из этих шагов
более подробно.
.SS "Включение оборудования"
После включения компьютера или аппаратной перезагрузки управление передаётся
программе, хранящейся в памяти, доступной только на чтение (обычно это
PROM). В мире ПК эта программа называется \fBBIOS\fP.

Эта программа обычно осуществляет простейшие тесты компьютера и читает
дополнительные из энергонезависимой памяти. Эта память в ПК реализована на
памяти CMOS с питанием от батареи, и для краткости называется просто
\fBCMOS\fP, хотя официальное её название вне мира ПК \(em \fBnvram\fP
(non\-volatile ram).

Параметры, хранящиеся в nvram, отличаются в разных системах, но как минимум
там хранится информация о загрузочном устройстве или о порядке поиска
загрузочного устройства.

Затем аппаратный загрузчик обращается к загрузочному устройству, загружает
загрузчик операционной системы, расположенный в определённом месте
устройства, и передаёт ему управление дальнейшей загрузкой.
.TP 
Примечание:
Здесь не рассматривается загрузка по сети. Те, кто хочет исследовать эту
область, должны искать и изучать документацию по DHCP, TFTP, PXE, Etherboot.
.SS "Загрузчик ОС"
На ПК загрузчик операционной системы расположен в первом секторе
загрузочного устройства \(em в так называемой главной загрузочной записи
\fBMBR\fP (Master Boot Record).

В большинстве систем этот начальный загрузчик в силу разных обстоятельств
крайне ограничен. Даже на не ПК существуют некоторые ограничения на размер и
сложность загрузчика, ну а ограничение MBR до 512 байт на ПК (включая
таблицу разделов) делает совершенно невозможным полностью разместить там
полноценный загрузчик ОС.

Поэтому, в большинстве операционных систем начальный загрузчик вызывает
вторичный загрузчик ОС, расположенный в определённом дисковом разделе.

В Linux системным загрузчиком ОС обычно является программа \fBlilo\fP(8) или
\fBgrub\fP(8). Оби они могут устанавливаться как вторичные загрузчики (то есть
раздел DOS с установленным MBR указывает на них), либо как загрузчик из двух
частей, где первая часть кода в MBR запускает вторую, расположенную в
корневом разделе.

Основной задачей загрузчика ОС является определение ядра на диске, затем его
загрузка в память и запуск. Большинство системных загрузчиков имеют
интерактивный режим, позволяют указывать альтернативное ядро (резервное,
если не заработает последнее собранное) и передавать ядру необязательные
параметры при загрузке.
.SS "Запуск ядра"
Когда ядро загружено, то оно: инициализирует устройства (через их драйвера),
запускает процесс создания виртуальной памяти на диске (этот «процесс ядра»
в последних ядрах Linux теперь называется kswapd), и монтирует корневую
файловую систему (/).

Некоторые из параметров, передаваемые ядру, уже могут влиять на эти действия
(например, вы можете переопределить корневую файловую систему по
умолчанию). Для получения более подробной информации о параметрах ядра Linux
читайте \fBbootparam\fP(7).

Только после этого ядро создаёт первый процесс (пользовательский) с номером
1. Этот процесс исполняет программу \fI/sbin/init\fP, передавая ей все
оставшиеся параметры загрузки, не обработанные ядром.
.SS "Работа init и inittab"
При запуске init считывается файл \fI/etc/inittab\fP для дальнейших
инструкций. Этот файл определяет, что должно быть запущено на разных
\fIуровнях выполнения\fP.

Это позволяет системному администратору легко управлять схемой загрузки, так
как с каждым уровнем выполнения определён свой набор служб (например, \fBS\fP
это однопользовательский (\fIsingle\-user\fP) режим, на уровне \fB2\fP запускаются
почти все сетевые службы). Администратор может изменить текущий уровень
выполнения с помощью \fBinit\fP(8) и определить текущий уровень, используя
\fBrunlevel\fP(8).

Однако, было бы неудобно управлять отдельными службами в одном файле,
поэтому inittab только указывает на наборы сценариев, действительно
запускающих/останавливающих отдельные службы.
.SS "Загрузочные сценарии"

.TP 
Примечание:
Следующее описание применимо к системам, основанным на System V release 4, к
которым на текущий момент относится большинство коммерческих UNIX\-систем
(Solaris, HP\-UX, Irix, Tru64), а также основные дистрибутивы Linux (Red Hat,
Debian, Mandriva, SUSE, Ubuntu). Некоторые системы (Slackware Linux,
FreeBSD, OpenBSD) имеют немного другую схему работы загрузочных сценариев.
.LP
Для каждой управляемой службы (почтовой, сервера nfs, cron и т.п.)
существует отдельный сценарий запуска в особом каталоге (\fI/etc/init.d\fP в
большинстве версий Linux). Каждый из этих сценариев воспринимает в качестве
отдельного аргумента слово «start» (вызывает запуск сценария) или слово
«stop» (остановка службы). Сценарий может (необязательно) воспринимать и
другие параметры (например, «restart» для остановки и запуска, «status»  для
отображения состояния службы). Запуск сценария без параметров обычно покажет
все возможные аргументы.
.SS "Последовательность каталогов запуска"
Для того, чтобы разные сценарии запускались/останавливались на разных
уровнях выполнения в некотором, чётко определённом порядке, существует так
называемая \fIпоследовательность каталогов запуска\fP. Это список каталогов,
обычно в \fI/etc/rc[0\-6S].d\fP. В каждом из этих каталогов есть ссылки (обычно
символьные) на сценарии в каталоге \fI/etc/init.d\fP.

Первичный сценарий (обычно \fI/etc/rc\fP) вызывается из \fBinittab\fP(5) и
запускает остальные сценарии служб через ссылки в подкаталогах. Все ссылки с
именами, начинающимися на \(aqS\(aq вызываются с аргументом «start»
(т.е. запускают службы). Все ссылки с именами, начинающимися на \(aqK\(aq
запускаются с аргументом «stop» (тем самым останавливая службу).

Для придания порядка запуску или остановки сценариев в одном уровне
выполнения имена ссылок содержат порядковые номера. Также для понимания
смысла имён они обычно заканчиваются на имя службы, которую они
обслуживают. Например: ссылка \fI/etc/rc2.d/S80sendmail\fP запускает службу
sendmail на уровне выполнения 2. Это случится после запуска
\fI/etc/rc2.d/S12syslog\fP, но перед запуском \fI/etc/rc2.d/S90xfs\fP.

Для управления порядком загрузки и уровнями выполнения нужно просто привести
эти файлы в нужный вам вид. Однако, во многих версиях Linux существуют
инструменты, помогающие в решении задач по управлению службами (например:
\fBchkconfig\fP(8)).
.SS "Настройки загрузки"
Обычно запускаемые службы могут дополнительно воспринимать разные параметры
командной строки. Для изменения таких параметров системным администраторам
без редактирования текста сценария загрузки можно использовать файлы
настроек. Они расположены в особом каталоге (обычно \fI/etc/sysconfig\fP в
системах Red Hat) и используются загрузочными сценариями.

В старых системах UNIX эти файлы содержали именно параметры командной строки
для запуска служб, но в современных системах Linux (а также в HP\-UX) эти
файлы просто содержат разные переменные оболочки. Загрузочные сценарии в
\fI/etc/init.d\fP просматривают сначала эти файлы настроек и лишь потом
используют значения переменных.
.SH ФАЙЛЫ
.LP
\fI/etc/init.d/\fP, \fI/etc/rc[S0\-6].d/\fP, \fI/etc/sysconfig/\fP
.SH "СМОТРИТЕ ТАКЖЕ"
\fBinittab\fP(5), \fBbootparam\fP(7), \fBinit\fP(8), \fBrunlevel\fP(8), \fBshutdown\fP(8)

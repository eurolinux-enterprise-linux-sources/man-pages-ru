.\" This is in the public domain
.\"*******************************************************************
.\"
.\" This file was generated with po4a. Translate the source file.
.\"
.\"*******************************************************************
.TH LD.SO 8 2012\-04\-17 GNU "Руководство программиста Linux"
.SH ИМЯ
ld.so, ld\-linux.so* \- динамический компоновщик/загрузчик
.SH ОБЗОР
Динамический компоновщик может запускаться неявно из динамически
скомпонованной программы или библиотеки (в этом случае динамическому
компоновщику невозможно передать параметры командной строки, как и в случае
с ELF, когда динамический компоновщик хранится в разделе \fB.interp\fP
исполняемой программы) или явно с помощью вызова:
.P
\fI/lib/ld\-linux.so.*\fP [ПАРАМЕТРЫ] [ПРОГРАММА [АРГУМЕНТЫ]]
.SH ОПИСАНИЕ
Программы \fBld.so\fP и \fBld\-linux.so*\fP ищут и загружают динамические
библиотеки, необходимые программе, а также подготавливают программу к
запуску и запускают её.
.LP
Для двоичных файлов Linux требуется динамическая компоновка (компоновка во
время выполнения), если при сборке программе \fBld\fP(1) не был передан
параметр \fB\-static\fP.
.LP
Программа \fBld.so\fP предназначена для обработки двоичных файлов в формате
a.out (старый формат); \fBld\-linux.so*\fP предназначена для обработки файлов в
формате ELF (\fI/lib/ld\-linux.so.1\fP, если используется libc5 и
\fI/lib/ld\-linux.so.2\fP, если glibc2), который используется последние
несколько лет. Обе программы ведут себя одинаково и используют те же самые
файлы поддержки и программы \fBldd\fP(1), \fBldconfig\fP(8) и \fI/etc/ld.so.conf\fP.
.LP
Динамические библиотеки, необходимые программе, ищутся в следующем порядке:
.IP o 3
(только для ELF) В каталогах, указанных в атрибуте DT_RPATH динамического
раздела двоичного файла, если он есть и если атрибут DT_RUNPATH не
существует. Использование DT_RPATH не рекомендуется.
.IP o
В переменной окружения LD_LIBRARY_PATH. Если исполняется двоичный файл с
установленным set\-user\-ID/set\-group\-ID битом, то в этом случае она
игнорируется.
.IP o
(только для ELF) В каталогах, указанных в атрибуте DT_RUNPATH динамического
раздела двоичного файла, если он есть.
.IP o
В кэш\-файле \fI/etc/ld.so.cache\fP, содержащем скомпилированный список
библиотек\-кандидатов, которые ранее были найдены по указанным путям
расположения библиотек. Однако, если при сборке двоичного файла компоновщику
был указан параметр \fB\-z nodeflib\fP, то библиотеки в путях по умолчанию будут
пропущены. Библиотеки, установленные в каталоги для аппаратных возможностей
(см. далее) имеют больший приоритет, чем остальные библиотеки.
.IP o
В каталоге по умолчанию \fI/lib\fP и затем в \fI/usr/lib\fP. Если при сборке
двоичного файла компоновщику был указан параметр \fB\-z nodeflib\fP, то этот шаг
пропускается.
.SS "$ORIGIN и rpath"
.PP
.\" ld.so also understands $LIB, with the same meaning as $ORIGIN/lib,
.\" it appears.
.\"
.\" There is also $PLATFORM.  This is a kind of wildcard
.\" of directories related at AT_HWCAP.  To get an idea of the
.\" places that $PLATFORM would match, look at the output of the
.\" following:
.\"
.\" mkdir /tmp/d
.\" LD_LIBRARY_PATH=/tmp/d strace -e open /bin/date 2>&1 | grep /tmp/d
.\"
.\" ld.so lets names be abbreviated, so $O will work for $ORIGIN;
.\" Don't do this!!
\fBld.so\fP обрабатывает строку \fI$ORIGIN\fP (то же самое, что \fI${ORIGIN}\fP)
согласно спецификации rpath (DT_RPATH или DT_RUNPATH) для поиска каталога, в
котором содержится исполняемый файл приложения. Таким образом, приложение,
расположенное в \fIsomedir/app\fP может компилироваться с \fIgcc
\-Wl,\-rpath,\(aq$ORIGIN/../lib\(aq\fP для того, чтобы оно могло найти связанную
динамическую библиотеку в \fIsomedir/lib\fP и не важно где в иерархии каталогов
будет находиться \fIsomedir\fP. Это облегчает создание приложений "под ключ",
которые вместо установки в специальные каталоги, можно просто распаковать в
любой каталог, и они всё равно найдут свои динамические библиотеки.
.SH ПАРАМЕТРЫ
.TP 
\fB\-\-list\fP
Выдать список всех зависимостей и как они удовлетворяются.
.TP 
\fB\-\-verify\fP
Проверить, что программа является динамически скомпонованной и что
компоновщик понимает её формат.
.TP 
\fB\-\-library\-path ПУТЬ\fP
Использовать PATH вместо значения переменной окружения \fBLD_LIBRARY_PATH\fP
(см. далее).
.TP 
\fB\-\-inhibit\-rpath СПИСОК\fP
Игнорировать информацию в RPATH и RUNPATH об именах объектов из СПИСКА. Этот
параметр игнорируется, если на \fBld.so\fP установлен бит is set\-user\-ID или
set\-group\-ID.
.TP 
\fB\-\-audit СПИСОК\fP
Использовать объекты из СПИСКА в качестве аудиторов.
.SH "АППАРАТНЫЕ ВОЗМОЖНОСТИ"
Некоторые библиотеки скомпилированы с использованием специальных аппаратных
инструкций, которые существуют не в каждом ЦП. Такие библиотеки должны быть
установлены в каталоги, чью имена (например, \fI/usr/lib/sse2/\fP) определяют
требования к аппаратным возможностям. Динамический компоновщик проверяет эти
каталоги учитывая аппаратуру машины и выбирает наиболее подходящую версию
требуемой библиотеки. Каталоги аппаратных возможностей могут каскадироваться
для объединения свойств ЦП. Список имён поддерживаемых аппаратных
возможностей зависит от ЦП. В настоящее время распознаются следующие имена:
.TP 
\fBAlpha\fP
ev4, ev5, ev56, ev6, ev67
.TP 
\fBMIPS\fP
loongson2e, loongson2f, octeon, octeon2
.TP 
\fBPowerPC\fP
4xxmac, altivec, arch_2_05, arch_2_06, booke, cellbe, dfp, efpdouble,
efpsingle, fpu, ic_snoop, mmu, notb, pa6t, power4, power5, power5+, power6x,
ppc32, ppc601, ppc64, smt, spe, ucache, vsx
.TP 
\fBSPARC\fP
flush, muldiv, stbar, swap, ultra3, v9, v9v, v9v2
.TP 
\fBs390\fP
dfp, eimm, esan3, etf3enh, g5, highgprs, hpage, ldisp, msa, stfle, z900,
z990, z9\-109, z10, zarch
.TP 
.TP 
\fBx86 (только 32\-битные)\fP
acpi, apic, clflush, cmov, cx8, dts, fxsr, ht, i386, i486, i586, i686, mca,
mmx, mtrr, pat, pbe, pge, pn, pse36, sep, ss, sse, sse2, tm
.SH ОКРУЖЕНИЕ
Существует четыре важные переменные окружения.
.TP 
\fBLD_BIND_NOW\fP
(libc5; в glibc начиная с версии 2.1.1) Если переменная содержит непустую
строку, то динамический компоновщик будет искать все символы при запуске
программы вместо того, чтобы отложить поиск вызовов функций до момента,
когда они встретятся в первый раз. Это полезно при отладке.
.TP 
\fBLD_LIBRARY_PATH\fP
Содержит список разделённых двоеточием каталогов, в которых будет
производиться поиск ELF библиотек в момент выполнения. Похожа на переменную
окружения \fBPATH\fP.
.TP 
\fBLD_PRELOAD\fP
Содержит заданный пользователем список дополнительных динамических ELF
библиотек разделённых пробелами, которые будут загружены перед всеми
другими. Это можно использовать для выборочной замены функций в других
динамических библиотеках. Для двоичных файлов ELF с установленным битом
set\-user\-ID/set\-group\-ID будут загружены только библиотеки в стандартных
каталогах поиска и которые также имеют установленный set\-user\-ID.
.TP 
\fBLD_TRACE_LOADED_OBJECTS\fP
(только для ELF) Если переменная содержит непустую строку, то вместо
нормального запуска программы будут выданы её зависимости от динамических
библиотек, как если бы она была запущена через \fBldd\fP(1).
.LP
Также существует большое количество более или менее полезных переменных,
многие из которых устарели или предназначены только для внутреннего
использования.
.TP 
\fBLD_AOUT_LIBRARY_PATH\fP
(libc5) Тоже что и \fBLD_LIBRARY_PATH\fP, но только для двоичных файлов в
формате a.out. Старые версии ld\-linux.so.1 также поддерживают
\fBLD_ELF_LIBRARY_PATH\fP.
.TP 
\fBLD_AOUT_PRELOAD\fP
(libc5) Тоже что и \fBLD_PRELOAD\fP, но только для двоичных файлов в формате
a.out. Старые версии ld\-linux.so.1 также поддерживают \fBLD_ELF_PRELOAD\fP.
.TP 
\fBLD_AUDIT\fP
(в glibc начиная с 2.4) Определяемый пользователем список динамических
объектов ELF разделяемых двоеточиями, которые будут загружены раньше всех
остальных в отдельном пространстве имён компоновщика (т.е., они не
внедряются вместо обычных привязываемых символов, которые могли бы быть в
этом процессе). Эти библиотеки можно использовать для контрольной проверки
операций динамического компоновщика. \fBLD_AUDIT\fP игнорируется, если на
двоичном файле установлены биты set\-user\-ID/set\-group\-ID.

Динамический компоновщик будет уведомлять библиотеки контроля в так
называемых точках контроля \(em например, при загрузке новой библиотеки,
поиске символа или при вызове символа из другого динамического объекта \(em
вызывая соответствующую функцию библиотеки контроля. Подробности смотрите в
\fBrtld\-audit\fP(7). Интерфейс контроля в значительной степени совместим с
предоставляемым Solaris, описан в его \fIРуководстве по компоновщику и
библиотекам\fP (\fILinker and Libraries Guide\fP) в главе \fIИнтерфейс контроля
компоновщика во время выполнения\fP (\fIRuntime Linker Auditing Interface\fP).
.TP 
\fBLD_BIND_NOT\fP
(в glibc начиная с 2.1.95) Не обновлять GOT (global offset table \(em
таблицу глобальных перемещений) и PLT (procedure linkage table \(em таблицу
компоновки процедур) после нахождения символа.
.TP 
\fBLD_DEBUG\fP
(в glibc начиная с 2.1) Выводить подробную отладочную информацию о
динамическом компоновщике. Если значение равно \fBall\fP, то выдаётся вся
имеющаяся отладочная информация, если значение равно \fBhelp\fP, то выдаётся
справка о некоторых категориях, которые могут быть указаны в этой переменной
окружения. Начиная с glibc 2.3.4, \fBLD_DEBUG\fP игнорируется, если на двоичном
файле установлены биты set\-user\-ID/set\-group\-ID.
.TP 
\fBLD_DEBUG_OUTPUT\fP
(в glibc начиная с 2.1) Файл куда будет записываться вывод \fBLD_DEBUG\fP \(em
по умолчанию это стандартный вывод. \fBLD_DEBUG_OUTPUT\fP игнорируется, если на
двоичном файле установлены биты set\-user\-ID/set\-group\-ID.
.TP 
\fBLD_DYNAMIC_WEAK\fP
(в glibc начиная с 2.1.91) Разрешить перекрытие слабых символов (возврат к
поведению старой glibc). В целях безопасности начиная с glibc 2.3.4
\fBLD_DYNAMIC_WEAK\fP игнорируется, если на двоичном файле установлены биты
set\-user\-ID/set\-group\-ID.
.TP 
\fBLD_HWCAP_MASK\fP
(в glibc начиная с 2.1) Маска для совместимости с аппаратными возможностями.
.TP 
\fBLD_KEEPDIR\fP
(только для a.out)(libc5) Не игнорировать каталог для загрузки в именах
a.out библиотек. Настоятельно не рекомендуется использовать этот параметр.
.TP 
\fBLD_NOWARN\fP
(только a.out)(libc5) Подавлять предупреждения о библиотеках a.out с
несовместимыми младшими номерами версий.
.TP 
\fBLD_ORIGIN_PATH\fP
.\" Only used if $ORIGIN can't be determined by normal means
.\" (from the origin path saved at load time, or from /proc/self/exe)?
(в glibc начиная с 2.1) Путь, где находится двоичный файл (для не
set\-user\-ID программ). В целях безопасности начиная с glibc 2.4
\fBLD_ORIGIN_PATH\fP игнорируется, если на двоичном файле установлены биты
set\-user\-ID/set\-group\-ID.
.TP 
\fBLD_POINTER_GUARD\fP
(в glibc начиная с 2.4) Значение 0 отключает защиту указателя. Любое другое
значение включает защиту указателя, что является действием по
умолчанию. Защита указателя \(em это механизм безопасности, в результате
которого некоторые указатели на код, хранящийся в перезаписываемой памяти
программы (адреса возврата, сохраняемые \fBsetjmp\fP(3) или указатели на
функцию, используемые различными внутренними функциями glibc), искажаются
полупроизвольным образом, что затрудняет атакующему подбор указателей для
проведения атак переполнения буфера или срыва стека.
.TP 
\fBLD_PROFILE\fP
(в glibc начиная с 2.1) В переменной задаётся динамический объект для
профилирования, в виде пути или имени so. Результат профилирования
записывается в файл с именем: "\fI$LD_PROFILE_OUTPUT\fP/\fI$LD_PROFILE\fP".
.TP 
\fBLD_PROFILE_OUTPUT\fP
(в glibc начиная с 2.1) Каталог, куда будет сохраняться результат работы с
\fBLD_PROFILE\fP. Если эта переменная не определена или её значение равно
пустой строке, то по умолчанию результат будет сохранён в каталог
\fI/var/tmp\fP. Переменная \fBLD_PROFILE_OUTPUT\fP игнорируется для программ с
установленными флагами set\-user\-ID и set\-group\-ID, для которых всегда
используется \fI/var/profile\fP.
.TP 
\fBLD_SHOW_AUXV\fP
.\" FIXME
.\" Document LD_TRACE_PRELINKING (e.g.: LD_TRACE_PRELINKING=libx1.so ./prog)
.\" Since glibc 2.3
.\" Also enables DL_DEBUG_PRELINK
(в glibc начиная с 2.1) Показать вспомогательный массив, передаваемый из
ядра. В целях безопасности начиная с glibc 2.3.5 \fBLD_SHOW_AUXV\fP
игнорируется, если на двоичном файле установлены биты
set\-user\-ID/set\-group\-ID.
.TP 
\fBLD_USE_LOAD_BIAS\fP
.\" http://sources.redhat.com/ml/libc-hacker/2003-11/msg00127.html
.\" Subject: [PATCH] Support LD_USE_LOAD_BIAS
.\" Jakub Jelinek
По умолчанию (т.е., если переменная не определена) исполняемые и
предварительно скомпонованные объекты учитывают базовые адреса библиотек, от
которых они зависят, а (предварительно не скомпонованные) перемещаемые
исполняемые (PIE) и другие динамические объекты не учитывают их. Если
переменной \fBLD_USE_LOAD_BIAS\fP присвоено значение, то и исполняемые файлы и
PIE учитывают базовые адреса. Если значение переменной \fBLD_USE_LOAD_BIAS\fP
равно 0, то ни исполняемые файлы ни PIE не учитывают базовые адреса. Эта
переменная игнорируется программами с флагами set\-user\-ID и set\-group\-ID.
.TP 
\fBLD_VERBOSE\fP
(в glibc начиная с 2.1) Если значение равно непустой строке, то выводится
информация о символах программы, если запрашивается информация о программе
(т.е., установлена переменная \fBLD_TRACE_LOADED_OBJECTS\fP или динамическому
компоновщику переданы параметры \fB\-\-list\fP или \fB\-\-verify\fP).
.TP 
\fBLD_WARN\fP
(только для ELF)(в glibc начиная с 2.1.3) Если значение равно непустой
строке, то выдаются предупреждения о ненайденных символах.
.TP 
\fBLDD_ARGV0\fP
(libc5) Значение \fIargv\fP[0] будет использоваться \fBldd\fP(1), если другого
нет.
.SH ФАЙЛЫ
.PD 0
.TP 
\fI/lib/ld.so\fP
динамический компоновщик/загрузчик a.out
.TP 
\fI/lib/ld\-linux.so.\fP{\fI1\fP,\fI2\fP}
динамический компоновщик/загрузчик ELF
.TP 
\fI/etc/ld.so.cache\fP
Файл с скомпилированным списком каталогов, в которых производится поиск
библиотек и сортированный список библиотек\-кандидатов.
.TP 
\fI/etc/ld.so.preload\fP
Файл со списком динамических ELF библиотек (через пробел), которые будут
загружены перед программой.
.TP 
\fBlib*.so*\fP
динамические библиотеки
.PD
.SH ЗАМЕЧАНИЯ
Функциональность \fBld.so\fP доступна для исполняемых программ,
скомпилированных с использованием libc версии 4.4.3 или
выше. Функциональность ELF доступна начиная с Linux 1.1.52 и libc5.
.SH "СМОТРИТЕ ТАКЖЕ"
\fBldd\fP(1), \fBrtld\-audit\fP(7), \fBldconfig\fP(8)
.\" .SH AUTHORS
.\" ld.so: David Engel, Eric Youngdale, Peter MacDonald, Hongjiu Lu, Linus
.\"  Torvalds, Lars Wirzenius and Mitch D'Souza
.\" ld-linux.so: Roland McGrath, Ulrich Drepper and others.
.\"
.\" In the above, (libc5) stands for David Engel's ld.so/ld-linux.so.
